import{_ as e,o as t,c as i,R as a}from"./chunks/framework.buEibnTs.js";const o="/silver-bullet/assets/git-1.MpUsAUnM.png",s="/silver-bullet/assets/git-2.0GM10Ptw.png",k=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"font-end/engineering/git.md","filePath":"font-end/engineering/git.md","lastUpdated":1701709582000}'),r={name:"font-end/engineering/git.md"},c=a('<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><p><img src="'+o+`" alt=""></p><p>使用 Git，可以轻松跟踪代码历史记录，查看谁做了哪些更改，并作为一个团队协作编写代码。由于整个 Git 历史记录都存储在共享存储库中，因此 Git 可以防止旧版本的无意覆盖。</p><h2 id="git-和-svn" tabindex="-1">Git 和 SVN <a class="header-anchor" href="#git-和-svn" aria-label="Permalink to &quot;Git 和 SVN&quot;">​</a></h2><p>Git 是分布式版本控制工具，可本地系统克隆远端存储库，支持离线提交，基于C语言，push/pull 很快，通过 commit 实现共享。<strong>不依赖于中央服务器来存储项目文件的所有版本。</strong></p><p>SVN 是集中版本控制工具，存储在服务器，仅支持在线提交，push/pull 较慢，不支持共享。</p><h2 id="git-组件" tabindex="-1">Git 组件 <a class="header-anchor" href="#git-组件" aria-label="Permalink to &quot;Git 组件&quot;">​</a></h2><p>Git 有 4 个区域：工作区（workspace）、index（暂存区）、repository（本地仓库）和 remote（远程仓库），而工作区就是指对文件发生更改的地方，<strong>更改</strong>通过 git add 存入暂存区，然后由 git commit 提交至本地仓库，最后 push 推送到远程仓库。</p><p><strong>工作目录</strong>包括 .git 子目录（包含仓库所有相关的 Git 修订历史记录）、工作树，或签出的项目文件的副本。</p><p><strong>裸存储库</strong>只包含版本控制信息而没有工作文件（工作树）而且 <strong>.git 子目录中的所有内容存在于主目录</strong>。</p><p><strong>完成提交（commit）前，称为 “staging area（暂存区）” 或 “index（索引）”</strong>。此区域可对其进行格式化和审查。git 会在提交之前触发 pre-commit hook，使用 pre-commit hook 相关的脚行对提交到存储库中的更改执行完整性检查等，不满足可以阻止提交操作。</p><h2 id="常见工作场景" tabindex="-1">常见工作场景 <a class="header-anchor" href="#常见工作场景" aria-label="Permalink to &quot;常见工作场景&quot;">​</a></h2><h3 id="初始化本地仓库" tabindex="-1">初始化本地仓库 <a class="header-anchor" href="#初始化本地仓库" aria-label="Permalink to &quot;初始化本地仓库&quot;">​</a></h3><p>在本地创建一个版本库，将远程仓库克隆到本地:</p><blockquote><ol><li><code>git init</code> // 初始化本地版本仓库(must do this)</li><li><code>git clone [-b branchName][远程仓库地址]</code> //克隆远程仓库到本地</li><li><code>cd [projectName]</code> // 进入项目目录</li><li><code>code.</code> // VSCode 打开当前项目</li><li><code>git remote [-v]</code> // 查看远程仓库信息，-v 获取详细信息，远程仓库名一般为 origin,每个分支即 origin 的子目录，例如 master 分支 -&gt; origin/master</li></ol></blockquote><h3 id="创建本地分支并推送关联远程" tabindex="-1">创建本地分支并推送关联远程 <a class="header-anchor" href="#创建本地分支并推送关联远程" aria-label="Permalink to &quot;创建本地分支并推送关联远程&quot;">​</a></h3><blockquote><ol><li><code>git branch [branchName]</code> // 创建 branchName 分支</li><li><code>git checkout-b [branchName]</code> 或 <code>git switch -c [branchName]</code> // 创建并切换到 brachName 分支 <ol><li><code>git push origin [branchName]:[branchName]</code> // 将新建分支推送到远程(远程分支还不存在)</li><li><code>git branch -set-upstream-to=origin/[branchName]</code> // 关联远程分支(远程分支已经存在)</li></ol></li></ol></blockquote><h3 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h3><blockquote><ul><li><code>git branch</code> // 查看本地分支 list</li><li><code>git branch -vv</code> // 查看本地分支 list,以及关联的远程分支</li><li><code>git log</code> //查看历史提交信息，输入 q 退出</li><li><code>git status</code> // 查看上次提交后的修改信息</li></ul></blockquote><h3 id="合并分支" tabindex="-1">合并分支 <a class="header-anchor" href="#合并分支" aria-label="Permalink to &quot;合并分支&quot;">​</a></h3><blockquote><ol><li><code>git merge [branchName]</code> // 合并整个 branchName 分支到当前分支</li><li><code>把 Git 合并失败的文件手动编辑为我们希望的内容再提交</code> // 解决冲突</li><li><code>git cherry-pick [commitId]</code> // 仅合并某分支的某一提交到当前分支(commitId,通过命令 git log 查看)，对于 cherry-pick 时会出现 commitId is a merge but no -m option was given，此时需要使用 git cherry-pick [commitId] -m 1 指定主线父编号为 1</li><li><code>合并后检查依赖是否更新，若更新，需 npm install</code></li></ol></blockquote><h3 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h3><blockquote><ul><li><code>git branch -d [branchName]</code> // 删除本地分支前先切换到另一个分支，然后成功删除的前提是所有更改都已 push,否则采用 -D 强制删除</li><li><code>git push origin --delete remoteBranchName</code> // 删除远程分支</li></ul></blockquote><h3 id="标签管理" tabindex="-1">标签管理 <a class="header-anchor" href="#标签管理" aria-label="Permalink to &quot;标签管理&quot;">​</a></h3><p>标签是版本（标签之于 commitId，类似域名之于 IP）</p><blockquote><p><code>git tag-a -m [“说明文字”]</code> // 默认标签打在最新的commit上即 HEAD 上，<code>git tag</code> 可以查看所有标签，-a -m 指定特定标签名的说明文字<br><code>git show [tagName]</code> // 查看指定标签的信息<br><code>git push origin [tagName]</code> // 推送一个本地标签(即推送对应 commit)<br><code>git push origin --tags</code> // 推送全部未推送过的本地标签到远程<br><code>git tag -d [tagName]</code> // 删除一个本地标签(如果标签已经推送到远程，和删除分支类似，要删除远程标签得先从本地删除，再删除远程)<br><code>git push origin :refs/tags/[tagName]</code> // 删除一个远程标签</p></blockquote><h3 id="push-变更代码的流程" tabindex="-1">push 变更代码的流程 <a class="header-anchor" href="#push-变更代码的流程" aria-label="Permalink to &quot;push 变更代码的流程&quot;">​</a></h3><blockquote><ol><li><code>git add [枚举变更的文件或 . 添加所有变更]</code> // 工作区的变更 add 到暂存区，<code>git add</code> 之前应查看文件变更，确认无误方 commit。</li><li><code>git commit -m [&#39;Commit message 提交说明&#39;]</code> // 提交暂存区到当前本地分支，保证 commit 独立性的前提下，即不同功能之间，不同版本之间的独立性，应及时 commit。<code>&#39;Commit message 提交说明&#39;</code> 推荐是：</li></ol></blockquote><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"># 提交说明类型 type 可以是：</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  # feat(新功能(feature)), </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  # fix(修补 bug), </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  # chore(构建过程或辅助工具的变动), </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  # style(格式(不影响代码运行的变动)), </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  # refactor(重构(即不是新增功能，也不是修改bug的代码变动))等</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">&#39;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; </span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  // 空一行 </span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  &lt;body&gt; </span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  // 空一行 </span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  &lt;footer&gt;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><ol start="3"><li><code>git pull</code> // 拉取远程进行差异对比，可能存在冲突，需解决冲突</li><li><code>git push</code> // push 到远程关联分支</li></ol></blockquote><h3 id="开发新-feature-功能" tabindex="-1">开发新 feature 功能 <a class="header-anchor" href="#开发新-feature-功能" aria-label="Permalink to &quot;开发新 feature 功能&quot;">​</a></h3><p>新建一个 feature 分支，并关联远程分支，然后合并到开发分支（如果存在），确定没问题再 MR 合并到 master 分支；</p><h3 id="bug-修复" tabindex="-1">bug 修复 <a class="header-anchor" href="#bug-修复" aria-label="Permalink to &quot;bug 修复&quot;">​</a></h3><p>新建一个 bugfix 分支，并关联远程分支，然后合并到开发分支（如果存在），确定没问题再 MR 合并到 master 分支；</p><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><h3 id="git-stash" tabindex="-1">git stash <a class="header-anchor" href="#git-stash" aria-label="Permalink to &quot;git stash&quot;">​</a></h3><p>将工作目录（修改后的跟踪文件和暂存的更改）保存在一堆未完成的更改中并且可以随时重新应用这些更改。</p><h3 id="git-config" tabindex="-1">git config <a class="header-anchor" href="#git-config" aria-label="Permalink to &quot;git config&quot;">​</a></h3><p><code>git config core.ignorecase [boolean]</code>：是否忽略大小写，默认情况下是 false，除了 git clone 和 git init 会在创建仓库时探测并适当地设置 core.ignoreCase 为 true。如果为 true，这个选项可以启用各种变通方法，使 Git 在不区分大小写的文件系统（如 FAT）上更好地工作。</p><h3 id="git-pull-和-git-fetch" tabindex="-1">git pull 和 git fetch <a class="header-anchor" href="#git-pull-和-git-fetch" aria-label="Permalink to &quot;git pull 和 git fetch&quot;">​</a></h3><p>git pull：从<strong>中央存储库</strong>中提取<strong>特定分支的新更改或提交</strong>，并<strong>更新本地存储库</strong>中的<strong>目标分支</strong>。</p><p>git fetch：相同的目的，但工作方式略不同。 git fetch <strong>从所需的分支中提取所有新提交存储在本地存储库中的新分支</strong>中。若要在目标分支中反映这些更改，必须在 git fetch 之后执行 git merge。<strong>只有在对目标分支和获取的分支进行合并后才会更新目标分支。</strong></p><p><strong>git pull = git fetch + git merge</strong></p><p><strong>git pull -r 或 git pull --rebase = git fetch + git rebase</strong></p><h3 id="git-merge-和-git-rebase" tabindex="-1">git merge 和 git rebase <a class="header-anchor" href="#git-merge-和-git-rebase" aria-label="Permalink to &quot;git merge 和 git rebase&quot;">​</a></h3><p>两者都是用于分支合并，关键在 commit 记录的处理上不同：</p><ol><li>git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。往主分支上合代码推荐 merge，能清除的知道主线上谁合了的代码以及合代码的时间先后顺序。</li><li><strong><code>git rebase &lt;baseBranch&gt; [&lt;currentBranch&gt;]</code></strong> 会从两个分支的共同祖先开始提取待变基分支上<code>&lt;currentBranch&gt;</code> 的修改，然后将待变基分支 <code>&lt;currentBranch&gt;</code> 指向基分支 <code>&lt;baseBranch&gt;</code> 的最新提交即新基底，最后将刚才提取的修改逐个和新基底处理冲突（<code>git add .</code> =&gt; <code>git rebase --continue</code>）并应用到新基底后面（哈希值也不一样）。rebase 后 commit 记录就变为线性。如果基分支 <code>&lt;baseBranch&gt;</code> 上没有新提交，那么就还是用原来的基，rebase 操作相当于无效，此时和 git merge 就基本没区别，差异只在于 git merge 会多一条记录 Merge 操作的提交记录。而且 git rebase 后 git push 需要添加 --force 进行强制推送。rebase 变基操作最适合的是本地开发分支合并到远端对应多人开发分支之前对本地开发分支进行变基，缺点是分支图杂乱，优点是可以实际的看出来合并的提交历史。</li><li><strong><code>git rebase -i [startPoint] [endPoint]</code> 合并当前分支的多个commit记录</strong>，前开后闭即<code>([startPoint]，[endPoint]]</code>，且应该谨慎使用 <code>[endPoint]</code>，省略表示从<code>[startPoint]</code>的下一个一直到最后一个，但如果指定 <code>[starPoint]</code>, 则表示 <code>[endPoint]</code> 后面的 commit 全部不要了。进入 Interact 交互界面后，将 <code>[startPoint]</code> 的下一个之后需要合并的连续的 commit 之前的 pick 改成 s，然后进入 commit 信息修改界面，将需要被合并的 commit 信息使用#注释即可。<strong>注意事项：只对尚未推送或未分享给别人的本地修改执行rebase变基操作，清理历史，从不对已推送至别处的提交执行变基操作。</strong></li></ol><p><img src="`+s+'" alt=""></p><h3 id="git-cherry-pick" tabindex="-1">git cherry-pick <a class="header-anchor" href="#git-cherry-pick" aria-label="Permalink to &quot;git cherry-pick&quot;">​</a></h3><p>指定的提交（commit）复制应用于当前分支，并且哈希值不一样：</p><ol><li><code>git cherry-pick &lt;commitHashA&gt; [&lt;commitHashB&gt;]</code> 转移一个或多个指定的提交到当前分支。</li><li><code>git cherry-pick A..B</code> 转移从 A 到 B 的所有提交。提交 A 必须早于提交 B，否则命令将失败，但不会报错。</li><li><code>git cherry-pick &lt;branchName&gt;</code> 将branchName分支的最近一次提交，转移到当前分支。 如果操作过程中发生代码冲突，解决冲突后，先git add .，然后 <code>git cherry-pick --continue</code> 让 Cherry pick 过程继续执行。</li></ol><h2 id="撤销已-push-至远端的-commit" tabindex="-1">撤销已 push 至远端的 commit <a class="header-anchor" href="#撤销已-push-至远端的-commit" aria-label="Permalink to &quot;撤销已 push 至远端的 commit&quot;">​</a></h2><p><strong>方式一</strong>，删除或修复新提交中的错误文件，并将其推送到远程存储库：</p><blockquote><p>git add<br> git commit -m &#39;message&#39;<br> git push origin main // 使用 --force可以强制退回低版本，否则会报错</p></blockquote><p><strong>方式二</strong>，可以使用 <code>git revert &lt;name of bad commit&gt;</code> 创建一个新的提交，撤销在错误提交中所做的所有更改。</p>',55),n=[c];function l(g,d,h,p,m,u){return t(),i("div",null,n)}const f=e(r,[["render",l]]);export{k as __pageData,f as default};
