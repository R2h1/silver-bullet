import{_ as s,o as a,c as n,R as i}from"./chunks/framework.buEibnTs.js";const l="/silver-bullet/assets/1.6RMk4u2k.png",p="/silver-bullet/assets/2.usIBgFrg.png",t="/silver-bullet/assets/3.1S6pIcND.png",y=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/basics/javascript/index.md","filePath":"front-end/basics/javascript/index.md","lastUpdated":1703172168000}'),e={name:"front-end/basics/javascript/index.md"},r=i('<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="关于javascript" tabindex="-1">关于JavaScript <a class="header-anchor" href="#关于javascript" aria-label="Permalink to &quot;关于JavaScript&quot;">​</a></h2><p>JavaScript（JS）是单线程的、基于原型的、弱类型的、动态类型的、轻量的、支持面向对象/命令式/声明式编程的、头等函数的、多范式的、解释性（直译式或即时编译）的、也可在非浏览器环境下使用的动态脚本语言。JavaScript区分大小写。JavaScript 中，通过在运行时给空对象附加方法和属性来创建对象并且可以作为创建相似对象的原型。</p><p>浏览器JavaScript由三部分组成：核心ECMAScript 描述了该语言的语法和基本对象；DOM 描述了处理网页内容的方法和接口；BOM 描述了与浏览器进行交互的方法和接口。</p><p>JavaScript 的动态特性包括运行时构造对象、可变参数列表、函数变量、动态脚本执行（通过 eval）、对象内枚举（通过 for ... in）和源码恢复（JavaScript 程序可以将函数反编译回源代码）。</p><p>JavaScript® 是 Oracle 在美国和其他国家的商标或注册商标。</p><h2 id="编译原理与编译过程" tabindex="-1">编译原理与编译过程 <a class="header-anchor" href="#编译原理与编译过程" aria-label="Permalink to &quot;编译原理与编译过程&quot;">​</a></h2><p>在代码执行之前会经历<strong>词法分析</strong>、<strong>语法分析</strong>和<strong>代码生成</strong>的编译阶段。</p><ol><li><strong>词法分析</strong>（<strong>Lexing</strong>）会将由字符组成的字符串分解成有意义的代码块即词法单元（Token）。</li><li><strong>语法分析</strong>（<strong>Parsing</strong>）是将词法单元流转换成一个<strong>由元素逐级嵌套所组成</strong>的代表了程序语法结构的树即抽象语法树（AST，Abstract Syntax Tree）。</li><li><strong>代码生成</strong>是将 AST 转换为可执行代码。</li></ol><p>V8 的执行过程：</p><p><img src="'+l+`" alt=""></p><p>源代码经过 Parser 解析器，经过词法分析和语法分析生成 AST；AST经过 Ignition 解释器生成字节码并执行；在执行过程中，如果发现热点代码，将热点代码交给 TurboFan 编译器生成机器码并执行；如果热点代码不再满足要求，进行去优化处理即还原成字节码并把执行权交还给 Ignition 解释器。</p><h2 id="执行上下文和作用域" tabindex="-1">执行上下文和作用域 <a class="header-anchor" href="#执行上下文和作用域" aria-label="Permalink to &quot;执行上下文和作用域&quot;">​</a></h2><p>JavaScript代码是运行在执行上下文中的，创建新执行上下文的方式有：</p><ol><li>全局执行上下文：为函数之外的任何代码创建的上下文。</li><li>函数执行上下文：每个函数执行时创建的上下文。创建个数没有限制。</li><li>eval执行上下文：eval函数执行创建的上下文，不建议使用可忽略。</li></ol><p>每一个上下文在本质上都是一种作用域层级，每个上下文创建的时候会被推入<strong>执行上下文栈（Execution Context Stack，或者叫函数调用栈（Call Stack））</strong>，栈顶是当前执行的上下文，执行完代码退出的时候从上下文栈中移除，栈底是全局执行上下文。（注意：JavaScript 中，以回调方式调用的函数，是否会形成类似于递归那样“一层套一层” 的调用链而存在堆栈溢出的风险，取决于父函数执行完毕之前是否再次调用 “父” 函数，比如 setTimeout、nextTick、promise.then/catch/finally、MutationObserver等是在任务队列中执行，再次调用“父”函数时，父函数已经执行完毕，即不存在堆栈溢出的危险）。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> fun2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;fun2&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> fun1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  fun2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">fun1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> 模拟：</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> // fun1()</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> ECStack.push(&lt;fun1&gt; functionContext);</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> // fun1 中调用了 fun2, 所以还要创建 fun2 的执行上下文</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> ECStack.push(&lt;fun2&gt; functionContext);</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> // fun2 执行（创建作用域链 =&gt; 变量对象 =&gt; 执行代码）完毕</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> ECStack.pop();</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> // fun1 执行（创建作用域链 =&gt; 变量对象 =&gt; 执行代码）完毕</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> ECStack.pop();</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>变量对象</strong>（<strong>Variable object，VO</strong>）是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。<strong>作用域即执行上下文，由多个作用域的变量对象构成的链表就叫做作用域链</strong>。函数创建时，每个函数的**<code>[[Scopes]]</code>属性**在会保存所有父级作用域内的变量对象。</p><p>全局对象的通用变量名是通用名称 globalThis，特定环境名称分别是：</p><ol><li>浏览器——window；</li><li>Worker——WorkGlobalScope；</li><li>nodejs——global；</li></ol><p>全局变量提供可在任何地方使用的变量和函数。默认情况下，这些全局变量内建于语言或环境中。</p><p><strong>执行上下文中的代码会分成两个阶段进行处理</strong>：</p><ol><li><p><strong>进入执行上下文</strong>：</p><ol><li>如果是函数执行上下文，会<strong>复制</strong>函数<code>[[scope]]</code>属性到函数执行上下文的 Scopes 属性来初始化作用域链。</li><li>然后创建变量对象：全局执行上下文的变量对象初始化是全局对象。函数执行上下文的变量对象初始化是只包含 Arguments 对象的对象。如果是函数执行上下文则首先给当前执行上下文的变量对象添加形参及初始值，否则先添加函数声明（函数表达式属于后面的变量声明）及初始值，再添加变量声明（带声明var/let/const关键字的）及初始值，完成后被激活为<strong>活动对象（Activation Object，AO）</strong>；因此，变量提升（Hosting）是JavaScript执行上下文工作方式，意味着变量和函数的声明在编译阶段即执行阶段之前被放入内存中，就好像声明处在作用域最前面。由执行上下文的两个处理阶段可知，函数声明提升（非函数表达式）优先于变量声明提升（var、let、const）；</li></ol><p><img src="`+p+`" alt=""></p><ol start="3"><li><strong>如果是函数执行上下文，会将活动对象压入</strong>函数执行上下文的Scopes属性即<strong>作用域链顶端</strong>。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> foo</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">  function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> bar</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// foo 函数创建时</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">foo</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.[[</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">Scopes</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] = [</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  globalContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">VO</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">bar</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.[[</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">Scopes</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]] = [</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  fooContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">AO</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">,</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  globalContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">VO</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// bar 函数执行上下文</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">barContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  AO:</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    arguments:</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> []</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  },</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  Scope:</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> [</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">AO</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">fooContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">AO</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">globalContext</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">VO</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">],</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  this:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> undefined</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p><strong>代码执行</strong>：</p><ol><li>访问并修改活动对象的属性值。对于let 或 const 声明的变量，从一个代码块的开始直到代码执行到声明变量的行之前，变量都处于“暂时性死区”（Temporal dead zone，TDZ），尝试访问即使是typeof也将抛出 ReferenceError；只有当代码执行到声明变量所在的行时，才会对其进行初始化（若未赋值，则初始化为 undefined）。</li><li>执行完后将函数执行上下文从执行上下文栈中弹出。</li></ol></li></ol><p><strong>作用域即执行上下文，由多个作用域的变量对象构成的链表就叫做作用域链</strong>。函数在执行前会复制该函数 <code>[[Scopes]]</code> 属性到函数执行上下文中创建作用域链。当访问一个变量时，解释器会首先在当前作用域的变量对象中查找标识符，如果没有找到，就去父作用域找，直到找到标识符，如果全局作用域也找不到就报错。<strong>因此，一个变量或函数在整个作用域链都没有声明，那么在代码执行阶段就会报 ReferenceError 错</strong>。</p><p>作用域共有两种主要的工作模式：词法作用域（静态作用域）和动态作用域。<strong>JavaScript 采用词法作用域（Lexical Scope）</strong>。词法作用域根据源代码中声明变量的位置来确定该变量在何处可用，而动态作用域 并不关心函数和作用域是如何声明以及在何处声明，它只关心它们从何处调用。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> a</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> foo</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">a</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> bar</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">  const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> a</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">  foo</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">bar</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// JS 是词法作用域，所以输出 2</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 假如是动态作用域则输出 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>JavaScript的词法作用域</strong>分为：</p><ol><li><strong>全局作用域</strong>：脚本模式运行所有代码的默认作用域。</li><li><strong>模块作用域</strong>： 模块模式中运行代码的作用域。 Node 中顶级作用域不是全局作用域，而是当前模块作用域。</li><li><strong>函数作用域</strong>：由函数创建的作用域。函数作用域指属于这个函数的全部变量都可以在整个函数的范围内访问。 使用 let（ES6）、const（ES6）声明的变量和Function 构造函数声明的函数属于额外的<strong>块级作用域</strong>（被限制在定义它的代码块内——块由一对大括号界定）。</li></ol><p><img src="`+t+'" alt=""></p>',29),h=[r];function k(c,o,g,d,D,b){return a(),n("div",null,h)}const C=s(e,[["render",k]]);export{y as __pageData,C as default};
