import{_ as s,o as i,c as a,R as n}from"./chunks/framework.buEibnTs.js";const l="/silver-bullet/assets/1.lmUPg3pJ.png",y=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/basics/html/index.md","filePath":"front-end/basics/html/index.md","lastUpdated":1705420949000}'),t={name:"front-end/basics/html/index.md"},p=n(`<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><p>HTML（超文本标记语言，<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）不是编程语言，而是定义了网页内容的含义和结构的标记语言。“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。HTML 使用“标记”（markup）来注明文本、图片和其他内容，以便于在 Web 浏览器中显示。HTML由一系列元素组成，标签用于创建元素，标签里的元素名不区分大小写，但推荐将标签名全部小写。不包含任何内容的元素称为空元素，空元素不能存在结束标签，比如 <code>&lt;img /&gt;</code>。</p><h2 id="doctype" tabindex="-1">Doctype <a class="header-anchor" href="#doctype" aria-label="Permalink to &quot;Doctype&quot;">​</a></h2><p><code>&lt;!Doctype&gt;</code> 声明即文档类型定义（DTD），告知浏览器采用的文档解析标准，分为<strong>严格模式（标准模式——W3C标准）<strong>和</strong>混杂模式（兼容模式—向老版本兼容）</strong>，声明位置—HTML文档首行（<code>&lt;html&gt;</code> 标签之前），在HTML4 规定了三种不同的 <code>&lt;!DOCTYPE&gt;</code> 声明，分别是：Strict（严格模式）、Transitional和 Frameset，后两种声明下，若 DTD 不存在/格式不正确或没有最后的 URI 以混杂模式呈现，否则以严格模式呈现：</p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></p><p>HTML5 与 HTML4 不同，不基于 SGML（Standard Generalized Markup Language 标准通用标记语言），也就不需要 DTD，因此 HTML5 仅标准模式 <code>&lt;!DOCTYPE html&gt;</code> 一种规范，没有严格和混杂之分。</p><p>通过 <strong><code>document.compatMode</code></strong> 可以输出当前文档的渲染模式是<strong>怪异/混杂/兼容模式（<code>BackCompat</code>）<strong>还是</strong>标准模式（<code>CSS1Compat</code>）</strong>。</p><h2 id="html页面生命周期" tabindex="-1">HTML页面生命周期 <a class="header-anchor" href="#html页面生命周期" aria-label="Permalink to &quot;HTML页面生命周期&quot;">​</a></h2><p>HTML有四个重要的生命周期事件：</p><ol><li>DOMContentLoaded：DOM 完全加载以及解析时触发，而无需等 <strong><code>&lt;img&gt;</code> /样式表/子框架</strong>里外部资源加载完成。此时可以查找DOM 节点，并初始化接口。<strong>在用户允许的前提下，Firefox，Chrome 和 Opera 都会在 DOMContentLoaded 触发时自动填充表单</strong>。 <ol><li>DOMContentLoaded 和脚本的关系：</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  1. 脚本文件的加载和执行会阻塞 DOM 的加载和解析，原因是脚本可能想要修改 DOM，甚至对其执行 document.write 操作；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  2. 多个同步脚本，会依次加载和执行</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOMContentLoader&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOM 完全加载和解析&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&#39;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;行内脚本先执行，lodash 再加载和执行&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol start="2"><li>DOMContentLoaded 和样式关系：</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  外部样式表的加载不会影响 DOM 的加载和解析，但是会阻塞后面脚本的执行</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">link</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;text/css&#39;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> rel</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;stylesheet&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> href</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;style.css&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  在样式表加载完成之前，脚步不会执行，原因是脚本可能想要获取元素的坐标和其他与样式相关的属性。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOMContentLoader&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOM 完全加载和解析&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">getComputeStyle</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">body</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">).</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">marginTop</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  如果 link 置于 script 之后就会马上绑定事件和获取样式属性</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li>load：整个页面及所有依赖资源如样式表和图片都已完成加载时触发，此时才可以正确获取图片大小。可以通过onload或事件字符串load监听事件。该事件不可取消，同时所有以load 命名的事件都不会传递到 Window 上即load事件不会冒泡。</li><li>beforeunload：当用户离开页面的导航（navigation）或试图关闭窗口或刷新时触发（弹出一个确认对话框），询问用户是否真的要离开该页面。如果用户确认，浏览器将导航到新页面，否则导航将会取消，也就不会出发pagehide和unload事件。此事件中可以检查用户是否保存了更改，并询问是否真的要离开，beforeunload目前已经不支持自定义显示给用户的消息。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 只能通过两种方式（分配和返回就行，无论是否为字符串）：</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> *   1. 将字符串分配给 event 的 returnValue 属性；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> *   2. 从 onbeforeunload 事件处理程序返回一个字符串；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 而且 event.preventDefault() 在 beforeunload 处理程序中不起作用。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> */</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onbeforeunload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">preventDefault</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 这个没啥用，相当于没有这行代码</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // return &#39;有未保存的值，确认要离开吗？&#39;; // 空字符串也可以</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">; </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// true 也可以；</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;beforeunload&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // 起作用，与在 window.onbeforeunload 中 return 值的效果是一样的</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // event.returnValue = &#39;未保存的值，确认要离开吗？&#39;; // 空字符串也可以</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">returnValue</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">; </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// true 也可以；</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="4"><li>unload：当页面或一个子框架正在被卸载时，触发 unload事件，<strong>此时页面处于以下状态：所有资源仍存在 (图片，iframe等)，对于终端用户所有资源均不可见，界面交互无效 (window.open, alert, confirm 等)，错误不会停止卸载页面的过程</strong>。该事件不可取消，不可冒泡，且在 beforeunload和pagehide事件之后执行，且父框架在子框架卸载前卸载。在该事件中建议可以使用navigator.sendBeacon(url, data)将和用户相关的分析统计数据发送到服务器保存：</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// sendBeacon 会在后台执行，转换到另一个页面不会有延迟</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> analyticsData</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = { </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/* 带有收集的数据的对象  */</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> };</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;unload&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // POST，大小限制 64kb， 字符串/表单/其他格式的数据，但是无法获取服务器响应</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  navigator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">sendBeacon</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;/analytics&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">JSON</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">stringify</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">analyticsData</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Document.readyState，描述了document 的加载状态，<strong>状态改变</strong>时触发 readystatechange 事件。存在三种状态：</p><ol><li><strong>loading（加载中）</strong>--正在加载中；</li><li><strong>interactive（可交互）</strong>-- document加载状态结束，但图像，样式表和框架之类的子资源仍在加载，DOMContentLoaded事件即将触发；</li><li><strong>complete（已完成）</strong>--document 和所有子资源已完成加载，window.onload事件（即 load 事件）即将触发。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;document.readyState -&gt;&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">readyState</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;readystatechange&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;document.readystatechange -&gt; document.readyState = &#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">readyState</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;window onload&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;iframe.html&#39;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">console</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;iframe onload&#39;</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">)&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &gt;&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">img</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;http://en.js.cx/clipart/train.gif&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> id</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;img&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  img</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;img onload&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  页面生命周期（相同数字的先后顺序不定）</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  1. document.readyState -&gt; loading</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  2. document.readystatechange -&gt; document.readyState = interactive</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  3. DOMContentLoaded</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  4. iframe onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  4. img onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  5. document.readystatechange -&gt; document.readyState = complete</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  6. window.onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>页面可见性 API（Page Visibility API），<strong>当其选项卡的内容变得可见或被隐藏时（包括当用户最小化窗口），会在文档（document）上触发 visibilitychange (能见度更改) 事件</strong>。该事件不包括document的更新的可见性状态，但是可以从 document 的 visibilityState属性中获取该信息。当 visibleStateState 属性的值转换为 hidden 时，Safari 不会按预期触发 visibilitychange；因此，还需要在window上侦听 pagehide 事件。出于兼容性原因，请确保使用 document.addEventListener 而不是 window.addEventListener 来注册回调，Safari &lt;14.0 仅支持前者。<code>&lt;iframe&gt;</code>的可见性状态与父文档相同。使用 CSS 属性（例如display: none;）隐藏 <code>&lt;iframe&gt;</code> 不会触发可见性事件或更改框架中包含的文档的状态。</p><p>在页面可见性 API 之外，浏览器会采取许多策略来减轻后台或隐藏选项卡对性能的影响：</p><ol><li>大多数浏览器停止向后台选项卡或隐藏的 <code>&lt;iframe&gt;</code> 发送 requestAnimationFrame() 回调，以提高性能和电池寿命。</li><li>setTimeout() 之类的计时器在后台/非活动选项卡中受到限制，以帮助提高性能。</li><li>浏览器实现基于预算的后台超时限制。这在现代浏览器中以类似的方式运行，细节如下： <ol><li>在 Firefox 中，后台选项卡中的每个window都有自己的时间预算（以毫秒为单位）——最大值和最小值分别为 +50 毫秒和 -150 毫秒。 Chrome 非常相似，只是预算以秒为单位指定。</li><li>windows在 30 秒后受到限制，使用与为window timers指定的相同的限制延迟规则。在 Chrome 中，此值为 10 秒。</li><li>仅当预算为非负数时才允许执行计时器任务。</li><li>一旦计时器的代码运行完毕，它执行的持续时间将从其窗口的超时预算中减去。</li><li>在 Firefox 和 Chrome 中，预算以每秒 10 毫秒的速度重新生成。</li></ol></li></ol><p>某些进程不受此限制行为的影响。在这些情况下，您可以使用页面可见性 API 来减少选项卡在隐藏时对性能的影响：</p><ol><li>正在播放音频的选项卡被视为前景并且不受限制。</li><li>运行使用实时网络连接（WebSockets 和 WebRTC）的代码的选项卡不受限制，以避免关闭这些连接超时和意外关闭。</li><li>IndexedDB 进程也不受限制，以避免超时。</li></ol><h2 id="html实体" tabindex="-1">HTML实体 <a class="header-anchor" href="#html实体" aria-label="Permalink to &quot;HTML实体&quot;">​</a></h2><p>HTML 实体是一段以连字号（&amp;）开头、以分号（;）结尾的文本（字符串）。实体常常用于显示HTML中的保留字符（比如&lt; &gt;）和不可见的字符（如“不换行空格”）。也可以用实体来代替其他难以用标准键盘键入的字符。HTML实体与字符之间如何对应使用工具：HTML 实体编码器/解码器（<a href="https://mothereff.in/html-entities%EF%BC%89%E3%80%82" target="_blank" rel="noreferrer">https://mothereff.in/html-entities）。</a></p><h2 id="样式导入方式-link-和-import" tabindex="-1">样式导入方式： link 和 @import <a class="header-anchor" href="#样式导入方式-link-和-import" aria-label="Permalink to &quot;样式导入方式： link 和 @import&quot;">​</a></h2><p>link：html标签，用于导入外部css文件，还可定义RSS和rel连接属性等；与页面并行加载；标签不存在兼容性问题；DOM元素支持JS操作</p><p>@import：可在style中或者css文件中用于导入外部css文件；在页面加载完毕后才被加载；IE5+才能识别；非DOM不支持js操作。@import引入的样式始终是放在css文件顶部（会被css文件中相同的选择器所覆盖）</p><h2 id="离线存储" tabindex="-1">离线存储 <a class="header-anchor" href="#离线存储" aria-label="Permalink to &quot;离线存储&quot;">​</a></h2><p><strong>允许用户离线时通过缓存的资源展示页面</strong>。</p><p>在文档的 <code>&lt;html&gt;</code> 标签中包含 manifest 属性manifest=&quot;.appcache&quot;或者在 manifest 文件中直接指定该页面或者离线时操作window.applicationCache进行实现</p><p>manifest 文件的建议的文件扩展名是：&quot;.appcache&quot;。并且在 web 服务器上进行配置正确的 MIME-type，即 &quot;text/cache-manifest&quot;</p><p>在线：存在manifest属性即请求manifest文件，若首次访问app，即下载manifest文件指定的资源进行离线存储。若再次访问过app且资源已离线存储，先使用加载离线资源加载页面，然后对比新manifest文件与旧manifest文件，发生更改（或用户清空浏览器缓存或由程序来更新应用缓存）才重新下载manifest文件指定的资源进行离线存储。</p><p>离线：浏览器就直接使用离线存储的资源。.appcache文件示例：</p><p><img src="`+l+`" alt=""></p><p>其中，CACHRE MANIFEST表示需缓存的资源（必须有）；ETWORK表示永远不会被缓存的资源（可选）；FALLBACK表示页面无法访问时的回退页面（可选/html5/ 目录中的所有文件回退为&quot;offline.html&quot;）。</p><h2 id="xml" tabindex="-1">XML <a class="header-anchor" href="#xml" aria-label="Permalink to &quot;XML&quot;">​</a></h2><p>XML（可扩展标记语言，Extensible Markup Language）是由 W3C 指定的一种通用标记语言。XML 是数据描述性语言，因此Web 服务可以利用 XML 去交换请求和响应。</p><p>XML 标签类似 HTML 标签，但由于 XML 允许用户定义自己的标签，所以 XML 更加灵活。XML被设计为传输和存储数据，HTML被设计用来显示数据。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- XML --&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">sites</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">谷歌</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">www.google.com</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">微博</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">www.weibo.com</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">sites</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- JSON</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">{</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  &quot;sites&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    { &quot;name&quot;: &quot;谷歌&quot;, &quot;url&quot;: &quot;www.google.com&quot; },</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    { &quot;name&quot;: &quot;微博&quot;, &quot;url&quot;: &quot;www.weibo.com&quot; },</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  ]</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">}</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>JSON 和 XML 都用于接收 web 服务端的数据。针对 AJAX 应用，JSON 比 XML 数据加载更快，而且更简单，XML 需要使用 XML 解析器解析XML文档，JSON 可以使用标准的 JavaScript 函数（JSON.parse()和JSON.stringify()）来解析。</p><h2 id="中英文换行问题" tabindex="-1">中英文换行问题 <a class="header-anchor" href="#中英文换行问题" aria-label="Permalink to &quot;中英文换行问题&quot;">​</a></h2><ol><li>浏览器默认是不认识中文字符，将一个字当成一个字符，加上下一个字超出当前行宽则该下一个字换行显式。</li><li>而对于英文，默认将一个连续的多个字母的英文串当作一个单词，即使超过当前行宽也不换行。</li></ol><h2 id="国际化、本地化、全球化" tabindex="-1">国际化、本地化、全球化 <a class="header-anchor" href="#国际化、本地化、全球化" aria-label="Permalink to &quot;国际化、本地化、全球化&quot;">​</a></h2><p><strong>国际化</strong>：internationalization，因首尾字母间有 18 个字母，简称为 i18n；指的是将软件与特定语言及地区脱钩的过程。当软件被移植到不同的语言及地区时，软件本身不用做内部工程上的改变或修正。</p><p><strong>本地化</strong>：localization，由于同样的原因被简称为 l10n；是指为特定区域翻译文件，并为了使软件能在该特定语言环境或地区使用，而应用特殊布局、加入本地特殊化部件等的过程。</p><p><strong>全球化</strong>：globalization，有时会用来表示以上两者的合称；也会简称为 g11n。</p>`,47),e=[p];function h(k,r,d,g,o,D){return i(),a("div",null,e)}const u=s(t,[["render",h]]);export{y as __pageData,u as default};
