import{_ as n,c as o,o as l,P as e,k as t,a as r}from"./chunks/framework.CtaooeSn.js";const i="/silver-bullet/assets/1.VPkjumBO.png",s="/silver-bullet/assets/2.KvG7-at8.png",m="/silver-bullet/assets/3.RfJN5hmu.png",Q="/silver-bullet/assets/4.d_WU2JHN.png",T="/silver-bullet/assets/5.C1ken-cN.png",d="/silver-bullet/assets/6.BcizG0DB.png",p="/silver-bullet/assets/7.CunztY6-.png",f="/silver-bullet/assets/8.Bs8-Drav.png",g="/silver-bullet/assets/9.5Dx-rDPl.png",c="/silver-bullet/assets/10.CLblrNg_.png",h="/silver-bullet/assets/11.B8RPpUEo.png",u="/silver-bullet/assets/12.C60EDNTY.png",x="/silver-bullet/assets/13.DWQNWa_H.png",v="/silver-bullet/assets/14.CeGA3KGz.png",y="/silver-bullet/assets/15.xya4JT9T.png",b="/silver-bullet/assets/16.DI_jKEt3.png",k="/silver-bullet/assets/17.-AxcCETU.png",M="/silver-bullet/assets/18.BXvQvxbi.png",w="/silver-bullet/assets/19.Bl1agrHt.png",D="/silver-bullet/assets/20.Bpk3Uyq0.png",H="/silver-bullet/assets/21.C8V8YX99.png",L="/silver-bullet/assets/22.C5m6nZ7r.png",V="/silver-bullet/assets/23.y4hCp0Ue.png",S="/silver-bullet/assets/24.CjAiNXEm.png",z="/silver-bullet/assets/25.BGDVk1Ty.png",s1=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/frame/vue/index.md","filePath":"front-end/frame/vue/index.md","lastUpdated":1756516689000}'),C={name:"front-end/frame/vue/index.md"},O={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},P={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"11.699ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 5171 950","aria-hidden":"true"},Z={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},A={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"86.885ex",height:"2.161ex",role:"img",focusable:"false",viewBox:"0 -750 38403 955","aria-hidden":"true"},q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"52.149ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 23050 950","aria-hidden":"true"},B={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},I={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"47.769ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 21114 950","aria-hidden":"true"},j={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},J={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"96.999ex",height:"2.161ex",role:"img",focusable:"false",viewBox:"0 -750 42873.7 955","aria-hidden":"true"},F={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},R={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.65ex"},xmlns:"http://www.w3.org/2000/svg",width:"20.494ex",height:"2.347ex",role:"img",focusable:"false",viewBox:"0 -750 9058.3 1037.2","aria-hidden":"true"},U={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},N={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"112.532ex",height:"2.161ex",role:"img",focusable:"false",viewBox:"0 -750 49739 955","aria-hidden":"true"},_={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},$={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"17.294ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 7644 950","aria-hidden":"true"},G={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},K={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"70.656ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 31230 950","aria-hidden":"true"},W={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},X={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.195ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 2296 950","aria-hidden":"true"},Y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},t1={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"29.525ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 13050 950","aria-hidden":"true"};function a1(e1,a,r1,o1,l1,n1){return l(),o("div",null,[a[47]||(a[47]=e('<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h2 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h2><p>Vue使用基于 HTML 的模板语法，能声明式地将其组件实例的<strong>数据绑定</strong>到DOM。所有Vue 模板可以被符合规范的浏览器和 HTML 解析器解析。Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。也支持使用JSX手写渲染函数，但不会享受到和模板同等级别的编译时优化。</p><p>Vue在所有的数据绑定中都支持完整的 JavaScript 表达式，表达式都会被作为 JavaScript，以当前组件实例为作用域解析执行。<strong>每个绑定仅支持单一表达式，即一段能够被求值的 JavaScript 代码，一个简单的判断方法是是否可以合法地写在 return 后面</strong>。因此，可以在绑定的表达式中使用组件暴露的方法，但绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p><p>模板中的表达式将被沙盒化，仅能够访问到暴露的有限的常用内置全局对象列表。然而可以自行在app.config.globalProperties上显式地添加它们，供所有的Vue表达式使用。</p><p><strong>模板数据绑定形式</strong>：</p><ol><li>最基本的数据绑定形式是文本插值，“Mustache”语法（即双大括号）。双大括号标签会被替换为对应组件实例的属性值，且被解析为纯文本，同时每次属性更改时它也会同步更新。</li><li>Vue指令（以v-开头的特殊attribute）attribute绑定，其中响应式绑定元素的Attribute使用v-bind指令（简写为“ ：”），该指令指示Vue将元素的attribute与组件的属性值保持一致： <ol><li>布尔型attribute依据true / false值来决定attribute是否应该存在于该元素上。当对应的组件的属性值是真值或一个空字符串时，元素会包含这个attribute，而当其为其他假值时attribute将被忽略。</li><li>如果绑定的值是null或者undefined，那么该attribute将会从渲染的元素上移除。</li><li>动态绑定多个值，通过不带参数（即冒号与等号之间）的v-bind将一个包含多个attribute的 JavaScript 对象绑定到单个元素上。</li></ol></li></ol><h2 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h2><p>指令attribute的期望值为一个 JavaScript 表达式（v-for、v-on 和 v-slot例外）。一个指令的任务是在其表达式的值变化时响应式地更新DOM。某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。指令参数上也可以使用一个JavaScript表达式包含在一对方括号内作为动态参数，它作为JavaScript表达式被动态执行，计算得到的值会被用作最终的参数：</p><ol><li>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</li><li>动态参数表达式存在语法限制，比如空格和引号在HTML attribute名称中都是不合法的，如果需要传入一个复杂的动态参数，推荐使用计算属性替换复杂的表达式。</li><li>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写。单文件组件内的模板不受此限制。 修饰符是指令参数中以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。.prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()。</li></ol><h3 id="v-html和v-text" tabindex="-1">v-html和v-text <a class="header-anchor" href="#v-html和v-text" aria-label="Permalink to &quot;v-html和v-text&quot;">​</a></h3><p>v-html 指令，更新元素的 innerHTML，期望的绑定值类型为string。 若想插入 HTML需要使用 v-html 指令，在当前组件实例上，将元素的 innerHTML 与 v-html对应的属性保持同步。不能使用 v-html 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 v-html，并且永远不要使用用户提供的 HTML 内容。</p><h3 id="v-if和v-show" tabindex="-1">v-if和v-show <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;v-if和v-show&quot;">​</a></h3><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回真值时才被渲染。v-else-if 提供的是相应于 v-if 的“else if 区块”。它可以连续多次重复使用。也可以使用 v-else 为 v-if 添加一个“else 区块”。一个 v-else 或v-else-if元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则它将不会被识别。可以在 <code>&lt;template&gt;</code> 元素上使用 v-if/v-else-if/v-else，该 <code>&lt;template&gt;</code> 元素作为多个元素的包装器，且不包含在最终渲染的结果中。<strong>v-if 是真正的条件渲染，是惰性的，直到条件第一次为真才会渲染条件块，条件为假则条件块内的事件监听器和子组件被销毁，存在更高的切换开销，所以适合运行时条件切换少的场景</strong>。</p><p>v-show用法基本类似，不同之处在于 v-show 会在 DOM 渲染中保留该元素；v-show 仅切换了该元素上名为 display 的 CSS 属性，且不能在 <code>&lt;template&gt;</code>上使用。<strong>v-show 实际是基于CSS的display属性进行切换，无论初始条件如何都会渲染，更高的初始渲染开销，所以适合条件切换频繁的场景。</strong></p><h3 id="v-if-和-v-for" tabindex="-1">v-if 和 v-for <a class="header-anchor" href="#v-if-和-v-for" aria-label="Permalink to &quot;v-if 和 v-for&quot;">​</a></h3><p>v-for 指令基于一个数组来渲染一个列表。v-for 指令的值需要使用 item in items 形式的特殊语法，其中 items 是源数据的数组，而 item 是迭代项的别名。v-for 也支持使用可选的第二个参数表示当前项的位置索引（v-for=&quot;(item, index) in items&quot;）。每个 v-for 作用域都可以访问到父级作用域。也可以使用 of 作为分隔符来替代 in。也可以使用 v-for 来遍历一个对象的所有属性，遍历的顺序会基于对该对象调用 Object.keys() 的返回值来决定，三个参数分别是属性值，属性名，位置索引。v-for 可以直接接受一个整数值num，会将该模板基于 1...num 的取值范围重复多次。也可以在 <code>&lt;template&gt;</code> 标签上使用 v-for 来渲染一个包含多个元素的块。</p><p>Vue 默认按照“就地更新”的策略来更新通过 v-for 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新每个元素，确保它们在原本指定的索引位置上渲染。默认模式是高效的，但只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况。为了使得可以跟踪每个节点，从而重用和重新排序现有的元素，需要为每个元素对应的块提供一个唯一的 key attribute。当使用 <code>&lt;template v-for&gt;</code> 时，key 应该被放置在 <code>&lt;template&gt;</code> 容器上。推荐在任何可行的时候为 v-for 提供一个 key attribute，除非所迭代的 DOM 内容非常简单 (例如：不包含组件或有状态的 DOM 元素)，或者有意采用默认行为来提高性能。key 绑定的值期望是一个基础类型的值，例如字符串或 number 类型。不要用对象作为 v-for 的 key。</p><p>可以直接在组件上使用 v-for，也需要提供key。但是，这不会自动将任何数据传递给组件，因为组件有自己独立的作用域。为了将迭代后的数据传递到组件中，还需要传递 props。不自动将 item 注入组件的原因是，这会使组件与 v-for 的工作方式紧密耦合。明确其数据的来源可以使组件在其他情况下重用。</p><p>Vue 能够侦听响应式数组的变更方法，并在它们被调用时触发相关的更新。这些变更方法包括：push、pop、shift、unshift、splice、sort、reverse。变更方法，就是会对调用它们的原数组进行变更。而对于非变更方法filter、concat 、slice，即不会更改原数组，而总是返回一个新数组，需要将旧的数组替换为新的。由于Vue 实现了一些巧妙的方法来最大化对 DOM 元素的重用，因此用另一个包含部分重叠对象的数组来做替换，仍会是一种非常高效的操作。</p><p>如果需要显示数组经过过滤或排序后的内容，而不实际变更或重置原始数据，则可以创建返回已过滤或已排序数组的计算属性。在计算属性不可行的情况下 (例如在多层嵌套的 v-for 循环中)，可以使用methods方法操作中间态。在计算属性中使用 reverse() 和 sort() 的时候务必小心！这两个方法将变更原始数组，计算函数中不应该这么做。请在调用这些方法之前创建一个原数组的副本。</p><p><strong>同时使用 v-if 和 v-for 是不推荐的，因为这样二者的优先级不明显</strong>。当它们同时存在于一个节点上时，v-if 比 v-for 的优先级更高，Vue3中则相反，v-for 的优先级比 v-if 高。这意味着在 Vue2 中 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名，解决办法是在外新包装一层 <code>&lt;template&gt;</code> 再在其上使用 v-for 可以解决这个问题 。</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">template</span><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;"> v-for</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&quot;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">todo</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> in</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> todos</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">li</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> v-if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;!todo.isComplete&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {{ todo.name }} </span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">li</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">template</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但如果只有少部分因为 v-if 而不渲染，容易浪费 v-if的计算，因此最佳实践是先使用计算属性 computed 把data处理好，再用 v-for 渲染已处理好的。</p><h2 id="样式设置" tabindex="-1">样式设置 <a class="header-anchor" href="#样式设置" aria-label="Permalink to &quot;样式设置&quot;">​</a></h2>',25)),t("p",null,[a[2]||(a[2]=r("在Vue中，class 和 style 表达式的类型可以是字符串、对象或数组。:class（或：style）指令和一般的 class（或style） attribute 共存。在组件上同样支持字符串、数组和数组形式，使用时，组件上传递的会被添加到组件的根元素上且与该元素上已有的合并。如果组件有多个根元素，而组件的",-1)),t("mjx-container",O,[(l(),o("svg",P,[...a[0]||(a[0]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(890,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1251,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(3171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(4171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g></g></g>',1)])])),a[1]||(a[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"t"),t("mi",null,"r"),t("mi",null,"s"),t("mi",{mathvariant:"normal"},"属"),t("mi",{mathvariant:"normal"},"性"),t("mi",{mathvariant:"normal"},"的")])],-1))]),a[3]||(a[3]=r("attrs.class（style）对应于组件上传递class（style），然后在组件内部指定某个根元素上:class进行接收即可。",-1))]),a[48]||(a[48]=e('<p>字符串形式可以给class（style）传递字符串字面量（同HTML的内联），或者通过:class（:style）传递结果为字符串的表达式。</p><h3 id="对象或数组形式绑定class" tabindex="-1">对象或数组形式绑定class <a class="header-anchor" href="#对象或数组形式绑定class" aria-label="Permalink to &quot;对象或数组形式绑定class&quot;">​</a></h3><p>对象形式通过给:class (v-bind:class 的缩写) 传递一个对象来动态切换 class，对象的属性名对应于class名，对象的属性值的真假值对应于该class名是否存在，对象既可以写成内联字面量的形式，也可以直接绑定一个对象的名字，或者一个返回对象的计算属性。</p><p>数组形式通过给:class绑定一个数组来渲染多个 CSS class，数组中的每个元素可以是对象形式或字符串形式。</p><h3 id="对象或数组形式绑定style" tabindex="-1">对象或数组形式绑定style <a class="header-anchor" href="#对象或数组形式绑定style" aria-label="Permalink to &quot;对象或数组形式绑定style&quot;">​</a></h3><p>对象形式通过给:style(v-bind:style 的缩写) 传递一个对象来绑定style，对象的属性键值对分别对应于CSS的属性键值对，其中属性名推荐使用camelCase形式，也可以使用 kebab-cased 形式（即CSS 中的实际名称），对象的属性值对应于CSS属性对的属性值，属性值可以是由多个值构成的数组，仅会渲染浏览器支持的数组中最后一个值。对象既可以写成内联字面量的形式，也可以直接绑定一个对象的名字，或者一个返回对象的计算属性。</p><p>数组形式通过给:style绑定一个包含多个样式对象的数组。这些对象会被合并后渲染到同一元素上。</p><p>当在:style中使用了需要浏览器特殊前缀的 CSS 属性时，Vue 会自动为他它们加上相应的前缀。<strong>Vue 是在运行时检查该属性是否支持在当前浏览器中使用</strong>。如果浏览器不支持某个属性，那么将尝试加上各个浏览器特殊前缀，以找到哪一个是被支持的。</p><h2 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h2><p>使用 v-on 指令 (简写为 @) 来监听 DOM 事件，并在事件触发时执行对应的 JavaScript。用法：v-on:eventName=&quot;handler&quot; 或 @eventName=&quot;handler&quot;。事件处理器handler的值可以是：</p><ol><li>内联事件处理器：事件被触发时执行的内联 JavaScript 语句 (与 onclick 类似)，包括对某个方法的调用。如果需要在内联事件处理器中访问事件参数，可以直接向调用某个方法时直接向该方法传入$event变量，或者使用内联箭头函数（第一个参数即事件参数），</li><li>方法事件处理器：一个指向组件上定义的方法的属性名或是路径。方法事件处理器会自动接收原生 DOM 事件并触发执行。</li></ol><p>模板编译器会通过检查v-on的值是否是合法的 JavaScript 标识符或属性访问路径来断定是何种形式的事件处理器。foo() 和 count++ 会被视为内联事件处理器；foo、foo.bar 和 foo[&#39;bar&#39;] 会被视为方法事件处理器。</p><p>为了使得事件处理器方法能更专注于数据逻辑而不用去处理 DOM 事件的细节，Vue 为v-on提供了用.表示的指令后缀的事件修饰符，包</p><ol><li>.stop 事件将停止捕获和冒泡的传递。</li><li>.prevent 阻止事件默认行为。</li><li>.self 仅当 event.target 是元素本身时才会触发事件处理器。</li><li>.capture添加事件监听器时，使用 <code>capture</code> 捕获模式，与原生 addEventListener 事件相对应。</li><li>.once 事件最多被触发一次。</li><li>.passive。事件的默认行为将立即发生而非等待事件处理器执行完成，以防其中包含 event.preventDefault()。一般用于触摸事件的监听器，可以用来改善移动端设备的滚屏性能。请勿同时使用 .passive 和 .prevent，因为 .passive 已经向浏览器表明了不想阻止事件的默认行为。如果这么做了，则 .prevent 会被忽略，并且浏览器会抛出警告。</li><li>事件修饰符可以使用链式书写，但需要注意调用顺序，因为相关代码是以相同的顺序生成的。比如，@click.prevent.self 会阻止元素及其子元素的所有点击事件的默认行为，然后再是元素本身时才会触发事件处理器。而 @click.self.prevent 则先是元素本身时才会触发事件处理器，再是只会阻止对元素本身的点击事件的默认行为。</li></ol><p>同样，Vue 允许在 v-on 或 @ 监听按键事件时添加按键修饰符，约束特定按键才触发键盘事件。可以直接使用 KeyboardEvent.key 暴露的按键名称作为修饰符，但需要转为 kebab-case 形式。按键修饰符也可以使用链式书写。Vue 为一些常用的按键提供了别名：</p><ol><li>.enter</li><li>.tab</li><li>.delete (捕获“Delete”和“Backspace”两个按键)</li><li>.esc</li><li>.space</li><li>.up</li><li>.down</li><li>.left</li><li>.right</li></ol><p><strong>系统按键修饰符如下</strong>： 1.ctrl 2..alt 3..shift 4..meta；在 Mac 键盘上，meta 是 Command 键 (⌘)。在 Windows 键盘上，meta 键是 Windows 键 (⊞)。在 Sun 微机系统键盘上，meta 是钻石键 (◆)。在某些键盘上，特别是 MIT 和 Lisp 机器的键盘及其后代版本的键盘，如 Knight 键盘，space-cadet 键盘，meta 都被标记为“META”。在 Symbolics 键盘上，meta 也被标识为“META”或“Meta”。</p><p>请注意，系统按键修饰符和常规按键不同。与 keyup 事件一起使用时，该按键必须在事件发出时处于按下状态，比如，keyup.ctrl 只会在仍然按住 ctrl 但松开了另一个键时被触发。若你单独松开 ctrl 键将不会触发。</p><p>.exact 修饰符允许控制触发一个事件所需的确定组合的系统按键修饰符。比如@click.exact仅当没有按下任何系统按键时触发；@click.ctrl.exact仅当按下 Ctrl 且未按任何其他键时才会触发。@click.ctrl当按下 Ctrl 时，即使同时还按下 Alt 或 Shift 也会触发。</p><p><strong>鼠标按键修饰符将处理程序限定为由特定鼠标按键触发的事件，如下</strong>：</p><ol><li>.left</li><li>.right</li><li>.middle</li></ol><p>表单输入绑定 为了避免在前端处理表单时手动将表单输入框的内容与JavaScript的值手动连接绑定和更改事件监听器的麻烦，Vue提供了v-model指令。</p><p>v-model可用于各种不同类型的输入，包括 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素。v-model 会忽略任何表单元素上初始的 value、checked 或 selected attribute。它将始终将当前绑定的 JavaScript 状态视为数据的正确来源。应该在 JavaScript 中使用data 选项来声明该初始值。它会根据所使用的元素自动使用对应的 DOM 属性和事件组合：</p><ol><li>文本类型的 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素会绑定 value property 并侦听 input 事件；注意在 <code>&lt;textarea&gt;</code> 中是不支持插值表达式的，而是应该使用 v-model 来替代。</li><li><code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code> 会绑定 checked property 并侦听 change 事件；</li><li><code>&lt;select&gt;</code> 会绑定 value property 并侦听 change 事件。如果 v-model 表达式的初始值不匹配任何一个选择项，<code>&lt;select&gt;</code> 元素会渲染成一个“未选择”的状态。在 iOS 上，这将导致用户无法选择第一项，因为 iOS 在这种情况下不会触发一个 change 事件。因此建议提供一个空值的禁用选项。<code>&lt;select&gt;</code> 的option支持使用 v-for 动态渲染。</li></ol><p>v-model也支持布尔值、数组或集合值，可将多个复选框绑定到同一数组或集合值，或将多选 <code>&lt;select&gt;</code> 的值绑定到一个数组。</p><p>对于单选按钮，复选框和选择器选项，v-model 绑定的值通常是静态的字符串 (或者对复选框是布尔值)，可以通过使用 v-bind 来实现将值绑定到当前组件实例上的动态数据以及将选项值绑定为非字符串的数据类型。</p><p>复选框中，true-value 和 false-value 是 Vue 特有的 attributes，仅支持和 v-model 配套使用。v-model的值会在复选框选中（未选中）时设置为true-value（false-value） attributes对应的值，同时true-value 和 false-value支持v-bind来绑定复杂的值。true-value 和 false-value attributes 不会影响 value attribute，因为浏览器在表单提交时，并不会包含未选择的复选框。为了保证这两个属性对应的值的其中之一被表单提交，请使用单选按钮作为替代。</p><p>单选按钮中，:value绑定的值将在选中的时候被赋值给v-model值。</p><p>对于需要使用IME的语言 (中文，日文和韩文等)，v-model不会在IME输入还在拼字阶段时触发更新。如果你的确想在拼字阶段也触发更新，请直接使用自己的 input 事件监听器和 value 绑定而不要使用 v-model。 修饰符：</p><ol><li><strong>.lazy；默认情况下，v-model 会在每次 input 事件后更新数据 (IME 拼字阶段的状态例外)。添加 lazy 修饰符将改为在每次 change 事件后更新数据</strong>。</li><li>.number；v-model 后添加 .number 修饰符让用户输入自动转换为数字。如果该值无法被 parseFloat() 处理，那么将返回原始值。该修饰符会在输入框有 type=&quot;number&quot; 时自动启用。</li><li>.trim；v-model 后添加 .trim 修饰符将默认自动去除用户输入内容中两端的空格。</li></ol><p>v-model 可以在组件上使用以实现双向绑定。默认情况下，v-model 在组件上都是使用 modelValue 作为 prop，并以 update:modelValue 作为对应的事件，组件上v-model可以通过指定一个参数来更prop名称和事件名称，而且通过这种指定参数的方式可以在单个组件实例上创建多个 v-model 双向绑定。组件的 v-model 上所添加的自定义修饰符，可以通过 modelModifiers prop 在组件内访问到，modelModifiers prop 的默认值是一个空对象，当修饰符被组件上的v-model使用时，修饰符作为modeModifiers 对象的一个属性且其值为 true。对于又有参数arg又有修饰符的 v-model 绑定，生成的 prop 名将是 arg + &quot;Modifiers&quot;。在组件上使用v-model需要在组件内通过其中一种方式实现：</p><ol><li>将内部原生 <code>&lt;input&gt;</code> 元素的 value attribute 绑定到 modelValue prop，当原生的 input 事件触发一个传递新值作为参数的 update:modelValue 自定义事件。</li></ol><p><img src="'+i+'" alt=""></p><ol start="2"><li>使用一个可写的，同时具有 getter 和 setter 的 computed 属性绑定到组件内的原生 <code>&lt;input&gt;</code> 元素的v-model上。get 方法需返回 modelValue prop，而 set 方法需触发相应的事件。</li></ol><p><img src="'+s+'" alt=""></p><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>每个Vue组件实例在创建时都需要经历设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM的一系列初始化步骤，并在每个阶段运行称为生命周期钩子的函数，breforeCreate和created，beforeMount和mounted，beforeUpdate和updated，beforeUnmount和unmounted，让开发者有机会在对应的特定阶段运行自己的代码。所有生命周期钩子函数的 this 上下文都会自动指向当前调用它的组件实例，但是，避免用箭头函数来定义生命周期钩子，因为如果这样的话你将无法在函数中通过 this 获取组件实例。</p><p><strong>Vue实例里的成员分成两大部分，模版可以直接使用vue实例中的成员</strong>：</p><ol><li>自带的成员：$开头（一些实用方法和属性，便于开发者使用）和下划线_开头（vue内部使用的成员，不建议开发者使用）。</li><li>从配置项（props、 data、methods、computed）中注入的成员。自带的成员要用$或者_开头是为了防止与注入的成员重名。</li></ol><p><strong>Vue3实例生命周期的图表</strong>：</p><p><img src="'+m+'" alt=""></p><p><strong>Vue2实例生命周期的图表</strong>：</p><p><img src="'+Q+'" alt=""></p><p><strong>父组件和子组件生命周期钩子执行顺序</strong>：父组件等待子组件完成后，才会执行自己对应完成的钩子（更新，挂载，销毁），同时，子组件的初始化（beforeCreate）在父组件beforeMount之后开始。</p><h2 id="模板引用-ref" tabindex="-1">模板引用（ref） <a class="header-anchor" href="#模板引用-ref" aria-label="Permalink to &quot;模板引用（ref）&quot;">​</a></h2>',45)),t("p",null,[a[6]||(a[6]=r("特殊的 ref attribute支持直接访问底层 DOM 元素，它允许在一个特定的 DOM 元素或子组件实例被挂载后，获得对它的直接引用，比如，需要在组件挂载时将焦点设置到一个 input 元素上，或在一个元素上初始化一个第三方库。组件挂载结束后引用都会作为属性被暴露在当前组件实例的 this.",-1)),t("mjx-container",Z,[(l(),o("svg",A,[...a[4]||(a[4]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(917,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1467,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(2936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">象</text></g><g data-mml-node="mi" transform="translate(3936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(4936,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">只</text></g><g data-mml-node="mi" transform="translate(6936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(7936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(8936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(9936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(10936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">件</text></g><g data-mml-node="mi" transform="translate(11936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">挂</text></g><g data-mml-node="mi" transform="translate(12936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">载</text></g><g data-mml-node="mi" transform="translate(13936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(14936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">才</text></g><g data-mml-node="mi" transform="translate(15936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">能</text></g><g data-mml-node="mi" transform="translate(16936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(17936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(18936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">模</text></g><g data-mml-node="mi" transform="translate(19936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">板</text></g><g data-mml-node="mi" transform="translate(20936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(21936,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(22936,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(23387,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(23853,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(24403,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(25403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(26403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">果</text></g><g data-mml-node="mi" transform="translate(27403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(28403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">模</text></g><g data-mml-node="mi" transform="translate(29403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">板</text></g><g data-mml-node="mi" transform="translate(30403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(31403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(32403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(33403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">达</text></g><g data-mml-node="mi" transform="translate(34403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(35403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(36403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(37403,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g></g></g>',1)])])),a[5]||(a[5]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"r"),t("mi",null,"e"),t("mi",null,"f"),t("mi",null,"s"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"象"),t("mi",{mathvariant:"normal"},"上"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"只"),t("mi",{mathvariant:"normal"},"可"),t("mi",{mathvariant:"normal"},"以"),t("mi",{mathvariant:"normal"},"在"),t("mi",{mathvariant:"normal"},"组"),t("mi",{mathvariant:"normal"},"件"),t("mi",{mathvariant:"normal"},"挂"),t("mi",{mathvariant:"normal"},"载"),t("mi",{mathvariant:"normal"},"后"),t("mi",{mathvariant:"normal"},"才"),t("mi",{mathvariant:"normal"},"能"),t("mi",{mathvariant:"normal"},"访"),t("mi",{mathvariant:"normal"},"问"),t("mi",{mathvariant:"normal"},"模"),t("mi",{mathvariant:"normal"},"板"),t("mi",{mathvariant:"normal"},"引"),t("mi",{mathvariant:"normal"},"用"),t("mi",null,"r"),t("mi",null,"e"),t("mi",null,"f"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"如"),t("mi",{mathvariant:"normal"},"果"),t("mi",{mathvariant:"normal"},"在"),t("mi",{mathvariant:"normal"},"模"),t("mi",{mathvariant:"normal"},"板"),t("mi",{mathvariant:"normal"},"中"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"表"),t("mi",{mathvariant:"normal"},"达"),t("mi",{mathvariant:"normal"},"式"),t("mi",{mathvariant:"normal"},"上"),t("mi",{mathvariant:"normal"},"访"),t("mi",{mathvariant:"normal"},"问")])],-1))]),a[7]||(a[7]=r("refs.input，在初次渲染时会是 null，因为在初次渲染前该元素还不存在。当在 v-for 中使用模板引用时（需要 v3.2.25 及以上版本），相应的ref对应的值是一个数组，并且ref 数组并不保证与源数组相同的顺序。",-1))]),a[49]||(a[49]=e('<p>ref的值类型可以是字符串值，或者使用:ref绑定为一个内联函数（（el）=&gt; {}）或methods，会在每次组件更新或卸载时都被调用，函数的第一个参数在更新时是元素引用，卸载时是null。</p><p>模板引用（ref或:ref）也可以在子组件上使用，引用中获得的值是组件实例。如果子组件使用的是选项式 API，被引用的组件实例和该子组件的 this 完全一致，这意味着父组件对子组件的每一个属性和方法都有完全的访问权，同时，利用expose 选项可以用于限制对子组件实例的访问。这使得在父组件和子组件之间创建紧密耦合的实现细节变得很容易，也因此只应该在绝对需要时才在子组件上使用模板引用。大多数情况下应该首先使用标准的 props 和 emit 接口来实现父子组件交互。</p><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>组件允许将 UI 划分为独立的、可重用的部分，Vue 实现了自己的组件模型，使得可以在每个组件内封装自定义内容与逻辑。</p><p>当使用构建步骤时，Vue 组件定义在一个单独的 .vue 文件，即单文件组件，简称SFC。</p><p>当不使用构建步骤时，一个 Vue 组件在js文件中以一个包含 Vue 特定选项的 JavaScript 对象来定义，其中template选项是一个内联的 JavaScript 字符串或者也可以使用 ID 选择器来指向一个元素 (通常是原生的 <code>&lt;template&gt;</code> 元素)，Vue 将会使用其内容作为模板来源并会在运行时编译它。</p><p>.js 文件里默认导出组件，但也可以在一个文件中通过具名导出的方式导出多个组件。</p><h3 id="组件注册" tabindex="-1">组件注册 <a class="header-anchor" href="#组件注册" aria-label="Permalink to &quot;组件注册&quot;">​</a></h3><p>组件将会以其注册时的名字作为模板 <code>&lt;template&gt;</code> 中的标签名，组件注册分为全局注册和局部注册。</p><p>全局注册，使用 Vue 应用实例const app = createApp({})的 app.component() 方法，第一个参数是组件名称，第二个参数是组件的实现，进行全局地注册组件，而不需要额外再导入。app.component() 方法可以被链式调用。每一个组件都维护着自己的状态，因为每个组件都是一个新的实例。全局注册存在的问题：</p><ol><li>没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)，即它仍然会出现在打包后的 JS 文件中。</li><li>全局注册在大型项目中使项目的依赖关系变得不那么明确，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</li></ol><p>局部注册需要在使用它的父组件中显式导入，并在components选项上注册来暴露给模板<code>&lt;template&gt;</code>，并且只能在该父组件中使用。 components 选项对象的 key 名就是注册的组件名，而值就是相应组件的实现。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。请注意：局部注册的组件在后代组件中并不可用。</p><p>使用 PascalCase 作为组件名的注册格式。首先PascalCase 是合法的 JavaScript 标识符，这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全。其次，<code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明是Vue 组件，而不是原生 HTML 元素或自定义元素 (web components) 。同时，Vue 支持将模板中使用 kebab-case 的标签解析为使用 PascalCase 注册的组件。这意味着以 MyComponent 为名注册的组件，在模板中可以通过 <code>&lt;MyComponent&gt;</code> 或 <code>&lt;my-component&gt;</code> 引用，这样使得注册的Vue组件更能配合不同来源的模板。在组件命名使用kebab-case时建议加上前缀（公司名或项目名缩写），以避免和HTML元素名称冲突。</p><ol><li>如果是在单文件组件中，推荐为子组件使用 PascalCase 的标签名，以此来和原生的 HTML 元素作区分。虽然原生 HTML 标签名是不区分大小写的，但 Vue 单文件组件是可以在编译中区分大小写的，同时，也可以使用 /&gt; 来关闭一个组件标签。</li><li>如果是直接在 DOM 中书写模板 (例如原生 <code>&lt;template&gt;</code> 元素的内容)，即单文件组件、内联模板字符串 (例如template选项)、<code>&lt;script type=&quot;text/x-template&quot;&gt;</code> 等字符串模板除外，Vue 则必须从 DOM 中获取模板字符串，模板的编译需要遵从浏览器中原生HTML 的解析行为，HTML 标签和属性名称是不分大小写的，所以浏览器会把任何大写的字符解释为小写，此外，HTML 只允许一小部分特殊的元素省略其关闭标签，最常见的就是 <code>&lt;input /&gt;</code> 和 <code>&lt;img /&gt;</code>，<strong>意味着当使用 DOM 内的模板时，无论是 PascalCase 形式的组件名称、camelCase 形式的 prop 名称还是 v-on 的事件名称，都需要写为相应等价的 kebab-case (短横线连字符) 形式并显式地关闭这些组件的标签</strong>。某些 HTML 元素对于放在其中的元素类型有限制，例如 <code>&lt;ul&gt;</code>，<code>&lt;ol&gt;</code>，<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，相应的，某些元素仅在放置于特定元素中时才会显示，例如 <code>&lt;li&gt;</code>，<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>。这将导致在使用带有此类限制元素的组件时自定义的组件将作为无效的内容被忽略，可以当使用在原生 HTML 元素上使用vue:is 将其对应值解析为一个 Vue 组件。</li></ol><h3 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h3><p>Props attributes需要在组件上使用props选项显式声明注册，而其他未声明的外部传入将作为透传attributes。可以使用字符串数组或对象来声明 props。对于以对象形式声明中的每个属性，key 是 prop 的名称（声明时应该使用camelCase 形式，传递时虽然可以写为camlCase形式但通常写为 kebab-case 形式便于与HTML attribute对齐），而值则是该 prop 预期类型的构造函数，其优点是一定程度上作为组件的文档，而且在使用组件时传递错误的类型时也会在浏览器控制台中抛出警告（在开发模式下）。</p><ol><li>所有 prop 默认都是可选的，除非声明了 required: true。</li><li>除 Boolean 外的未传递的可选 prop 将会有一个默认值 undefined。</li><li>Boolean 类型的未传递 prop 将被转换为 false。这可以通过为它设置 default 来更改。</li><li>default可以是一个函数，对象或者数组应当用default对应的工厂函数返回默认值。工厂函数会收到组件所接收的原始 props作为参数。而对于type是Function的prop，default对应的是作为默认值的函数。</li><li>validator函数用于自定义校验函数，该函数接收prop值，如果返回true，则校验成功，否则校验失败。</li><li>如果声明了 default 值，那么在 prop 的值被解析为 undefined 时，无论 prop 是未被传递还是显式指明的 undefined，都会改为 default 值。</li><li>prop 的校验是在组件实例被创建之前，所以实例的属性 (比如 data、computed 等) 将在 default 或 validator 函数中不可用。</li><li>声明为 Boolean 类型的prop有特殊的类型转换规则：和原生HTML相同的行为即传递时组件上显式写明prop不赋值也为true，不写明则为false；当一个 prop 被声明为允许多种类型时，无论声明类型的顺序如何，Boolean 类型的特殊转换规则都会被应用。</li><li>校验选项中的 type 可以是以下原生构造函数： <ol><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li><li>自定义的类或构造函数，Vue 将会通过 instanceof 来检查类型是否匹配。</li></ol></li></ol><p>在组件上传递动态 prop 值需要使用v-bind或缩写 :。使用没有参数的 v-bind，可以将一个对象的所有属性都当作 props 传入。当值被传递给 prop 时，它将成为该组件实例上的一个属性，在模板<code>&lt;template&gt;</code>和组件的 this 上下文中访问。默认情况下，组件的所有 prop 都接受任意类型的值。</p><p><strong>所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解</strong>。每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着不应该在子组件中去更改一个 prop，否则，Vue 会在控制台上抛出警告。 1.如果prop被用于传入初始值，且子组件想将其作为局部数据属性，正确做法是新定义一个局部数据属性，从 props 上获取初始值，在子组件内只操作新定义的局部数据属性。 2.如果需要对传入的 prop 值做进一步的转换。正确做法是基于该 prop 值定义一个计算属性。 3.如果需要更改对象 / 数组类型的 props，由于对象和数组是按“引用值”传递，子组件更改对象或数组内部的值，也不会抛出警告且存在性能损耗。正确做法是避免这样的更改，大多数场景下，应该抛出一个事件来通知父组件做出改变。</p><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3>',20)),t("p",null,[a[10]||(a[10]=r("组件实例提供了一个自定义事件系统。父组件可以像监听原生 DOM 事件一样使用 v-on 或 @ 来选择性地监听子组件通过调用内置 ",-1)),t("mjx-container",q,[(l(),o("svg",E,[...a[8]||(a[8]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1689,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(3050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(4050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(5050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(6050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">入</text></g><g data-mml-node="mi" transform="translate(7050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">自</text></g><g data-mml-node="mi" transform="translate(8050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(9050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">义</text></g><g data-mml-node="mi" transform="translate(10050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">事</text></g><g data-mml-node="mi" transform="translate(11050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">件</text></g><g data-mml-node="mi" transform="translate(12050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">名</text></g><g data-mml-node="mi" transform="translate(13050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">称</text></g><g data-mml-node="mi" transform="translate(14050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">抛</text></g><g data-mml-node="mi" transform="translate(15050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">出</text></g><g data-mml-node="mi" transform="translate(16050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(17050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">事</text></g><g data-mml-node="mi" transform="translate(18050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">件</text></g><g data-mml-node="mi" transform="translate(19050,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(20050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">其</text></g><g data-mml-node="mi" transform="translate(21050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(22050,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g>',1)])])),a[9]||(a[9]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"e"),t("mi",null,"m"),t("mi",null,"i"),t("mi",null,"t"),t("mi",{mathvariant:"normal"},"方"),t("mi",{mathvariant:"normal"},"法"),t("mi",{mathvariant:"normal"},"并"),t("mi",{mathvariant:"normal"},"传"),t("mi",{mathvariant:"normal"},"入"),t("mi",{mathvariant:"normal"},"自"),t("mi",{mathvariant:"normal"},"定"),t("mi",{mathvariant:"normal"},"义"),t("mi",{mathvariant:"normal"},"事"),t("mi",{mathvariant:"normal"},"件"),t("mi",{mathvariant:"normal"},"名"),t("mi",{mathvariant:"normal"},"称"),t("mi",{mathvariant:"normal"},"抛"),t("mi",{mathvariant:"normal"},"出"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"事"),t("mi",{mathvariant:"normal"},"件"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"其"),t("mi",{mathvariant:"normal"},"中"),t("mi",null,"，")])],-1))]),a[11]||(a[11]=r("emit() 方法在当前子组件实例上也同样以 this.$emit() 的形式可用，父组件的自定义事件监听器也支持 .once 修饰符。在父组件的模板中也推荐使用 kebab-case 形式来编写监听器。",-1))]),a[50]||(a[50]=e('<p>和原生 DOM 事件不一样，组件触发的事件没有冒泡机制，因此只能监听直接子组件触发的事件。平级组件或是跨越多层嵌套的组件间通信，应使用一个外部的事件总线，或是使用一个全局状态管理方案。</p><p>所有传入 $emit() 的额外参数都会被直接传向父组件中对应的监听器。</p><p>也可以通过emits 选项来声明需要在子组件需要抛出的事件，它声明子组件可能触发的所有事件，emits 选项还支持对象语法，它允许对触发事件赋值为一个函数来对参数进行验证，函数接受的参数就是抛出事件时传入 this.$emit 的内容，返回一个布尔值来表明事件是否合法。推荐完整地声明所有要触发的事件，以此在代码中作为文档记录组件的用法。同时，事件声明能让 Vue 更好地将事件和透传 attribute 作出区分，可以让 Vue 避免将它们作为原生事件监听器隐式地应用于子组件的根元素，从而避免一些由第三方代码触发的自定义 DOM 事件所导致的边界情况。如果与原生事件的名字相同的事件被定义在 emits 选项中，则监听器只会监听组件触发的该自定义事件而不会再响应对应原生事件。</p><h3 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h3><p>子组件能够接收任意类型的 JavaScript 值作为 props，同时子组件也可以接收模板内容。 Vue 的自定义 <code>&lt;slot&gt;</code> 元素，可以实现向子组件中传递模板内容， <code>&lt;slot&gt;</code> 作为一个占位符，会渲染成父组件传递进来的内容，<strong><code>&lt;slot&gt;</code> 类似于函数定义中的参数使用，传递的内容类似于函数调用的传递的实参</strong>。</p><p><code>&lt;slot&gt;</code> 元素是一个插槽出口 (slot outlet)，标示了父组件提供的插槽内容 (slot content) 将在哪里被渲染。插槽内容可以是任意合法的模板内容，不局限于文本，可以传入多个元素，甚至是组件。Vue 组件的插槽机制是受原生 Web Component <code>&lt;slot&gt;</code> 元素的启发而诞生，同时还做了一些功能拓展。</p><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。插槽内容无法访问子组件的数据。Vue 模板中的表达式只能访问其定义时所处的作用域，这和 JavaScript 的词法作用域规则是一致的，即父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</p><p>在外部没有提供任何内容的情况下，可以写在 <code>&lt;slot&gt;</code> 标签之间为插槽指定默认内容。</p><p><strong>带 name 的插槽被称为具名插槽 (named slots)（slots.slotName()或slots.<a href="./">soltName</a>）</strong>，用于将多个插槽内容传入到各自目标插槽的出口，<strong>类比于slots对象的属性键值对传递到函数内并在特定位置使用</strong>。没有提供 name 的 <code>&lt;slot&gt;</code> 出口会隐式地命名为“default”。传递时，需要使用含 v-slot 指令（简写 #）的 <code>&lt;template&gt;</code> 元素，指令的值即为目标插槽的名字，而当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非 <code>&lt;template&gt;</code> 节点都被隐式地视为默认插槽的内容。v-slot也支持动态指令参数。</p><p>默认情况下，插槽的内容无法访问到子组件的状态，如果插槽的内容想要同时使用父组件域内和子组件域内的数据。<strong>需要使用作用域插槽（slots.scopeSlotName(slotProps)或slots.<a href="./slotProps">scopeSlotName</a>）</strong>。可以像对组件传递 props 那样，给子组件中定义的插槽的出口上传递 attributes。接收插槽 props时：</p><ol><li><strong>对于默认插槽（slots.default()）</strong>，子组件内传入插槽的attributes构成了soltProps对象对应于父组件中子组件标签上的 v-slot 指令的值，该soltProps对象可以在插槽内容内的表达式中访问。作用域插槽类比为一个传入子组件的函数，子组件会将相应的 soltProps 作为参数传给它，和函数的参数类似，也可以在v-slot中使用解构。</li><li>插槽 props 可以作为 v-slot 指令的值被访问到：v-slot:name=&quot;slotProps&quot;，插槽出口上的 name 是一个 Vue 特别保留的 attribute，不会作为 props 传递给插槽。如果混用了具名插槽与默认插槽，则需要为默认插槽使用显式的 <code>&lt;template&gt;</code> 标签。尝试直接为组件添加 v-slot 指令将导致编译错误，这是为了避免因默认插槽的 props 的作用域而困惑。</li></ol><p>需要子组件能够保留足够的灵活性，将对子组件中某些元素内容和样式的控制权留给使用该子组件的父组件的场景适合使用作用域插槽。一些组件可能只包括了逻辑而不需要自己渲染内容，视图输出通过作用域插槽全权交给了消费者组件，将这种类型的组件称为无渲染组件（类比于React的高阶组件）。但大部分能用无渲染组件实现的功能都可以通过组合式 API 以另一种更高效的方式实现，并且还不会带来额外组件嵌套的开销，尽管如此，作用域插槽在需要同时封装逻辑、组合视图界面时还是很有用。</p><h3 id="透传attribute" tabindex="-1">透传attribute <a class="header-anchor" href="#透传attribute" aria-label="Permalink to &quot;透传attribute&quot;">​</a></h3>',13)),t("p",null,[a[14]||(a[14]=r("“透传 attribute”指的是传递给一个组件，却没有被该组件声明为 props 或 emits 的 attribute 或者 v-on 事件监听器，常见的有class、style 和 id。当一个组件以单个元素为根作渲染时，透传的 attribute 会自动被添加到根元素上。如果一个子组件的根元素已经有了 class 或 style attribute，它会和从父组件上继承的值合并，该规则也适用于v-on事件监听器，根元素监听器和从父组件继承的监听器都会被触发。而如果子组件内是根节点上渲染另一个组件，则子组件接收的透传 attribute 且只有它会直接继续传给子组件的根组件，如果透传的attribute符合声明，也可以作为 props 传入子组件的根组件。透传进来的 attribute 可以在模板的表达式中直接用 ",-1)),t("mjx-container",B,[(l(),o("svg",I,[...a[12]||(a[12]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(890,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1251,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1702,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(3171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">象</text></g><g data-mml-node="mi" transform="translate(4171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(5171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(6171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(7171,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(8171,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(9171,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(9804,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10333,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(10818,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(11347,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(11992,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(12425,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(12876,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(13221,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(13724,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(14085,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(15085,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">则</text></g><g data-mml-node="mi" transform="translate(16085,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(17085,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(18085,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(19085,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(19446,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(20022,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(20367,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(20836,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[13]||(a[13]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"t"),t("mi",null,"r"),t("mi",null,"s"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"象"),t("mi",{mathvariant:"normal"},"访"),t("mi",{mathvariant:"normal"},"问"),t("mi",{mathvariant:"normal"},"到"),t("mi",null,"（"),t("mi",{mathvariant:"normal"},"在"),t("mi",null,"J"),t("mi",null,"a"),t("mi",null,"v"),t("mi",null,"a"),t("mi",null,"S"),t("mi",null,"c"),t("mi",null,"r"),t("mi",null,"i"),t("mi",null,"p"),t("mi",null,"t"),t("mi",{mathvariant:"normal"},"中"),t("mi",{mathvariant:"normal"},"则"),t("mi",{mathvariant:"normal"},"是"),t("mi",{mathvariant:"normal"},"使"),t("mi",{mathvariant:"normal"},"用"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,".")])],-1))]),a[15]||(a[15]=r("attrs访问），$attrs 对象包含了除组件所声明的 props 和 emits 之外的所有其他 attribute，而且和 props 有所不同，透传 attributes 在 JavaScript 中保留了它们原始的大小写；v-on 事件监听器将在此对象下被暴露为camlCase形式的函数名称 $attrs.onEventName。可以在组件选项中设置 inheritAttrs: false来拒绝继承attribute。最常见的需要禁用attribute继承的场景就是被透传的attribute 需要应用在根节点以外的其他元素上。",-1))]),a[51]||(a[51]=e('<p>和单根节点组件有所不同，有着多个根节点的组件没有自动 attribute 透传行为。如果 $attrs 需要被显式绑定，否则将会抛出一个运行时警告。</p><p>Vue 的 <code>&lt;component&gt;</code> 元素和特殊的 is attribute 可以实现在两个组件间来回切换。被传递给被传给 :is 的值可以是被components选项注册的组件名或导入的组件对象。也可以使用 is attribute 来创建一般的 HTML 元素。当使用 <code>&lt;component :is=&quot;...&quot;&gt;</code> 来在多个组件间作切换时，被切换掉的组件会被卸载，可以通过 <code>&lt;KeepAlive&gt;</code> 组件强制被切换掉的组件仍然保持“存活”的状态。</p><h3 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h3><p>provide 和 inject 可以帮助解决prop 逐级透传问题，一个父组件相对于其所有的后代组件，会作为依赖提供者。任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖。</p><p>使用provide 选项为组件后代Provide（提供）数据，对于 provide选项对象上的每一个属性，后代组件会用其 key 为注入名查找期望注入的值，属性的值就是要提供的数据。如果需要提供依赖当前组件实例的状态 (比如由 data() 定义的数据属性)，那么可以以函数形式使用 provide，然而，请注意这不会使注入保持响应性。除了在组件中提供依赖，还可以利用app.provide在整个应用层面提供依赖，在应用级别提供的数据在该应用内的所有组件中都可以注入，这在你编写插件时会特别有用，因为插件一般都不会使用组件形式来提供值。</p><p>使用 inject 选项来声明要注入到当前组件的上层组件提供的数据，注入会在组件自身的状态之前被解析，因此可以在 data() 中访问到注入的属性。当以数组形式使用 inject，注入的属性会以同名的 key 暴露到组件实例上。如果想要用一个不同的本地属性名注入该属性，需要使用inject选项对象形式，并且该对象的属性键对应于本地属性名，属性值对象中的from属性对应的值对应于注入名。默认情况下，inject 假设传入的注入名会被某个祖先链上的组件提供。如果该注入名的确没有任何组件提供，则需要类似于props那样声明默认值（对于非基础类型数据，如果创建开销比较大，或是需要确保每个组件实例需要独立数据的，请使用工厂函数），否则会抛出一个运行时警告。</p><p>为保证注入方和供给方之间的响应性链接，需要在注入方使用 computed() 函数提供一个计算属性。computed() 函数常用于组合式 API 风格的组件中，但它同样还可以用于补充选项式 API 风格的某些用例。Vue 3.3以下需要设置 app.config.unwrapInjectedRef = true 以保证注入会自动解包该计算属性。</p><p>除了使用字符串作为注入名，如果正在构建大型的应用，包含非常多的依赖提供，或者正在编写提供给其他开发者使用的组件库，建议最好使用 Symbol 来作为注入名以避免潜在的冲突。推荐在一个单独的文件中导出这些注入名 Symbol。</p><h3 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-label="Permalink to &quot;异步组件&quot;">​</a></h3><p>Vue 提供了 defineAsyncComponent 方法来实现在大型项目中拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。defineAsyncComponent 方法接收一个返回 Promise 的加载函数。该Promise 的 resolve 回调方法应该在从服务器获取到组件定义时调用，而 reject(reason) 则在加载失败调用。</p><p>ES 模块动态导入也会返回一个Promise，所以多数情况它可以和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此defineAsyncComponent语法 （并且会将它们作为打包时的代码分割点），因此也可以用它来导入 Vue 单文件组件。</p><p>defineAsyncComponent最后得到的 AsyncComp组件是一个外层包装过的组件，仅在页面需要它渲染时才会调用加载内部实际组件的函数。它会将接收到的 props 和插槽内容传给内部组件，所以可以使用这个异步的包装组件无缝地替换原始组件，同时实现延迟加载。</p><p>与普通组件一样，异步组件可以使用 app.component() 全局注册，也可以在局部注册组件时使用 defineAsyncComponent。</p><p>异步操作不可避免地会涉及到加载和错误状态，因此 defineAsyncComponent() 也支持在传递对象形式的高级选项中处理这些状态：</p><ol><li>loader：加载函数，对应于defineAsyncComponent 方法接收一个返回 Promise 的加载函数形式。</li><li>loadingComponent：加载异步组件处于loading状态时使用的组件。</li><li>delay: 展示加载组件前的延迟时间，默认为 200ms。</li><li>errorComponent：加载失败后Promise 抛错时展示的组件。</li><li>timeout：加载异步组件超时限制，默认值是Infinity，超时会显示配置的errorComponent报错组件。</li></ol><p>异步组件可以搭配内置的 <code>&lt;Suspense&gt;</code> 组件一起使用。</p><h3 id="函数式组件" tabindex="-1">函数式组件 <a class="header-anchor" href="#函数式组件" aria-label="Permalink to &quot;函数式组件&quot;">​</a></h3><p>函数式组件是一种定义自身没有任何状态的组件的方式。它们很像纯函数：接收 props，返回 vnodes。函数式组件在渲染过程中不会创建组件实例 (即没有this)，也不会触发常规的组件生命周期钩子。第一个参数是props。第二个参数context具有attrs、emit 和 slots三个属性。</p><p>大多数常规组件的配置选项在函数式组件中都不可用，除了 props 和 emits，可以通过给函数式组件添加对应的属性来声明它们。如果这个 props 选项没有被定义，那么被传入函数的 props 对象就会像 attrs 一样会包含所有 attribute。除非指定了 props 选项，否则每个 prop 的名字将不会基于驼峰命名法被一般化处理。对于有明确 props 的函数式组件，attribute 透传的原理与普通组件基本相同。然而，对于没有明确指定 props 的函数式组件，只有 class、style 和 onXxx事件监听器将默认从attrs中继承。在这两种情况下，可以将 inheritAttrs 设置为 false 来禁用属性继承。</p><p>函数式组件可以像普通组件一样被注册和使用。如果将一个函数作为第一个参数传入 渲染函数h，它将会被当作一个函数式组件来对待。</p><h3 id="自定义指令" tabindex="-1">自定义指令 <a class="header-anchor" href="#自定义指令" aria-label="Permalink to &quot;自定义指令&quot;">​</a></h3><p>Vue 除了支持内置的一系列指令，还允许注册自定义的指令 (Custom Directives)。Vue中重用代码的方式：组件、组合式函数和自定义指令。组件是主要的构建模块，而组合式函数则侧重于有状态的逻辑，而自定义指令主要是为了重用涉及普通元素的底层 DOM 访问的逻辑。一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。钩子函数会接收到指令所绑定元素作为其参数。自定义指令比原生HTML attribute 更有用，因为它不仅仅可以在页面加载完成后生效，还可以在 Vue 动态插入元素后生效。</p><p>和组件类似，自定义指令在模板中使用前必须先注册。可以使用 directives 选项进行自定义指令的局部注册，也可以使用app.directive进行全局注册。和内置指令类似，自定义指令的参数也可以是动态的。</p><p>只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令。其他情况下应该尽可能地使用 v-bind 这样的内置指令来声明式地使用模板，这样更高效，也对服务端渲染更友好。</p><p>一个指令的定义对象可以提供以下几种钩子函数 (都是可选的)：</p><p><img src="'+T+'" alt=""></p><p>指令的钩子会传递以下几种参数：</p><ol><li>el：指令绑定到的元素。这可以用于直接操作 DOM。</li><li>binding：一个包含以下属性对象。 <ol><li>value：使用时传递给指令的值。如果指令需要多个值，可以向它传递一个 JavaScript 对象字面量，因为指令可以接收任何合法的 JavaScript 表达式。</li><li>oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。</li><li>arg：传递给指令的参数 (如果有的话)。例如在 v-my-directive:foo 中，参数是 &quot;foo&quot;。</li><li>modifiers：一个包含修饰符的对象 (如果有的话)。例如在 v-my-directive.foo.bar 中，修饰符对象是 { foo: true, bar: true }。</li><li>instance：使用该指令的组件实例。</li><li>dir：指令的定义对象，即myDirective。</li></ol></li><li>vnode：代表绑定元素的底层 VNode。</li><li>prevNode：上一次渲染中代表指令所绑定元素的 VNode。仅在 beforeUpdate 和 updated 钩子中可用。</li></ol><p>除了 el 外，其他参数都是只读的，不要更改它们，若需要在不同的钩子间共享信息，推荐通过元素的 dataset attribute 实现。</p><p>自定义指令的简化形式是app.directive(&#39;color&#39;, (el, binding) =&gt; {// 这会在 <code>mounted</code> 和 <code>updated</code> 时都调用})，因为对于自定义指令来说很常见的情况是仅仅需要在 mounted 和 updated 上实现相同的行为，除此之外并不需要其他钩子。</p><p>当在组件上使用自定义指令时，和透传 attributes 类似，它会始终应用于组件的根节点。如果组件含有多个根节点，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 v-bind=&quot;$attrs&quot; 来指定传递给某个元素。总的来说，不推荐在组件上使用自定义指令。</p><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><p>插件 (Plugins) 是一种能为 Vue 添加全局功能的工具代码。定义一个插件可以是拥有 install() 方法的对象，也可以直接是安装函数本身。安装函数会接收到安装它的应用实例和传递给 app.use() 的额外选项作为参数。使用时通过app.use(myPlugin, {/* 可选的选项 */})给插件myPlugin传递可选的options。插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p><ol><li>通过 app.component() 和 app.directive() 注册一到多个全局组件或自定义指令。</li><li>通过 app.provide() 使一个资源可被注入进整个应用。</li><li>向 app.config.globalProperties 中添加一些全局实例属性或方法</li><li>可能上述三种都包含的功能库 (例如 vue-router)。</li></ol><p>编写一个简单的i18n（国际化Internationalization的缩写）插件。首先，建议在一个单独的文件中创建并导出插件对象，以保证更好地管理逻辑。使用时通过在任意模板中调用（即支持全局调用，通过在安装函数中将该翻译函数添加到 app.config.globalProperties 上来实现）接收以 . 作为分隔符的 key 字符串作为参数的翻译函数，该翻译函数内部会在用户提供的翻译字典（在插件被安装时作为 app.use() 的额外参数options中传入）中查找，并返回翻译得到的值。在插件安装函数中，还可以将插件接收到的 options 参数通过provide提供给整个应用，让任何组件inject后都能使用这个翻译字典对象。请谨慎使用全局属性，如果在整个应用中使用不同插件注入的太多全局属性，很容易让应用变得难以理解和维护。</p><p><img src="'+d+'" alt=""></p><h2 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h2><p>内置组件，这意味着它在任意别的组件中都可以被使用，无需注册。</p><h3 id="transition" tabindex="-1">Transition <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;Transition&quot;">​</a></h3><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画。此外，还可以切换 CSS class 或用状态绑定样式来应用动画。<code>&lt;Transition&gt;</code> 可以将进入和离开动画应用到默认插槽内容上，<code>&lt;Transition&gt;</code> 仅支持单个元素或组件作为其插槽内容，而且如果内容是一个组件，这个组件必须仅有一个根元素。进入或离开可以由以下的条件之一触发：</p><ol><li>由 v-if 所触发的切换；</li><li>由 v-show 所触发的切换；</li><li>由特殊元素 <code>&lt;component&gt;</code> 切换的动态组件。</li></ol><p>当一个 <code>&lt;Transition&gt;</code> 组件中的元素被插入或移除时：</p><ol><li>Vue 会自动检测插槽内容是否应用了 CSS 过渡或动画。如果是，则一些 CSS 过渡 class 会在适当的时机被添加和移除。可以给 <code>&lt;Transition&gt;</code> 组件传一个 name prop 来声明一个过渡效果名，对于一个有名字的过渡效果，对它起作用的过渡 class 会以其名字而不是 v 作为前缀。<code>&lt;Transition&gt;</code> 一般都会搭配原生 CSS 过渡（transition CSS 属性）或原生CSS动画一起使用。原生 CSS 动画和 CSS transition 的应用方式基本相同，除了*-enter-from 不是在元素插入后立即移除，而是在一个 animationend 事件触发时被移除。也可以向 <code>&lt;Transition&gt;</code> 传递特定props（enter-from-class、enter-active-class、enter-to-class、leave-from-class、leave-active-class、leave-to-class） 来指定自定义的过渡 class，传入的这些 class 会覆盖相应阶段的默认 class 名，这在想要在 Vue 的动画机制下集成其他的第三方 CSS 动画库（比如Animate.css）时非常有用。仅仅使用transition和animation的其中之一，Vue 可以自动探测到正确的类型，因为Vue 会附加事件监听器transitionend 或 animationend，以便知道过渡何时结束。然而或许想要在同一个元素上同时使用它们两个，此时需要显式地传入 type prop （值是animation 或 transition）来声明，告诉 Vue 本身需要关心的是哪种类型。尽管过渡 class 仅能应用在 <code>&lt;Transition&gt;</code> 的直接子元素上，我们还是可以使用深层级的 CSS 选择器，在深层级的元素上触发过渡效果。默认情况下，<code>&lt;Transition&gt;</code> 组件会通过监听过渡根元素上的第一个 transitionend 或者 animationend 事件来尝试自动判断过渡何时结束。而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成，此时可以通过向 <code>&lt;Transition&gt;</code> 组件传入 duration prop 来显式指定过渡的持续时间 (以毫秒为单位)。总持续时间应该匹配延迟加上内部元素的过渡持续时间，或者duration prop也支持用对象的形式传入，分开指定进入和离开所需的时间。会触发 CSS 布局变动的属性像 height 或者 margin，执行它们的动画效果更昂贵，需要谨慎使用，而 transform 和 opacity这些属性在动画过程中不会影响到 DOM 结构，因此不会每一帧都触发昂贵的 CSS 布局重新计算，而且大多数的现代浏览器都可以在执行 transform 动画时利用 GPU 进行硬件加速，可以在 CSS-Triggers （<a href="https://csstriggers.com/%EF%BC%89%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%E4%BC%9A%E5%9C%A8%E6%89%A7%E8%A1%8C%E5%8A%A8%E7%94%BB%E6%97%B6%E8%A7%A6%E5%8F%91" target="_blank" rel="noreferrer">https://csstriggers.com/）网站查询哪些属性会在执行动画时触发</a> CSS 布局变动。<strong>6 个应用于进入与离开过渡或动画效果的默认CSS class</strong>： <ol><li>v-enter-from：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li><li>v-enter-active：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 class 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li><li>v-enter-to：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 v-enter-from 被移除的同时)，在过渡或动画完成之后移除。</li><li>v-leave-from：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li><li>v-leave-active：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 class 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li><li>v-leave-to：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 v-leave-from 被移除的同时)，在过渡或动画完成之后移除</li></ol></li><li>如果有作为监听器的 JavaScript 钩子，这些钩子函数会在适当时机被调用。通过监听 <code>&lt;Transition&gt;</code> 组件事件的方式在过渡过程中挂上钩子函数。钩子可以与 CSS 过渡或动画结合使用，也可以单独使用。在使用仅由 JavaScript 执行的动画时，最好是添加一个 :css=&quot;false&quot; prop。这显式地向 Vue 表明可以跳过对 CSS 过渡的自动探测。除了性能稍好一些之外，还可以防止 CSS 规则意外地干扰过渡效果。</li></ol><p><img src="'+p+'" alt=""></p><ol start="3"><li>如果没有探测到 CSS 过渡或动画、也没有提供 JavaScript 钩子，那么 DOM 的插入、删除操作将在浏览器的下一个动画帧后执行。</li></ol><p>过渡效果是可以被封装复用的。要创建一个可被复用的过渡，需要为 <code>&lt;Transition&gt;</code> 组件创建一个包装组件，并向内传入插槽内容。如果想在某个节点初次渲染时应用一个过渡效果，你可以添加 appear prop。除了通过 v-if / v-show 切换一个元素，也可以通过 v-if / v-else / v-else-if 在几个组件间进行切换，只要确保任一时刻只会有一个元素被渲染即可。可以通过向 <code>&lt;Transition&gt;</code> 传入一个 mode prop 来实现是先执行离开动画还是进入动画。<code>&lt;Transition&gt;</code> 也可以作用于动态组件（<code>&lt;component :is=&quot;...&quot;/&gt;</code>）之间的切换。 <code>&lt;Transition&gt;</code> 的 props (比如 name) 也可以是动态绑定的，这样可以根据状态变化动态地应用不同类型的过渡或动画，即可以提前定义好多组 CSS 过渡或动画的 class，然后在它们之间动态切换。也可以根据组件的当前状态在 JavaScript 过渡钩子中应用不同的行为，创建动态过渡的终极方式还是创建可复用的过渡组件，并让这些组件根据动态的 props 来改变过渡的效果。</p><h3 id="transitiongroup" tabindex="-1">TransitionGroup <a class="header-anchor" href="#transitiongroup" aria-label="Permalink to &quot;TransitionGroup&quot;">​</a></h3><p><code>&lt;TransitionGroup&gt;</code> 会在一个 v-for 列表中的部分元素或组件被插入，移动，或移除时应用动画。当在 DOM 模板中使用时，组件名需要写为 <code>&lt;transition-group&gt;</code>。 <code>&lt;TransitionGroup&gt;</code> 支持和 <code>&lt;Transition&gt;</code> 基本相同的 props、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别：</p><ol><li>默认情况下，它不会渲染一个容器元素。但可以通过传入 tag prop 来指定一个元素作为容器元素来渲染。</li><li>过渡模式在这里不可用，因为不再是在互斥的元素之间进行切换。</li><li>列表中的每个元素都必须有一个独一无二的 key attribute。</li><li>CSS 过渡 class 会被应用在列表内的元素上，而不是容器元素上。</li></ol><p>可以通过添加一些额外的 CSS 规则来解决当某一项被插入或移除时，它周围的元素会立即发生“跳跃”而不是平稳地移动的问题，包括将离开的元素从布局流中删除来确保能够正确地计算移动的动画，以及对移动中的元素应用的过渡。</p><p>把列表中每一个元素的索引渲染为该元素上的一个 data attribute，然后通过在 JavaScript 钩子中读取元素的 data attribute，对不同元素的动画效果添加一个递进的延迟时间，可以实现带渐进延迟的列表动画。</p><h3 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;KeepAlive&quot;">​</a></h3><p><code>&lt;KeepAlive&gt;</code> 的功能是在多个组件间动态切换时缓存被移除的组件实例。在 DOM 模板中使用时，它应该被写为 <code>&lt;keep-alive&gt;</code>。</p><p>默认情况下，一个组件实例在被替换掉后会被销毁，比如 <code>&lt;component :is=&quot;&quot; /&gt;</code> 元素来实现动态组件。这会导致它丢失其中所有已变化的状态——当这个组件再一次被显示时，会创建一个只带有初始状态的新实例。</p><p>在切换时创建新的组件实例通常是有意义的，但有时想要组件能在被“切走”的时候保留它们的状态。可以用 <code>&lt;KeepAlive&gt;</code> 内置组件将这些动态组件包装起来解决这个问题。</p><p><code>&lt;KeepAlive&gt;</code> 默认会缓存内部的所有组件实例，但可以通过prop include 和 exclude（这两个属性值都可以是一个以英文逗号分隔的字符串、一个正则表达式，或是包含这两种类型的一个数组）根据子组件的 name 选项来进行匹配包含和排除需要被缓存的组件实例，因此子组件必须显式声明name 选项才能被有条件的缓存。而在 3.2.34 或以上的版本中，使用 <code>&lt;script setup&gt;</code> 的单文件组件会自动根据文件名生成对应的 name 选项，无需再手动声明。</p><p>可以通过传入 max prop 来限制可被缓存的最大组件实例数。<code>&lt;KeepAlive&gt;</code> 的行为在指定了 max 后类似一个 LRU 缓存：如果缓存的实例数量即将超过指定的那个最大数量，则最久没有被访问的缓存实例将被销毁，以便为新的实例腾出空间。</p><p>当一个组件实例从 DOM 上移除但因为被 <code>&lt;KeepAlive&gt;</code> 缓存而仍作为组件树的一部分时，它将变为不活跃状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新被激活。一个持续存在的组件可以通过 activated选项（在首次挂载、以及每次从缓存中被重新插入的时候调用） 和 deactivated （在从 DOM 上移除、进入缓存以及组件卸载时调用）选项来注册相应的两个状态的生命周期钩子。这两个钩子不仅适用于 <code>&lt;KeepAlive&gt;</code> 缓存的根组件，也适用于缓存树中的后代组件。</p><h3 id="teleport" tabindex="-1">Teleport <a class="header-anchor" href="#teleport" aria-label="Permalink to &quot;Teleport&quot;">​</a></h3><p><code>&lt;Teleport&gt;</code> 可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。一个组件模板的一部分在逻辑上从属于该组件，但从整个应用视图的角度来看，它在 DOM 中应该被渲染在整个 Vue 应用外部的其他地方，这类场景最常见的是全屏的模态框。<code>&lt;Teleport&gt;</code> 使得不需要顾虑 DOM 结构（模态框放在非全局的容器节点下）的问题：</p><ol><li>position: fixed 能够相对于浏览器窗口放置有一个条件，那就是不能有任何祖先元素设置了 transform、perspective 或者 filter 样式属性。也就是说如果想要用 CSS transform 为模态框的容器节点设置动画，就会不小心破坏模态框的布局。</li><li>这个模态框的 z-index 受限于它的容器元素。如果有其他元素与容器节点重叠并有更高的 z-index，则它会覆盖住我们的模态框。</li></ol><p><code>&lt;Teleport&gt;</code> 挂载时，传送的 to 目标必须已经存在于 DOM 中。理想情况下，这应该是整个 Vue 应用 DOM 树外部的一个元素。如果目标元素也是由 Vue 渲染的，你需要确保在挂载 <code>&lt;Teleport&gt;</code>&gt; 之前先挂载该元素。</p><p><code>&lt;Teleport&gt;</code> 只改变了渲染的 DOM 结构，它不会影响组件间的逻辑关系，即如果 <code>&lt;Teleport&gt;</code> 包含的组件始终和使用 <code>&lt;teleport&gt;</code> 的组件保持逻辑上的父子关系，传入的 props 、触发的事件以及来自父组件的注入均会按预期工作，同时，子组件将在 Vue Devtools 中嵌套在父级组件下面，而不是放在实际内容移动到的地方。</p><p><code>&lt;Teleport&gt;</code> 支持动态绑定disabled prop 来满足切换是否禁用 <code>&lt;Teleport&gt;</code> 的场景。多个 <code>&lt;Teleport&gt;</code> 组件可以将其内容挂载在同一个目标元素上，而渲染的顺序就是简单的顺次追加，后挂载的将排在目标元素里更后面的位置上。</p><h3 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-label="Permalink to &quot;Suspense&quot;">​</a></h3><p><code>&lt;Suspense&gt;</code> 用来在组件树中协调对异步依赖的处理，它使得可以在组件树上层等待下层的多个嵌套异步依赖项解析完成，并可以在等待时渲染一个加载状态，避免每个异步依赖去单独处理自己的加载、报错和完成状态。<code>&lt;Suspense&gt;</code> 可以等待的异步依赖：</p><ol><li>带有异步 setup() 钩子的组件，包括使用 <code>&lt;script setup&gt;</code> 中有顶层 await 表达式的组件。</li><li>异步组件。异步组件默认就是“suspensible”的，因此如果异步组件父级关系链上存在 <code>&lt;Suspense&gt;</code>，则该异步组件自己的加载、报错、延时和超时等选项都将被忽略，其加载状态将由 <code>&lt;Suspense&gt;</code> 控制。异步组件也可以通过在选项中指定 suspensible: false 表明不用 Suspense 控制，并让组件始终自己控制其加载状态。</li></ol><p><code>&lt;Suspense&gt;</code> 组件有两个插槽：#default 和 #fallback，都只允许一个直接子节点。在初始渲染时，<code>&lt;Suspense&gt;</code> 将在内存中渲染其默认的插槽内容（#default），但如果在这个过程中遇到任何异步依赖，则会进入挂起状态。在挂起状态期间，展示的是后备内容（#fallback）。当所有遇到的异步依赖都完成后，<code>&lt;Suspense&gt;</code> 会进入完成状态，才将展示出默认插槽（#default）的内容，如果在初次渲染时没有遇到异步依赖，<code>&lt;Suspense&gt;</code> 会直接进入完成状态。进入完成状态后，只有当默认插槽（#default）的根节点被替换时，<code>&lt;Suspense&gt;</code> 才会再次回到挂起状态，而组件树中新的更深层次的异步依赖不会造成 <code>&lt;Suspense&gt;</code> 回退到挂起状态。</p><p>发生这种回退时，后备内容（#fallback）不会立即展示出来，<code>&lt;Suspense&gt;</code> 在等待新内容和异步依赖完成时，会先展示默认插槽（#default）的先前内容，直到在等待渲染新内容耗时超过 timeout prop 之后才切换为展示后备内容（#fallback），因此，若 timeout 值为 0 将导致在替换默认内容时立即显示后备内容（#fallback）。 <code>&lt;Suspense&gt;</code> 组件会触发三个事件：pending、resolve 和 fallback。pending 事件是在进入挂起状态时触发。resolve 事件是在 default 插槽完成获取新内容时触发。fallback 事件则是在 fallback 插槽的内容显示时触发。</p><p><code>&lt;Suspense&gt;</code> 组件自身目前还不提供错误处理，不过可以使用 errorCaptured 选项或者 onErrorCaptured() 钩子，在使用到 <code>&lt;Suspense&gt;</code> 的父组件中捕获和处理异步错误。</p><p>通常会将 <code>&lt;Suspense&gt;</code> 和 <code>&lt;Transition&gt;</code>、<code>&lt;KeepAlive&gt;</code> 等组件与 Vue Router 中的 <code>&lt;RouterView&gt;</code> 组件结合使用，但嵌套的顺序很重要：<code>&lt;RouterView&gt;</code> -&gt; <code>&lt;Transition&gt;</code> -&gt; <code>&lt;KeepAlive&gt;</code> -&gt; <code>&lt;Suspense&gt;</code>。与异步组件不同，Vue Router 使用动态导入来对懒加载组件进行了内置支持，因此这些懒加载组件本身目前不会触发 <code>&lt;Suspense&gt;</code>。但是它们仍然可以有异步组件作为后代，因此可以使得这些懒加载组件包含异步组件来照常触发 <code>&lt;Suspense&gt;</code>。</p><p><code>&lt;Suspense&gt;</code> 是一项实验性功能。它不一定会最终成为稳定功能，并且在稳定之前相关 API 也可能会发生变化。</p><h2 id="应用规模化" tabindex="-1">应用规模化 <a class="header-anchor" href="#应用规模化" aria-label="Permalink to &quot;应用规模化&quot;">​</a></h2><h3 id="单文件组件" tabindex="-1">单文件组件 <a class="header-anchor" href="#单文件组件" aria-label="Permalink to &quot;单文件组件&quot;">​</a></h3><p>Vue 的单文件组件 (即 *.vue 文件，英文 Single-File Component，简称 SFC) 使能够将一个 Vue 组件的模板（<code>&lt;template&gt;</code>）、逻辑（<code>&lt;script&gt;</code>）与样式（<code>&lt;style&gt;</code>）封装在单个文件中的特殊的文件格式。</p><p>Vue SFC是框架指定的文件格式，因此必须交由 @vue/compiler-sfc 编译为标准的 JavaScript 和 CSS，编译后的 SFC 是标准的 JavaScript(ES) 模块，这也意味着在构建配置正确的前提下可以像导入其他 ES 模块一样导入 SFC。</p><p>SFC 中的 <code>&lt;style&gt;</code> 标签一般会在开发时注入成原生的 <code>&lt;style&gt;</code> 标签以支持热更新，而生产环境下它们会被抽取、合并成单独的 CSS 文件。</p><p><strong>使用 SFC 必须额外使用构建工具，但带来以下优点</strong>：</p><ol><li>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件;</li><li>让本来就强相关的关注点自然内聚;</li><li>预编译模板，避免运行时的编译开销;</li><li>组件作用域的 CSS;</li><li>在使用组合式 API 时语法更简单;</li><li>通过交叉分析模板和逻辑代码能进行更多编译时优化;</li><li>更好的 IDE 支持，提供自动补全和对模板中表达式的类型检查;</li><li>开箱即用的模块热更新 (HMR) 支持。</li></ol><p><strong>推荐以下使用场景</strong>：</p><ol><li>单页面应用 (SPA);</li><li>静态站点生成 (SSG);</li><li>任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目。</li></ol><p>前端开发的关注点不是完全基于文件类型分离的。前端工程化的最终目的都是为了能够更好地维护代码。关注点分离不应该是教条式地将其视为文件类型的区别和分离。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。或者模板（<code>&lt;template&gt;</code>）、逻辑（<code>&lt;script&gt;</code>）与样式（<code>&lt;style&gt;</code>）分别放在一个文件夹下然后通过资源导入即这三个标签的src导入到index中。</p><h3 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h3><p>服务端路由指的是服务器根据用户访问的 URL 路径返回不同的响应结果，即点击一个链接时，浏览器会从服务端获得全新的 HTML进行页面加载。而在单页面应用中，客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后在无需重新加载的情况下更新当前页面。在这类单页应用中，“路由”是在客户端执行的。客户端路由器的职责就是利用 History API 或是 hashchange 事件这样的浏览器 API 来管理应用当前应该渲染的视图。Vue 很适合用来构建单页面应用。对于大多数此类应用，都推荐使用官方支持的路由库vue-router。</p><p>vue-router没有使用常规的 a 标签，而是使用一个自定义组件 router-link 来创建对应路由模式下的a标签链接。这使得 Vue Router 可以在不重新加载页面的情况下（history模式下为避免刷新页面，阻止了生成的a标签的默认行为，同时使用history API更改路径）更改 URL，处理 URL 的生成以及编码。而自定义组件router-view 将显示与 url 对应的组件。</p><p>初始化vue-router实例时，配置选项RouterOptions包含以下属性：</p><ol><li>linkActiveClass：可选，导航路由匹配当前路由的RouterLink默认的 CSS class。如果没有提供，则会使用 router-link-active。在router-link的props中可以传递activeclass达到相同的效果。</li><li>linkExactActiveClass：可选，导航路由严格匹配当前路由的RouterLink默认的 CSS class。如果没有提供，则会使用 router-link-exact-active。在router-link的props中可以传递exactActiveclass达到相同的效果。</li></ol><p>路由模式决定了路由从哪里获取访问路径，以及如何改变访问路径。</p><p><strong>vue-router 默认 hash 模式：利用URL 的 hash 来模拟一个完整的 URL，hash是包括#在内的后面的内容，获取路径和改变路径均针对hash部分</strong>。</p><ol><li>首次载入网站时，服务器接受的是 # 前的http请求，hash改变会向浏览器增加历史记录，但不会向服务器发起请求，也就不需要在服务器层面上进行任何特殊处理。</li><li>爬虫不会爬到 # 后的内容，对 SEO 不利；</li><li>可能会与网站的锚点功能产生冲突。</li><li>点击跳转或浏览器动作（回退、前进）会触发hashchange事件，刷新页面不会触发；</li><li>通过hashchange 事件来监听到 URL 的变化，从而进行内容的变更即跳转页面。</li><li>兼容性最好。</li></ol><p><strong>history模式：从location.pathname中获取路径，并利用history.pushState() 和 history.repalceState() HTML5 API（1.需要浏览器支持history API）实现URL的变化</strong>。前者新增一个历史记录，后者是直接替换当前的历史记录。</p><ol><li>浏览器进行回退或者调用history.back()会触发popState()事件</li><li>history.pushState()和history.repalceState()都不会触发popState()事件同时也不会像服务器发送请求</li><li>刷新页面或输入URL时会向浏览器发送请求，此时需要在后端配置对应的内容：服务器上添加一个简单的回退路由。如果 URL 不匹配任何静态资源，它应提供与你的应用程序中的 index.html 相同的页面，Vue Router 就可定位到对应内容；同时在 Vue app中实现一个万能的路由来显示 404 页面。</li></ol><p><strong>abstract 模式</strong>：路由从内存中获取路径，改变路径也只是改变内存中的值，这种模式通常应用到非浏览器环境（非浏览器应用）中。</p><p><strong>命名路由</strong>，除了 path 之外，还可以为任何路由提供 name，要链接到一个命名的路由，可以向 router-link 组件的 to 属性传递一个name属性值相同的对象。这有以下优点：</p><ol><li>没有硬编码的 URL。</li><li>params 的自动编码/解码。</li><li>防止使用者在 url 中出现打字错误。</li><li>绕过路径排序（如显示一个）。</li></ol><p>如果只需要简单的页面路由且不想引入整个vue-router路由库，可以通过动态组件的方式，监听浏览器 hashchange 事件或使用 History API 来更新当前组件。以下是利用hashchange事件实现一个简单的路由：</p><p><img src="'+f+'" alt=""></p><h3 id="状态管理" tabindex="-1">状态管理 <a class="header-anchor" href="#状态管理" aria-label="Permalink to &quot;状态管理&quot;">​</a></h3><p>每一个 Vue 组件实例都已经在“管理”它自己的响应式状态，它是一个独立的单元，由以下几个部分组成：</p><ol><li>状态：驱动整个应用的数据源；</li><li>视图：对状态的一种声明式映射；</li><li>交互：状态根据用户在视图中的输入而作出相应变更的可能方式。</li></ol><p><img src="'+g+'" alt=""></p><p>然而，当有多个组件共享一个共同的状态时：</p><ol><li>多个视图可能都依赖于同一份状态：可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中会使得代码变得繁琐冗长，即Prop 逐级透传问题。</li><li>来自不同视图的交互也可能需要更改同一份状态。此时自己可能会直接通过模板引用获取父/子实例，或者通过触发的事件尝试改变和同步多个状态的副本，但两种模式的健壮性都不理想，很容易会导致代码难以维护。</li></ol><p>简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理，组件树视图上任何位置上的组件都可以访问其中的状态或触发动作。</p><p>在选项式 API 中，响应式数据是用 data() 选项声明的。在内部，data() 的返回值对象会通过 reactive() API 转为响应式，因此如果某些状态需要在多个组件实例间共享，可以使用 reactive() 来创建一个响应式对象store ，并将它导入到多个组件中。然而，这也意味着任意导入store 的组件都可以随意修改它的状态。为确保改变状态的逻辑像状态本身一样集中，建议在 store 上定义方法，方法的名称即能表达出行动的意图。需要注意的是，这些方法需要带上圆括号作为内联表达式调用，因为它并不是组件的方法，并且必须要以正确的 this 上下文来调用。此外，其他响应式 API 例如 ref() 或是 computed()，或是甚至通过一个组合式函数来返回一个全局状态。对于服务端渲染，由于store 是跨多个请求共享的单例，上述模式可能会导致问题。</p><p>手动状态管理解决方案但是在大规模的生产应用中还有很多其他事项需要考虑：</p><p>Pinia作为官方的新的状态管理库，对 Vue 2 和 Vue 3 都可用，能满足上述手动状态管理方案以外的需求：</p><ol><li>更强的团队协作约定。</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试。</li><li>模块热更新 (HMR)。</li><li>服务端渲染支持。</li></ol><p>相比Vue 之前的官方状态管理库 Vuex已经处于维护模式，而Pinia在生态系统中能够承担相同的职责且能做得更好，对于新的应用，建议使用 Pinia，Pinia 提供了更简洁直接的 API，并提供了组合式风格的 API，最重要的是，在使用 TypeScript 时它提供了更完善的类型推导。</p><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>自动化测试能够预防无意引入的 bug，并鼓励开发者将应用分解为可测试、可维护的函数、模块、类和组件。建议你尽快开始编写测试，越早越好，拖得越久，应用就会有越多的依赖和复杂性，想要开始添加测试也就越困难。测试类型包括：</p><ol><li><p>单元测试：检查给定函数、类或组合式函数的输入是否产生预期的输出或副作用。编写单元测试是为了验证小的、独立的代码单元是否按预期工作。一个单元测试通常覆盖一个单个函数、类、组合式函数或模块。单元测试侧重于逻辑上的正确性，只关注应用整体功能的一小部分，可能会模拟应用环境的很大一部分（如初始状态、复杂的类、第三方模块和网络请求）。单元测试通常适用于独立的业务逻辑、组件、类、模块或函数，不涉及 UI 渲染、网络请求或其他环境问题。这些通常是与 Vue 无关的纯 JavaScript/TypeScript 模块。推荐使用vitest。在 Vue 应用中为业务逻辑编写单元测试与使用其他框架的应用无明显区别。但有两种情况，必须对 Vue 的特定功能进行单元测试：</p><ol><li>组合式函数。当涉及到测试组合式函数时，我们可以根据是否依赖宿主组件实例把它们分为两类。如果一个组合式程序只使用响应式 API，那么它可以通过直接调用并断言其返回的状态或方法来进行测试。如果是一个依赖生命周期钩子或供给/注入的组合式函数需要被包装在一个宿主组件中才可以测试。可以创建下面这样的帮手函数：</li></ol><p><img src="'+c+'" alt=""></p><p>对于更复杂的组合式函数，通过使用组件测试编写针对这个包装器组件的测试更容易。</p><ol start="2"><li>组件。一个组件可以通过两种方式测试： <ol><li>白盒测试，即单元测试，知晓一个组件的实现细节和依赖关系。它们更专注于将组件进行更独立的测试。这些测试通常会涉及到模拟一些组件的部分子组件，以及设置插件的状态和依赖性（例如 Piana）。</li><li>黑盒测试，即组件测试，不知晓一个组件的实现细节。这些测试尽可能少地模拟，以测试组件在整个系统中的集成情况。它们通常会渲染所有子组件，因而会被认为更像一种“集成测试”。</li></ol></li></ol></li><li><p>组件测试：检查组件是否正常挂载和渲染、是否可以与之互动，以及表现是否符合预期。这些测试比单元测试导入了更多的代码，更复杂，需要更多时间来执行。在 Vue 应用中，主要用组件来构建用户界面。因此，当验证应用的行为时，组件是一个很自然的独立单元。从粒度的角度来看，组件测试位于单元测试之上，可以被认为是集成测试的一种形式。 Vue 应用中大部分内容都应该由组件测试来覆盖，建议每个 Vue 组件都应有自己的组件测试文件。组件测试应该捕捉组件中的 prop、事件、提供的插槽、样式、CSS class 名、生命周期钩子，和其他相关的问题。组件测试不应该模拟子组件，而应该像用户一样，通过与组件互动来测试组件和其子组件之间的交互。例如，组件测试应该像用户那样点击一个元素，而不是编程式地与组件进行交互。组件测试主要需要关心组件的公开接口而不是内部实现细节。对于大部分的组件来说，公开接口包括触发的事件、prop 和插槽。当进行测试时，请记住，测试这个组件做了什么，而不是测试它是怎么做到的。</p><ol><li>推荐的做法： <ol><li>对于视图的测试：根据输入prop和插槽断言渲染输出是否正确。</li><li>对于交互的测试：断言渲染的更新是否正确或触发的事件是否正确地响应了用户输入事件。</li></ol></li><li>应避免的做法： <ol><li>不要去断言一个组件实例的私有状态或测试一个组件的私有方法。测试实现细节会使测试代码太脆弱，因为当实现发生变化时，它们更有可能失败并需要更新重写。</li><li>组件的最终工作是渲染正确的 DOM 输出，所以专注于 DOM 输出的测试提供了足够的正确性保证（如果你不需要更多其他方面测试的话），同时更加健壮、需要的改动更少。</li><li>不要完全依赖快照测试。断言 HTML 字符串并不能完全说明正确性。应当编写有意图的测试。</li><li>如果一个方法需要测试，把它提取到一个独立的实用函数中，并为它写一个专门的单元测试。如果它不能被直截了当地抽离出来，那么对它的调用应该作为交互测试的一部分。</li></ol></li></ol><p>推荐 Vitest 对于组件和组合式函数都采用无头渲染的方式 (例如 VueUse 中的 useFavicon 函数)。组件和 DOM 都可以通过 @testing-library/vue 来测试。Cypress 组件测试 会预期其准确地渲染样式或者触发原生 DOM 事件。可以搭配 @testing-library/cypress 这个库一同进行测试。Vitest 和基于浏览器的运行器之间的主要区别是速度和执行上下文。简而言之，基于浏览器的运行器，如 Cypress，支持组件测试，可以捕捉到基于 Node 的运行器（如 Vitest）所不能捕捉的问题（比如样式问题、原生 DOM 事件、Cookies、本地存储和网络故障），但基于浏览器的运行器比 Vitest 慢几个数量级，因为它们要执行打开浏览器，编译样式表以及其他步骤。组件测试通常涉及到单独挂载被测试的组件，触发模拟的用户输入事件，并对渲染的 DOM 输出进行断言。有以下专门的工具库：</p><ol><li>@testing-library/vue 是一个 Vue 的测试库，专注于测试组件而不依赖其他实现细节。因其良好的设计使得代码重构也变得非常容易。它的指导原则是，测试代码越接近软件的使用方式，它们就越值得信赖。</li><li>@vue/test-utils 是官方的底层组件测试库，用来提供给用户访问 Vue 特有的 API。@testing-library/vue 也是基于此库构建的。</li></ol><p>推荐使用 @testing-library/vue 测试应用中的组件, 因为它更匹配整个应用的测试优先级。只有在构建高级组件、并需要测试内部的 Vue 特有 API 时再使用 @vue/test-utils。</p></li><li><p>端到端测试：检查跨越多个页面的功能，并对生产构建的 Vue 应用进行实际的网络请求。这些测试通常涉及到建立一个数据库或其他后端。单元测试和组件测试在部署到生产时，对应用整体覆盖的能力有限。端到端测试针对的可以说是应用最重要的方面：当用户实际使用应用时发生了什么。端到端测试的重点是多页面的应用表现，针对应用在生产环境下进行网络请求，通常需要建立一个数据库或其他形式的后端，甚至可能针对一个预备上线的环境运行。端到端测试的重点是多页面的应用表现，针对你的应用在生产环境下进行网络请求。他们通常需要建立一个数据库或其他形式的后端，甚至可能针对一个预备上线的环境运行，即可以捕捉到单元测试或组件测试无法捕捉的关键问题。端到端测试不导入任何 Vue 应用的代码，而是完全依靠在真实浏览器中浏览整个页面来测试应用。可以在本地构建的应用中，甚至是一个预上线的环境中运行。针对预上线环境的测试不仅包括你的前端代码和静态服务器，还包括所有相关的后端服务和基础设施。</p><ol><li>跨浏览器测试：端到端测试的一个主要优点是可以了解应用在多个不同浏览器上运行的情况。尽管理想情况应该是 100% 的跨浏览器覆盖率，但很重要的一点是跨浏览器测试对团队资源的回报是递减的，因为需要额外的时间和机器来持续运行它们。因此，在选择应用所需的跨浏览器测试的数量时，注意权衡是很有必要的。</li><li>更快的反馈：端到端测试和相应开发过程的主要问题之一是，运行整个套件需要很长的时间。通常情况下，这只在持续集成和部署（CI/CD）管道中进行。现代的端到端测试框架通过增加并行化等功能来帮助解决这个问题，这使得 CI/CD 管道的运行速度比以前快了几倍。此外，在本地开发时，能够有选择地为正在工作的页面运行单个测试，同时还提供测试的热重载，大大提高了开发者的工作流程和生产力。</li><li>第一优先级的调试体验：传统上，开发者依靠扫描终端窗口中的日志来帮助确定测试中出现的问题，而现代端到端测试框架允许开发者利用他们已经熟悉的工具，例如浏览器开发工具。</li><li>无头模式下的可见性：当端到端测试在 CI/CD 管道中运行时，它们通常在无头浏览器（即不带界面的浏览器）中运行。因此，当错误发生时，现代端到端测试框架的一个关键特性是能够在不同的测试阶段查看应用的快照、视频，从而深入了解错误的原因。而在很早以前，要手动维护这些集成是非常繁琐的。</li></ol><p>Cypress 提供了最完整的端到端解决方案，其具有信息丰富的图形界面、出色的调试性、内置断言和存根、抗剥落性、并行化和快照等诸多特性。不过，它只支持测试基于 Chromium 的浏览器和 Firefox。Playwright 也是一个非常好的端到端测试解决方案，支持测试范围更广的浏览器品类（主要是 WebKit 型的）。</p></li></ol><h2 id="选项式-api" tabindex="-1">选项式 API <a class="header-anchor" href="#选项式-api" aria-label="Permalink to &quot;选项式 API&quot;">​</a></h2><h3 id="状态选项" tabindex="-1">状态选项 <a class="header-anchor" href="#状态选项" aria-label="Permalink to &quot;状态选项&quot;">​</a></h3>',114)),t("p",null,[a[22]||(a[22]=r("data用于声明组件初始响应式状态的函数。函数应当返回一个普通 JavaScript 对象，，Vue会将它转换为响应式对象，不推荐返回一个可能改变自身状态的对象，如浏览器 API 原生对象或是带原型的类实例等。理想情况下，返回的对象应是一个纯粹代表组件状态的普通对象。函数会在Vue创建组件实例时被调用，实例创建后，可以通过this.",-1)),t("mjx-container",j,[(l(),o("svg",J,[...a[16]||(a[16]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1049,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1410,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(2939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(3939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(4939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(5939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(6939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(7939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(8939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">象</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9939,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(10939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(11939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">件</text></g><g data-mml-node="mi" transform="translate(12939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">实</text></g><g data-mml-node="mi" transform="translate(13939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">例</text></g><g data-mml-node="mi" transform="translate(14939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">也</text></g><g data-mml-node="mi" transform="translate(15939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(16939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(17939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(18939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(19939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(20939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(21939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(22939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">象</text></g><g data-mml-node="mi" transform="translate(23939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(24939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(25939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(26939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(27939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(28939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(29939,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(30939,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">即</text></g><g data-mml-node="mi" transform="translate(31939,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(32300,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(32876,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(33221,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(33690,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(34134.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(34637.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(35088.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(35573.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(36076.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(36542.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(36993.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(37354.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(37844.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">等</text></g><g data-mml-node="mi" transform="translate(38844.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mi" transform="translate(39844.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(40844.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(41205.7,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(41781.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(42126.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(42595.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[17]||(a[17]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"d"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"a"),t("mi",{mathvariant:"normal"},"访"),t("mi",{mathvariant:"normal"},"问"),t("mi",{mathvariant:"normal"},"该"),t("mi",{mathvariant:"normal"},"响"),t("mi",{mathvariant:"normal"},"应"),t("mi",{mathvariant:"normal"},"式"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"象"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"。")]),t("mi",{mathvariant:"normal"},"组"),t("mi",{mathvariant:"normal"},"件"),t("mi",{mathvariant:"normal"},"实"),t("mi",{mathvariant:"normal"},"例"),t("mi",{mathvariant:"normal"},"也"),t("mi",{mathvariant:"normal"},"代"),t("mi",{mathvariant:"normal"},"理"),t("mi",{mathvariant:"normal"},"了"),t("mi",{mathvariant:"normal"},"该"),t("mi",{mathvariant:"normal"},"数"),t("mi",{mathvariant:"normal"},"据"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"象"),t("mi",{mathvariant:"normal"},"上"),t("mi",{mathvariant:"normal"},"所"),t("mi",{mathvariant:"normal"},"有"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"属"),t("mi",{mathvariant:"normal"},"性"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"即"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,"."),t("mi",null,"p"),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"p"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"t"),t("mi",null,"y"),t("mi",{mathvariant:"normal"},"等"),t("mi",{mathvariant:"normal"},"价"),t("mi",{mathvariant:"normal"},"于"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,".")])],-1))]),a[23]||(a[23]=r("data.property。如果使用的是箭头函数，则函数内this将不会指向该组件实例，但仍可以用第一个参数访问实例。以_ 或 $ 开头的属性将不会被组件实例代理，因为它们可能和Vue的内置属性、API方法冲突，也就只能以 this.",-1)),t("mjx-container",F,[(l(),o("svg",R,[...a[18]||(a[18]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1049,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1410,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1939,0)"><g data-mml-node="mo"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(311,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mi" transform="translate(2822.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3273.3,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3758.3,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4261.3,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(4727.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5178.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5539.3,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6029.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(7029.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7390.3,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(7966.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(8311.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(8780.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[19]||(a[19]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"d"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"a"),t("msub",null,[t("mo",null,"."),t("mi",null,"p")]),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"p"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"t"),t("mi",null,"y"),t("mi",{mathvariant:"normal"},"或"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,".")])],-1))]),a[24]||(a[24]=r("data.",-1)),t("mjx-container",U,[(l(),o("svg",N,[...a[20]||(a[20]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1439,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1942,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2408,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2859,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3220,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(5710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(6710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">访</text></g><g data-mml-node="mi" transform="translate(7710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">问</text></g><g data-mml-node="mi" transform="translate(8710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">它</text></g><g data-mml-node="mi" transform="translate(9710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(10710,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(11710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(12710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(13710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">会</text></g><g data-mml-node="mi" transform="translate(14710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(15710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(16710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(17710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">顶</text></g><g data-mml-node="mi" transform="translate(18710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">层</text></g><g data-mml-node="mi" transform="translate(19710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(20710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(21710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">属</text></g><g data-mml-node="mi" transform="translate(22710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(23710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">都</text></g><g data-mml-node="mi" transform="translate(24710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(25710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">该</text></g><g data-mml-node="mi" transform="translate(26710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">提</text></g><g data-mml-node="mi" transform="translate(27710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">前</text></g><g data-mml-node="mi" transform="translate(28710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(29710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(30710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(31710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(32710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">象</text></g><g data-mml-node="mi" transform="translate(33710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(34710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">声</text></g><g data-mml-node="mi" transform="translate(35710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">明</text></g><g data-mml-node="mi" transform="translate(36710,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(37710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">虽</text></g><g data-mml-node="mi" transform="translate(38710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">然</text></g><g data-mml-node="mi" transform="translate(39710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(40710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">论</text></g><g data-mml-node="mi" transform="translate(41710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(42710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(43710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(44710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(45710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">直</text></g><g data-mml-node="mi" transform="translate(46710,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">接</text></g><g data-mml-node="mi" transform="translate(47710,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(48071,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(48647,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(48992,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(49461,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[21]||(a[21]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"p"),t("mi",null,"r"),t("mi",null,"o"),t("mi",null,"p"),t("mi",null,"e"),t("mi",null,"r"),t("mi",null,"t"),t("mi",null,"y"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"方"),t("mi",{mathvariant:"normal"},"式"),t("mi",{mathvariant:"normal"},"访"),t("mi",{mathvariant:"normal"},"问"),t("mi",{mathvariant:"normal"},"它"),t("mi",{mathvariant:"normal"},"们"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"。")]),t("mi",{mathvariant:"normal"},"所"),t("mi",{mathvariant:"normal"},"有"),t("mi",{mathvariant:"normal"},"会"),t("mi",{mathvariant:"normal"},"用"),t("mi",{mathvariant:"normal"},"到"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"顶"),t("mi",{mathvariant:"normal"},"层"),t("mi",{mathvariant:"normal"},"数"),t("mi",{mathvariant:"normal"},"据"),t("mi",{mathvariant:"normal"},"属"),t("mi",{mathvariant:"normal"},"性"),t("mi",{mathvariant:"normal"},"都"),t("mi",{mathvariant:"normal"},"应"),t("mi",{mathvariant:"normal"},"该"),t("mi",{mathvariant:"normal"},"提"),t("mi",{mathvariant:"normal"},"前"),t("mi",{mathvariant:"normal"},"在"),t("mi",{mathvariant:"normal"},"这"),t("mi",{mathvariant:"normal"},"个"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"象"),t("mi",{mathvariant:"normal"},"中"),t("mi",{mathvariant:"normal"},"声"),t("mi",{mathvariant:"normal"},"明"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"虽"),t("mi",{mathvariant:"normal"},"然"),t("mi",{mathvariant:"normal"},"理"),t("mi",{mathvariant:"normal"},"论"),t("mi",{mathvariant:"normal"},"上"),t("mi",{mathvariant:"normal"},"可"),t("mi",{mathvariant:"normal"},"以"),t("mi",{mathvariant:"normal"},"向"),t("mi",{mathvariant:"normal"},"直"),t("mi",{mathvariant:"normal"},"接"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,".")])],-1))]),a[25]||(a[25]=r("data添加新属性，但并不推荐，如果一个属性的值在一开始还获取不到，应当先用 undefined 或是 null 值来占位。data函数的类型如下：",-1))]),a[52]||(a[52]=e('<p><img src="'+h+'" alt=""></p><p><strong>为什么 data 属性是一个函数而不是一个对象？</strong></p><p>首先，data 可以是函数也可以是对象，其中根组件可以是对象或函数，组件只能是函数。因为根实例是单例，不会产生数据污染；组件实例不是单例，为防止多个组件实例之间共用一个 data，产生数据污染，采用函数形式，初始化 data 时会将其作为工厂函数都会返回全新 data 对象。</p><p><strong>props</strong></p><p><strong>computed</strong> 用于声明要在组件实例上暴露的计算属性。该选项接收一个对象，其中键是计算属性的名称，值是一个计算属性getter，或一个具有get和set方法的对象（用于声明可写的计算属性，只在某些特殊场景中可能才需要用到，因为计算属性默认是只读的，避免直接修改计算属性值，尝试修改计算属性时会收到运行时警告）。所有的getters和setters会将它们的this上下文自动绑定为组件实例。如果为计算属性使用的是箭头函数，则函数内this将不会指向该组件实例，但仍可以用第一个参数访问实例。计算属性的 getter 应只做计算而没有任何其他的副作用，不要在 getter 中做异步请求或者更改 DOM。一个计算属性的声明中描述的是如何根据其他值派生一个值。因此 getter 的职责应该仅为计算和返回该值。</p><p>模版中，较长的表达式会让模版变得复杂和难以维护，使用计算属性来描述依赖响应式状态的复杂逻辑，计算属性值会基于其响应式依赖被缓存。一个计算属性仅会在其响应式依赖更新时才重新计算，相比之下，methods方法调用总是会在重渲染发生时再次执行函数。</p><p>computed计算属性的类型如下：</p><p><img src="'+u+'" alt=""></p><p><strong>为什么需要缓存呢？</strong></p><p>假如有一个非常耗性能的计算属性 list，需要遍历一个巨大的数组并做许多计算逻辑，并且可能也有其他计算属性依赖于list。如果没有缓存，会重复且 多余的执行非常多次list的getter！如果确定不需要缓存，也可以使用方法methods代替。</p><p><strong>watch</strong> 用于声明在数据更改时调用的侦听回调。该选项期望接受一个对象，其中键是需要侦听的响应式组件实例属性（通过 data 或 computed 声明的属性），键名也可以是一个简单的由点分隔的路径字符串；值可以直接是相应的回调函数，该回调函数接受被侦听源的新值和旧值，值也可以是methods方法名字符串，值也可以是回调数组，它们将会被逐一调用，值还可以是包含额外选项的对象，额外的选项包含：</p><ol><li>handler：侦听回调函数；</li><li>immediate：在侦听器创建时立即触发回调。第一次调用时，旧值将为 undefined。watch 默认是懒执行的，仅当数据源变化时，才会执行回调。如果需要在创建侦听器时，立即执行一遍回调，即immediate选项设置为true，比如先请求初始数据，然后在相关状态更改时重新请求数据。回调函数的初次执行就发生在 created 钩子之前，因此第一次调用时，data、computed、methods均已可用。</li><li>deep：如果源是对象或数组，则强制深度遍历源，以便在深度变更时触发回调。watch 默认是浅层的，如果是想侦听所有嵌套的变更，则需要深层侦听器，即deep选项设置为true，但是深度侦听需要遍历被侦听对象中的所有嵌套的属性，当用于大型数据结构时，开销很大。因此请只在必要时才使用它，并且要留意性能。</li><li>flush：调整回调的刷新时机。响应式状态的改变，可能会触发 Vue 组件更新和侦听器回调。侦听器回调默认会在Vue组件更新之前被调用。如果想在侦听器回调中能访问被 Vue 更新之后的 DOM，则flush选项需设置为post。</li><li>onTrack / onTrigger：调试侦听器的依赖关系。</li></ol><p>回调函数避免使用箭头函数，因为它们将无法通过 this 访问组件实例。</p><p>侦听器适合在状态变化时执行一些“副作用”（更改 DOM，或是根据异步操作的结果去修改另一处的状态）。</p>',14)),t("p",null,[a[30]||(a[30]=r("Vue支持使用组件实例的 ",-1)),t("mjx-container",_,[(l(),o("svg",$,[...a[26]||(a[26]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(716,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1606,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2039,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(3615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(4615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">即</text></g><g data-mml-node="mi" transform="translate(5615,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5976,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6552,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(6897,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(7366,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g></g></g>',1)])])),a[27]||(a[27]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"w"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"c"),t("mi",null,"h"),t("mi",{mathvariant:"normal"},"方"),t("mi",{mathvariant:"normal"},"法"),t("mi",{mathvariant:"normal"},"即"),t("mi",null,"t"),t("mi",null,"h"),t("mi",null,"i"),t("mi",null,"s"),t("mo",null,".")])],-1))]),a[31]||(a[31]=r("watch命令式地创建侦听器。用 watch 选项或者组件实例的 $watch方法声明的侦听器，会在宿主组件卸载时自动停止，此外组件实例的 $watch方法声明的侦听器支持调用其返回的函数来主动在特定时机（比如组件卸载之前）停止。组件实例的 ",-1)),t("mjx-container",G,[(l(),o("svg",K,[...a[28]||(a[28]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(716,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1245,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1606,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2039,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(3615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">法</text></g><g data-mml-node="mi" transform="translate(4615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">三</text></g><g data-mml-node="mi" transform="translate(6615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(7615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">参</text></g><g data-mml-node="mi" transform="translate(8615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(9615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">分</text></g><g data-mml-node="mi" transform="translate(10615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">别</text></g><g data-mml-node="mi" transform="translate(11615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(12615,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">应</text></g><g data-mml-node="mi" transform="translate(13615,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(14331,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(14860,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(15221,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(15654,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(16230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">选</text></g><g data-mml-node="mi" transform="translate(17230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">项</text></g><g data-mml-node="mi" transform="translate(18230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(19230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">键</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20230,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mi" transform="translate(21230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">回</text></g><g data-mml-node="mi" transform="translate(22230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">调</text></g><g data-mml-node="mi" transform="translate(23230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">函</text></g><g data-mml-node="mi" transform="translate(24230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(25230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(26230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">额</text></g><g data-mml-node="mi" transform="translate(27230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">外</text></g><g data-mml-node="mi" transform="translate(28230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">选</text></g><g data-mml-node="mi" transform="translate(29230,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">项</text></g><g data-mml-node="mi" transform="translate(30230,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g>',1)])])),a[29]||(a[29]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"w"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"c"),t("mi",null,"h"),t("mi",{mathvariant:"normal"},"方"),t("mi",{mathvariant:"normal"},"法"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"三"),t("mi",{mathvariant:"normal"},"个"),t("mi",{mathvariant:"normal"},"参"),t("mi",{mathvariant:"normal"},"数"),t("mi",{mathvariant:"normal"},"分"),t("mi",{mathvariant:"normal"},"别"),t("mi",{mathvariant:"normal"},"对"),t("mi",{mathvariant:"normal"},"应"),t("mi",null,"w"),t("mi",null,"a"),t("mi",null,"t"),t("mi",null,"c"),t("mi",null,"h"),t("mi",{mathvariant:"normal"},"选"),t("mi",{mathvariant:"normal"},"项"),t("mi",{mathvariant:"normal"},"的"),t("mi",{mathvariant:"normal"},"键"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"、")]),t("mi",{mathvariant:"normal"},"回"),t("mi",{mathvariant:"normal"},"调"),t("mi",{mathvariant:"normal"},"函"),t("mi",{mathvariant:"normal"},"数"),t("mi",{mathvariant:"normal"},"和"),t("mi",{mathvariant:"normal"},"额"),t("mi",{mathvariant:"normal"},"外"),t("mi",{mathvariant:"normal"},"选"),t("mi",{mathvariant:"normal"},"项"),t("mi",null,"，")])],-1))]),a[32]||(a[32]=r("watch方法的键还可以是一个getter函数。",-1))]),a[53]||(a[53]=e('<p>组件实例的$watch方法的类型如下：</p><p><img src="'+x+'" alt=""></p><p>watch选项侦听器的类型如下：</p><p><img src="'+v+'" alt=""></p><p><strong>methods</strong> 选项用于声明要混入到组件实例中的方法。声明的方法可以直接通过组件实例访问，或者在模板语法表达式中使用。所有的方法都会将它们的 this 上下文自动绑定为组件实例（vue内部通过this.someMethod = methods.someMethod.bind(this)绑定this为组件实例，由于Function.prototype.bind内部返回的是新函数，因此如果methods.someMethod有上定义属性则使用this.someMethod却无法访问。解决办法是将这类函数放到data选项中定义即可）。在声明方法时避免使用箭头函数，因为它们不能通过 this 访问组件实例。</p><p>methods选项类型如下：</p><p><img src="'+y+'" alt=""></p><h3 id="渲染选项" tabindex="-1">渲染选项 <a class="header-anchor" href="#渲染选项" aria-label="Permalink to &quot;渲染选项&quot;">​</a></h3><p><strong>template</strong> 用于声明组件的字符串模板。通过 template 选项提供的模板将会在运行时即时编译，这仅在使用了包含模板编译器的 Vue 构建版本的情况下支持，文件名中带有 runtime 的 Vue 构建版本未包含模板编译器，例如 vue.runtime.esm-bundler.js。如果该字符串以 # 开头，它将被用作 querySelector 的选择器，并使用所选中元素的 innerHTML 作为模板字符串。这使得能够使用原生 <code>&lt;template&gt;</code> 元素来书写源模板。如果 render 选项也同时存在于该组件中，template 将被忽略。如果应用的根组件不含任何 template 或 render 选项，Vue 将会尝试使用所挂载元素（el）的 innerHTML 来作为模板。而且，无论是render选项返回值还是template选项字符串，都只能是单根的。template选项的类型如下：</p><p><img src="'+b+'" alt=""></p><p><strong>render</strong> 用于编程式地创建组件虚拟 DOM 树的函数。render 是字符串模板template的一种替代，可以利用 JavaScript 的丰富表达力来完全编程式地声明组件最终的渲染输出。预编译的模板，例如单文件组件中的模板，会在构建时被编译为 render 选项。如果一个组件中同时存在 render 和 template，则 render 将具有更高的优先级。render选项的类型如下：</p><p><img src="'+k+'" alt=""></p><h3 id="生命周期选项" tabindex="-1">生命周期选项 <a class="header-anchor" href="#生命周期选项" aria-label="Permalink to &quot;生命周期选项&quot;">​</a></h3><p>生命周期选项的类型定义如下：</p><p><img src="'+M+'" alt=""></p><p><strong>beforeCreate 选项</strong>在组件实例初始化完成之后立即调用。会在实例初始化完成、props 解析之后、处理其他选项（比如data() 和 computed ）之前调用。注意，组合式 API 中的 setup() 钩子会在所有选项式 API 钩子之前调用。</p><p><strong>created 选项</strong>在组件实例处理完所有与状态相关的选项后调用。当这个钩子被调用时，响应式数据、计算属性、方法和侦听器已经设置完成。然而，此时挂载阶段还未开始，因此 $el 属性仍不可用。</p><p><strong>beforeMount 选项</strong>在组件被挂载之前调用。当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程。该钩子在服务端渲染时不会被调用。</p><p><strong>mounted 选项</strong>在组件被挂载之后调用。组件在以下情况下被视为已挂载：</p><ol><li>所有同步子组件都已经被挂载。(不包含异步组件或 <code>&lt;Suspense&gt;</code> 树内的组件)</li><li>其自身的 DOM 树已经创建完成并插入了父容器中。注意仅当根容器在文档中时，才可以保证组件 DOM 树也在文档中。</li></ol><p>这个钩子通常用于执行需要访问组件所渲染的 DOM 树相关的副作用，或是在服务端渲染应用中用于确保 DOM 相关代码仅在客户端被调用。该钩子在服务端渲染时不会被调用。</p><p><strong>beforeUpdate 选项</strong>在组件即将因为一个响应式状态变更而更新其 DOM 树之前调用。可以用来在 Vue 更新 DOM 之前访问 DOM 状态。在这个钩子中更改状态也是安全的。该钩子在服务端渲染时不会被调用。</p><p><strong>updated 选项</strong>在组件因为一个响应式状态变更而更新其 DOM 树之后调用。父组件的updated钩子将在其子组件的updated钩子之后调用。该钩子会在组件的任意 DOM 更新后被调用，这些更新可能是由不同的状态变更导致的。如果需要在某个特定的状态更改后访问更新后的 DOM，请使用 nextTick() 作为替代。该钩子在服务端渲染时不会被调用。不要在 updated 钩子中更改组件的状态，这可能会导致无限的更新循环！</p><p><strong>beforeUnmount 选项</strong>在一个组件实例被卸载之前调用。当这个钩子被调用时，组件实例依然还保有全部的功能。该钩子在服务端渲染时不会被调用。</p><p><strong>unmounted 选项</strong>在一个组件实例被卸载之后调用。一个组件在以下情况下被视为已卸载：</p><ol><li>其所有子组件都已经被卸载。</li><li>所有相关的响应式作用 (渲染作用以及 setup() 时创建的计算属性和侦听器) 都已经停止。</li></ol><p>可以在这个钩子中手动清理一些副作用，例如计时器、DOM 事件监听器或者与服务器的连接。该钩子在服务端渲染时不会被调用。</p><p><strong>errorCaptured 选项</strong>在捕获了后代组件传递的错误时调用。错误可以从以下几个来源中捕获：</p><ol><li>组件渲染</li><li>事件处理器</li><li>生命周期钩子</li><li>setup() 函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡钩子</li></ol><p>钩子带有三个实参：错误对象、触发该错误的组件实例，以及一个说明错误来源类型的信息字符串。可以在 errorCaptured() 中更改组件状态来为用户显示一个错误状态。然而重要的是，不要让错误状态渲染为导致本次错误的内容，否则组件就会进入无限的渲染循环中。该钩子可以通过返回 false 来阻止错误继续向上传递。其错误传递规则如下：</p><ol><li>默认情况下，所有的错误都会被发送到应用级的 app.config.errorHandler (前提是这个函数已经定义)，这样这些错误都能在一个统一的地方报告给分析服务。</li><li>如果组件的继承链或组件链上存在多个 errorCaptured 钩子，对于同一个错误，这些钩子会被按从底至上的顺序一一调用。这个过程被称为“向上传递”，类似于原生 DOM 事件的冒泡机制。</li><li>如果 errorCaptured 钩子本身抛出了一个错误，那么这个错误和原来捕获到的错误都将被发送到 app.config.errorHandler。</li><li>errorCaptured 钩子可以通过返回 false 来阻止错误继续向上传递。即表示“这个错误已经被处理了，应当被忽略”，它将阻止其他的 errorCaptured 钩子或 app.config.errorHandler 因这个错误而被调用。</li></ol><p><strong>renderTracked 选项</strong>在一个响应式依赖被组件的渲染作用追踪后调用。该钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p><p><strong>renderTriggered 选项</strong>在一个响应式依赖被组件触发了重新渲染之后调用。该钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</p><p><strong>activated 选项</strong>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件被插入到 DOM 中时调用。该钩子在服务端渲染时不会被调用。</p><p><strong>deactivated 选项</strong>若组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分，当组件从 DOM 中被移除时调用。该钩子在服务端渲染时不会被调用。</p><p><strong>serverPrefetch 选项</strong>当组件实例在服务器上被渲染之前要完成的异步函数。如果这个钩子返回了一个 Promise，服务端渲染会在渲染该组件前等待该 Promise 完成。该钩子仅会在服务端渲染中执行，可以用于执行一些仅在服务端才有的数据抓取过程。</p><h3 id="其他杂项" tabindex="-1">其他杂项 <a class="header-anchor" href="#其他杂项" aria-label="Permalink to &quot;其他杂项&quot;">​</a></h3><p><strong>name 选项</strong>用于显式声明组件展示时的名称。类型：interface ComponentOptions { name?: string }。组件的name有以下用途：</p><ol><li>在组件自己的模板中递归引用自己时</li><li>在 Vue 开发者工具中的组件树显示时</li><li>在组件抛出的警告追踪栈信息中显示时</li></ol><p>当在使用单文件组件时，组件已经会根据其文件名推导出其名称。当一个组件通过 app.component 被全局注册时，这个全局 ID 就自动被设为了其名称。使用 name 选项使得可以覆盖推导出的名称，或是在没有推导出名字时显式提供一个。(例如没有使用构建工具时，或是一个内联的非 SFC 式的组件)。</p><h2 id="组合式-api" tabindex="-1">组合式 API <a class="header-anchor" href="#组合式-api" aria-label="Permalink to &quot;组合式 API&quot;">​</a></h2><p><strong>watchEffect()</strong> 立即运行一个副作用函数，同时响应式地追踪其依赖（只能追踪副作用函数内的同步代码的依赖），并在依赖更改时重新执行该副作用函数。watchEffect的类型如下：</p><p><img src="'+w+'" alt=""></p><p>第一个参数就是要运行的副作用函数。这个副作用函数的参数也是一个函数，用来注册清理回调。清理回调会在该副作用下一次执行前被调用，可以用来清理无效的副作用，例如等待中的异步请求。第二个参数是一个可选的选项，可以用来调整副作用的刷新时机或调试副作用的依赖。默认情况下，侦听器将在组件渲染之前执行。设置 flush: &#39;post&#39;或使用函数别名watchPostEffect()将会使侦听器延迟到组件渲染之后再执行。在某些特殊情况下 (例如要使缓存失效)，可能有必要在响应式依赖发生改变时立即触发侦听器。这可以通过设置 flush: &#39;sync&#39; 或使用函数别名watchSyncEffect()来实现。然而，该设置应谨慎使用，因为如果有多个属性同时更新，这将导致一些性能和数据一致性的问题。watchEffect()的返回值是一个用来停止该副作用的函数。</p><p><strong>setup() 钩子</strong>是在组件中使用组合式 API 的入口，使用场景：</p><ol><li>需要在非单文件组件中使用组合式 API 时。而对于在单文件组件中使用的组合式 API，推荐 <code>&lt;script setup&gt;</code>。</li><li>需要在基于选项式 API 的组件中集成基于组合式 API 的代码时。</li></ol><p><strong>setup()</strong> 内可以使用响应式 API来声明响应式的状态。</p><ol><li><strong>setup 函数的第一个参数是组件的 props</strong>，props 是响应式的，并且会在传入新的 props 时同步更新。从props中解构出的变量将会丢失响应性。因此推荐通过 props.xxx 的形式来使用其中的 props。如果确实需要解构 props 对象，或者需要将某个 prop 传到一个外部函数中并保持响应性，那么可以使用 toRefs() 和 toRef() 这两个工具函数。</li><li><strong>setup 函数的第二个参数是一个 Setup 上下文对象 context</strong>，包括attrs, slots, emit, expose四个属性。该上下文对象context是非响应式的，可以安全地解构。 <ol><li><strong>attrs 和 slots</strong> 都是有状态的对象，它们总是会随着组件自身的更新而更新。这意味着应当避免解构它们，并始终通过 attrs.xx 或 slots.xxx 的形式使用其中的属性。attrs 和 slots 的属性都不是响应式的。</li><li><strong>expose 函数</strong>用于显式地限制该组件暴露出的属性，当父组件通过模板引用访问该组件的实例时，将仅能访问 expose 函数暴露出的内容。如果不调用，则setup函数返回对象中的所有属性均会在实例上保留，即可以被父组件通过模板引用的方式访问。如果无参调用expose()，则均不会在实例上保留。而</li></ol></li><li>setup()返回一个对象或只返回一个渲染函数，若是返回对象，则对象的属性会暴露给当前组件中的模板和其他的选项式 API 钩子，该返回对象实际上是以参数$setup传递给本组件的渲染函数，若是返回渲染函数，渲染函数中可以直接使用setup()里在同一作用域下声明的响应式状态，如果需要将setup中的方法通过模板引用的方式暴露给父组件，只能通过 <strong>expose 函数</strong>。而setup() 自身并不含对组件实例的访问权，即在 setup() 中访问 this 会是 undefined。在模板中访问或通过 this 访问从 setup 返回的ref时，ref会被自动浅层解包，因此无须再在模板或选项式API中为它写 .value。setup() 函数应该同步地return，除非该组件是 Suspense 组件的后代才可以使用 async setup()。</li></ol><h2 id="script-setup" tabindex="-1"><code>&lt;script setup&gt;</code> <a class="header-anchor" href="#script-setup" aria-label="Permalink to &quot;`&lt;script setup&gt;`&quot;">​</a></h2><ol><li>defineExpose编译器宏：显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性。因为使用 <code>&lt;script setup&gt;</code> 的组件是默认关闭的——即通过模板引用或者 $parent 链获取到的组件的公开实例，不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。<code>&lt;script setup&gt;</code> 编译结果就是setup()函数且setup()函数内部无参调用expose()。</li></ol><h2 id="代码编译与优化" tabindex="-1">代码编译与优化 <a class="header-anchor" href="#代码编译与优化" aria-label="Permalink to &quot;代码编译与优化&quot;">​</a></h2><p>代码编译是指由 Vue 代码编译生成最终运行代码过程。Vue2的编译流程：</p><ol><li><strong>Parse（解析阶段）</strong>：根据 template （模板）解析出表述 DOM 节点的原始AST（抽象语法树）。</li><li><strong>Optimize（优化阶段）</strong>：遍历AST，对diff时需要跳过的静态节点进行标记，优化runtime的性能。</li><li><strong>Generate（生成阶段）</strong>：把优化后的 AST 树转换成可执行的代码。</li></ol><p>在 Vue 中，框架同时控制着编译器和运行时。这使得可以为紧密耦合的模板渲染器应用许多编译时优化。编译器可以静态分析模板并在生成的代码中留下标记，使得运行时性能提升。<strong>Vue3 的编译优化主要是通过重写虚拟 DOM，包括</strong>：</p><ol><li><strong>更新类型标记</strong>：在对更新的节点进行对比的时候，只会去对比带有特定 PatchFlag 标记的节点。一个元素可以有多个更新类型标记，会被合并成一个数字。运行时渲染器也将会使用位运算来检查这些标记，确定相应的更新操作。更新类型标记和树结构打平都大大提升了 Vue SSR 激活的性能表现。</li></ol><p><img src="'+D+'" alt=""></p><ol start="2"><li><strong>树结构打平</strong>：内部结构是稳定的一个部分可被称之为一个区块（Block，v-if 和 v-for 指令会创建新的区块节点），每一个块都会追踪其所有带更新类型标记的后代节点 (不只是直接子节点)。编译的结果会被打平为一个数组，仅包含所有动态的后代节点。当这个组件需要重渲染时，只需要遍历这个打平的树而非整棵树。这大大减少了在虚拟 DOM 协调时需要遍历的节点数量。模板中任何的静态部分都会被高效地略过。一个子区块会在父区块的动态子节点数组中被追踪。</li><li><strong>静态提升</strong>：将静态的节点或属性（静态节点，即不带任何动态绑定的元素节点）提升到render函数外，避免重新渲染时的再次创建和执行。</li><li><strong>预字符串化</strong>：当有足够多连续的静态元素时，它们还会再被压缩为一个“静态 vnode”（_createStaticVNode方法），其中包含的是这些节点相应的纯 HTML 字符串。这些静态节点会直接通过 innerHTML 来挂载。同时还会在初次挂载后缓存相应的 DOM 节点。如果这部分内容在应用中其他地方被重用，那么将会使用原生的 cloneNode() 方法来克隆新的 DOM 节点，这会非常高效。生成代码的体积减少；减少创建 VNode 的开销；减少内存占用。 <ol><li>20个及以上的连续静态元素</li><li>5个及以上的连续仅具有静态绑定属性的静态元素</li></ol></li><li><strong>缓存事件处理函数</strong>：默认情况下事件被认为是动态变量，所以每次更新视图的时候都会追踪它的变化。但是正常情况下，事件在视图渲染前后，都是同一个事件，基本上不需要去追踪它的变化，因此对事件监听进行了缓存。</li></ol><h2 id="深入响应式系统" tabindex="-1">深入响应式系统 <a class="header-anchor" href="#深入响应式系统" aria-label="Permalink to &quot;深入响应式系统&quot;">​</a></h2><p><strong>响应性</strong>本质上是一种可以使得我们声明式地处理变化的编程范式。 <strong>副作用（effect）简称为作用</strong>，是会更改程序里的状态的函数。 <strong>依赖 (dependency)<strong>是执行作用中读取的变量，所以作用是依赖的</strong>订阅者 (subscriber)</strong>，在依赖变化时调用对应的订阅者。</p><p><strong>whenDepsChange() 函数有如下的任务</strong>：</p><ol><li>当一个变量被读取时进行追踪。</li><li>将读取该变量的副作用设为它的一个订阅者。</li><li>探测一个变量的变化，一个依赖变化后，应该通知其所有订阅了的副作用重新执行。</li></ol><p>原生 JavaScript 没有提供任何机制能做到直接追踪局部变量的读写，但可以追踪对象属性的读写的。JavaScript 中有两种劫持 property 访问的方式：getter / setters 和 Proxies。Vue 2 出于支持旧版本浏览器的限制使用 getter / setters（Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因）。而在 Vue 3 中则使用了 Proxy 来创建响应式对象，仅将 getter / setter 用于 ref。reactive() 的局限性：</p><ol><li>当将一个响应性对象的属性解构为一个局部变量时，响应性就会“断开连接”，因为对局部变量的访问不再触发 get / set 代理捕获。</li><li>从reactive() 返回的代理尽管行为上表现得像原始对象，但通过使用 === 运算符还是能够比较出它们的不同。</li></ol><p>在依赖收集 track() 内部，会检查当前是否有正在运行的副作用。如果有，会查找到一个存储了所有追踪了该属性的订阅者的 Set，然后将当前这个副作用作为新订阅者添加到该 Set 中。副作用订阅将被存储在一个全局的 <code>WeakMap&lt;target, Map&lt;key, Set&lt;effect&gt;&gt;&gt;</code> 数据结构中。如果在第一次追踪时没有找到对相应属性订阅的副作用集合，它将会在getSubscribersForProperty() 函数中新建。</p><p>在派发更新 trigger() 之中，会再通过getSubscribersForProperty() 查找到该属性的所有订阅副作用。</p><p>whenDepsChange()它将订阅者函数包装在了一个副作用函数中。在运行实际的更新之前，这个副作用函数会将自己设为当前活跃的副作用。这使得在更新期间的 track() 调用都能定位到这个当前活跃的副作用。</p><p>组合式 API 更贴近 Vue 底层的响应式系统。事实上，Vue 3 中的选项式 API 正是基于组合式 API 建立的。对该组件实例 (this) 所有的属性访问都会触发 getter / setter 的响应式追踪，而像 watch 和 computed 这样的选项也是在内部调用相应等价的组合式 API。</p><p><strong>Vue2 中的响应式原理</strong>：每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。可以在数据变化之后立即使用 Vue.nextTick(callback)，callback中Vue 已完成更新 DOM。</p><p><strong>nextTick 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。对于实现 macrotasks ，会先判断是否能使用 setImmediate ，不能的话降级为 MessageChannel ，以上都不行的话就使用 setTimeout</strong>。</p><p><img src="'+H+'" alt=""></p><p><img src="'+L+'" alt=""></p><p>响应式数据的最终目标是当对象本身或属性发生变化时，将会运行一些函数（render，computed，watch）。具体实现上，Vue用到了几个核心部件：</p>',72)),t("ol",null,[t("li",null,[a[35]||(a[35]=t("strong",null,"Observer",-1)),a[36]||(a[36]=r("：目标是要将一个普通对象转换成响应式对象，递归的遍历对象所有属性，通过Object.defineProperty转换为访问器属性（getter和setter），发生在组件的生命周期的beforeCreate之后，created之前。由于Observer是Vue内部的构造器，但Vue提供Vue.observable(obj)间接使用该功能。由于遍历只能针对对象已有属性，因此无法追踪将来直接进行动态增加或删除属性，但提供",-1)),t("mjx-container",W,[(l(),o("svg",X,[...a[33]||(a[33]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(935,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1296,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g>',1)])])),a[34]||(a[34]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"s"),t("mi",null,"e"),t("mi",null,"t"),t("mi",{mathvariant:"normal"},"和")])],-1))]),a[37]||(a[37]=r("delete两个实例方法对已有响应式对象添加或删除属性并能具有响应式。对于数组则修改其隐式原型（",-1)),a[38]||(a[38]=t("strong",null,"proto",-1)),a[39]||(a[39]=r("）为Vue自己定义的对象（覆盖重写了可能改变数组内容的pop、push、reverse、shift、unshift、sort方法），此对象的隐式原型才是Array.prototype。",-1))]),a[40]||(a[40]=e("<li><strong>Dep</strong>：即依赖（dependency），目标是解决读取属性时和属性变化时要做什么事情。Vue会为响应式对象的每个属性、对象本身、数组本身创建一个Dep实例来负责当读取响应式对象的某个属性时进行<strong>依赖收集（dep.depend()）<strong>和当改变某个属性时进行</strong>派发更新（dep.notify()）</strong>。</li><li><strong>Watcher</strong>：解决如何知道哪些函数在使用依赖的问题。默认响应式对象是无法知道哪个函数在使用它。Vue不是直接执行函数，而是创建一个watcher对象去执行。watcher会设置一个全局变量，让全局变量记录当前负责执行的watcher等于自己，然后再去执行函数，在函数执行过程中，如果发生了依赖收集 dep.depend()，在 <strong>dep.depend() 中就可以记录全局变量指向的当前 watcher。而当改变该属性时派发更新dep.notify() 里就会通知之前记录的所有 watcher</strong>。因此，每个vue组件实例至少对应一个记录该组件的render函数的watcher。watcher首先会运行一次render以收集依赖，当数据变化时，dep会通知该watcher重新运行render函数，从而界面重新渲染同时记录当前依赖。</li><li><strong>Scheduler</strong>：解决watcher收到Dep的派发更新的通知后watcher如何执行函数的问题，避免相同watcher被频繁通知运行。watcher收到派发更新的通知后，不是立即执行其对应函数，而是将自己交给scheduler调度器，scheduler维护一个执行队列，队列中的watcher会通过一个nextTick的方法将执行这些watcher的包装函数放入事件循环的微队列中（考虑兼容性，如果不支持微队列，则setTimeout）。因此，首次render执行是同步的，而当派发更新时，render执行是异步的。</li>",3))]),a[54]||(a[54]=e('<p>Vue2中，由于 JavaScript 的限制，Vue 不能检测数组和对象的某些变化：</p><ol><li>Vue无法检测property的添加或移出。因为 Vue 会在初始化实例时对 property 执行 getter/setter 转化，所以 property 必须在 data 对象上存在才能让 Vue 将它转换为响应式的。对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property，因此必须在初始化实例前声明所有根级响应式 property，哪怕只是一个空值。但是，可以使用 Vue.set(object, propertyName, value) 方法或vm.$set 实例方法向嵌套对象添加响应式 property。如果需要需要为已有对象赋值多个新 property，应该用原对象与要混合进去的对象的 property 一起创建一个新的对象并赋值给原对象变量。</li><li>Vue 不能检测以下数组的变动： <ol><li>当利用索引直接设置一个数组项时。可以使用 Vue.set(object, propertyName, value) 方法或vm.$set 实例方法或vm.items.splice(indexOfItem, 1, newValue)来达到响应式更新。</li><li>当修改数组的长度时。可以使用vm.items.splice(newLength)来达到响应式更新。</li></ol></li></ol><h2 id="渲染机制" tabindex="-1">渲染机制 <a class="header-anchor" href="#渲染机制" aria-label="Permalink to &quot;渲染机制&quot;">​</a></h2><p>虚拟 DOM (Virtual DOM，简称 VDOM) 是一种编程概念，意为将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，然后将真实的 DOM 与之保持同步。vnode 即一个纯 JavaScript 的对象 (一个“虚拟节点”)，它包含我们创建实际元素所需的所有信息。它还包含更多的子节点，这使它成为虚拟 DOM 树的根节点。组件树中每个组件都有render函数，每个render函数返回一个虚拟DOM树。</p><p>虚拟 DOM 带来的主要收益是它让开发者能够灵活、声明式地创建、检查和组合所需 UI 的结构，同时只需把具体的 DOM 操作留给渲染器去处理。</p><p><strong>为什么需要虚拟DOM？优点：</strong></p><ol><li>框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</li><li>无需手动操作 DOM，专注数据视图，开发效率提升</li><li>操作JS对象而不是DOM与平台不再强相关，方便跨平台。</li></ol><p><strong>缺点</strong>：无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求。但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。</p><p><strong>Vue 组件挂载时的渲染管线</strong>：</p><p><strong>编译（complie）</strong>：Vue 模板被编译（compile模块）为渲染函数：即用来返回虚拟 DOM 树的函数；既可以通过构建步骤提前完成（模板预编译，能有效提高运行时性能和减少运行时文件体积，即vue-cli默认配置下，发生在打包时，而且在vue-cli中如果组件中同时有模板和render函数，模板生成的render会覆盖定义的render），也可以通过使用<strong>运行时编译器</strong>（传入的引入方式或vue-cli的配置中开启runtimeCompiler）即时（第一次加载时）完成。编译的过程分为两步：</p><ol><li>将模板字符串转换为AST；</li><li>将AST转换为渲染函数。</li></ol><p><strong>挂载（mount）</strong>：<strong>运行时渲染器</strong>调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点，每个虚拟DOM节点将对应的真实的DOM节点作为其属性一一对应（因此，实际上挂载时，由于借助虚拟DOM相比直接生成真实DOM多了生成虚拟DOM的操作，效率更低）。这会作为响应式副作用执行，因此它会追踪其中所用到的所有响应式依赖。</p><p><strong>更新</strong>：当一个依赖发生变化后，副作用会重新运行，这时候会render函数创建一个更新后的虚拟 DOM 树。运行时渲染器遍历这棵新树，将它与旧树进行比较，找到新树中的最小更新量，抛弃旧树，然后将必要的更新应用到真实 DOM 上去，即 <strong>patch</strong>，又被称为“<strong>比对</strong>”<strong>(diffing)</strong> 或“<strong>协调</strong>”<strong>(reconciliation)</strong>。</p><p><img src="'+V+'" alt=""></p><p>Vue 模板会被预编译成虚拟 DOM 渲染函数。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。渲染函数一般只会在需要处理高度动态渲染逻辑的可重用组件中使用，渲染函数更加灵活，因为可以完全地使用 JavaScript 来构造想要的 vnode。因此，Vue 默认推荐使用模板的原因：</p><ol><li>模板更贴近实际的 HTML。能够更方便地重用一些已有的 HTML 代码片段，能够带来更好的可访问性体验、能更方便地使用 CSS 应用样式，并且更容易使开发者理解和修改。</li><li>由于其确定的语法，更容易对模板做静态分析。使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现。</li></ol><p><strong>虚拟DOM算法实现</strong>：</p><ol><li>将DOM 抽象成JS对象（用 JavaScript 对象来表示 DOM 节点，使用对象的属性记录节点的类型、属性、子节点等）</li><li>对比两个虚拟DOM树的差异并更新真实DOM（考虑到在实际业务中很少会去跨层的移动 DOM 元素，因此只对比同层的节点，时间复杂度从 O(n^3)降到O(n)）。</li></ol><p><strong>diff算法</strong>：updateComponent函数分别会在组件创建时直接运行，以及在依赖发生变化时通过new Watcher运行，该函数内部：</p><ol><li>调用this._render生成新的虚拟DOM树</li><li>调用this._update，将（1）中生成的新的虚拟DOM树传入，diff就发生在this._update函数运行过程中。首先通过当前组件的this._vnode属性拿到旧的虚拟DOM树保存到为变量oldVNode，然后将this._vnode属性赋值为新的虚拟DOM树。然后判断oldVNode是否存在： <ol><li>不存在：说明是首次渲染组件，于是直接通过this.__patch__函数，遍历新的虚拟DOM树，为每个节点生成真实DOM，并挂载到每个虚拟DOM节点的elm属性上。</li><li>存在：说明是更新渲染组件，于是通过this.__patch__函数对比新旧树，完成对所有真实DOM的最小化处理，让新树的虚拟DOM节点对应合适的真实DOM。</li></ol></li><li>__patch__函数的对比流程： <ol><li>术语解释： <ol><li><strong>相同</strong>：是指两个节点的标签tag类型、key值均相同，input元素还需要看type属性。</li><li><strong>新建元素</strong>：是指根据一个虚拟节点提供的信息，创建一个真实DOM元素，同时挂载到虚拟节点的elm属性上。</li><li><strong>销毁元素</strong>：是指vnode.elm.remove()。</li><li><strong>更新</strong>：是指对两个虚拟节点进行对比更新，它仅发生在两个虚拟节点相同的情况下。</li><li><strong>对比子节点</strong>：是指对两个虚拟节点的子节点进行对比。</li></ol></li><li>__patch__函数首先对根节点比较（按深度优先，同级比较）： <ol><li><strong>相同</strong>，进入<strong>更新</strong>流程，递归更新完成后将： <ol><li>将旧虚拟节点的真实DOM赋值到新虚拟节点：newVnNode.elm = oldVnode.elm；</li><li>对比新节点和旧节点的属性，有变化的更新到真实DOM中；</li><li>当前两个节点处理完毕，开始<strong>对比子节点</strong>，原则是尽量不改，否则尽量仅改动元素属性，否则尽量移动元素，否则才是删除和创建元素。 <ol><li>分别使用两个指针指向新子节点数组两端和旧子节点数组的两端。</li><li>在新头指针小于等于新尾指针的前提下，循环的按照<strong>新头指针-旧头指针，新尾指针-旧尾指针，新头指针-旧尾指针，新尾指针-旧头指针，以新头指针为基准循环旧头指针到旧尾指针之间</strong>5种情况依次对比新旧子节点数组的对应的节点。当前情况不同，才看下一种情况，如果<strong>以新头指针为基准循环旧头指针到旧尾指针之间</strong>都找不到<strong>相同</strong>，才新建元素。<strong>任何一种情况</strong> <strong>相同</strong>，则该情况进入和根节点相同的对比流程，直到指针对应的新旧子树递归对比完毕。<strong>如果是新头指针-旧尾指针</strong>，则需要移动真实DOM的位置到旧头指针的前面。<strong>如果是新尾指针-旧头指针</strong>，则需要移动真实DOM的位置到旧尾指针对应的真实DOM的后面。<strong>以新头指针为基准循环旧头指针到旧尾指针之间</strong>，则需要移动真实DOM的位置到旧头指针的前面。然后将该情况下的头指针则后移，尾指针则前移。</li><li>新头指针大于新尾指针，则循环结束，旧子节点数组中剩余的节点应该被删除，其对应的真实dom也应被移除。</li></ol></li></ol></li><li><strong>不相同</strong><ol><li>新虚拟节点<strong>递归</strong>地<strong>新建元素</strong>；因此，对于tag相同情况下，如果re-render前后真实DOM需要不变则应该保证提供相同的key，真实DOM需要改变应该保证提供不同的key。</li><li>旧虚拟节点<strong>销毁元素</strong>。</li></ol></li></ol></li></ol></li></ol><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><p>永远不要过早优化。</p><ol><li><strong>使用key</strong>：对于通过循环生成的列表，应给每个列表项一个稳定且唯一的key，有利于在列表变动时，尽量少的删除、新增、改动元素。</li><li><strong>使用v-show代替v-if</strong>：对于频繁切换显示状态的元素，尤其是内部包含大量dom的元素，使用v-show保证虚拟DOM树的稳定，避免频繁的新增与删除元素。</li><li><strong>使用冻结的对象</strong>：冻结的对象不会被响应化。浅层式 API （shallowRef() 和 shallowReactive() ）创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理。</li><li><strong>使用函数式组件</strong>。</li><li><strong>使用计算属性</strong>：如果模板中的某个数据会使用多次，并且该数据是通过计算得到的，使用计算属性以缓存它们。</li><li><strong>使用表单项非实时绑定</strong>：v-model是实时绑定，即只要改变表单项状态，数据就会更改，导致re-render。可以使用lazy修饰符或直接不适用v-model来解决。但也就无法享受数据与表单项实时一致的好处。</li><li><strong>保持属性对象引用稳定</strong>：vue判断数据是否变化通过 !Object.is(x, y)。因此，只要保证组件依赖的数据不发生变化，就不会re-render。对于原始数据类型，保持其值不变即可；对于对象类型，保持其引用不变即可。</li><li><strong>使用延迟装载（defer）</strong>：延迟装载组件，让组件按照指定的顺序依次渲染出来，本质上是利用requestAnimationFrame事件分批渲染内容。</li><li><strong>使用 <code>&lt;keep-alive&gt;</code></strong>：在多个组件间动态切换时缓存被移除的组件实例。</li><li><strong>大型虚拟列表</strong>：通过列表虚拟化，只需要渲染可见部分。</li><li><strong>包体积与 Tree-shaking 优化</strong>：即压缩 JavaScript 打包产物的体积，尽可能采用构建步骤 <ol><li>vue的api是可以被tree shaking的</li><li>模板预编译可以减少Vue编译器的体积（均开启gzip时可以缩小14kb）。</li><li>尽量选择对tree shaking更友好的ES模块格式的依赖。</li></ol></li><li><strong>代码分割</strong>：指构建工具将构建后的 JavaScript 包拆分为多个较小的，可以按需或并行加载的文件。打包工具（Rollup（vite基于它）或webpack）可以通过分析 ESM 动态导入的语法来自动进行代码分割。使用异步组件配合动态导入进行组件懒加载，甚至使用异步组件作为路由组件。</li></ol><h2 id="实现双向数据绑定" tabindex="-1">实现双向数据绑定 <a class="header-anchor" href="#实现双向数据绑定" aria-label="Permalink to &quot;实现双向数据绑定&quot;">​</a></h2><p><img src="'+S+'" alt=""></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><h3 id="组件间通信" tabindex="-1">组件间通信 <a class="header-anchor" href="#组件间通信" aria-label="Permalink to &quot;组件间通信&quot;">​</a></h3><p>组件间的通信方式分为三种：隔代通信（A与C/D）、兄弟通信（C与D）、父子通信（A与B）</p><p><img src="'+z+'" alt=""></p><p>方式1：父组件A通过props的方式向子组件B传递数据，子组件B通过$emit事件向父组件A传递数据，然后在A中以 v-on（缩写是 @） 的方式接收（组件中的数据共有三种形式：data、props、computed）。<strong>此方法无法兄弟通信</strong>。</p>',30)),t("p",null,[a[43]||(a[43]=r("方式2：利用一个空的Vue实例作为事件中心，任一组件通过",-1)),t("mjx-container",Y,[(l(),o("svg",t1,[...a[41]||(a[41]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1344,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1689,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">传</text></g><g data-mml-node="mi" transform="translate(3050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">递</text></g><g data-mml-node="mi" transform="translate(4050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(5050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">据</text></g><g data-mml-node="mi" transform="translate(6050,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(7050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">另</text></g><g data-mml-node="mi" transform="translate(8050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(9050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">组</text></g><g data-mml-node="mi" transform="translate(10050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">件</text></g><g data-mml-node="mi" transform="translate(11050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">使</text></g><g data-mml-node="mi" transform="translate(12050,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g></g></g>',1)])])),a[42]||(a[42]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"e"),t("mi",null,"m"),t("mi",null,"i"),t("mi",null,"t"),t("mi",{mathvariant:"normal"},"传"),t("mi",{mathvariant:"normal"},"递"),t("mi",{mathvariant:"normal"},"数"),t("mi",{mathvariant:"normal"},"据"),t("mi",null,"，"),t("mi",{mathvariant:"normal"},"另"),t("mi",{mathvariant:"normal"},"一"),t("mi",{mathvariant:"normal"},"组"),t("mi",{mathvariant:"normal"},"件"),t("mi",{mathvariant:"normal"},"使"),t("mi",{mathvariant:"normal"},"用")])],-1))]),a[44]||(a[44]=r("on接收数据。",-1)),a[45]||(a[45]=t("strong",null,"适用于三种通信方式",-1)),a[46]||(a[46]=r("。但对于大型项目更好的状态管理解决方案vuex。由于有时不确定何时会触发事件，接收方一般应在mounted 或 created中监听。",-1))]),a[55]||(a[55]=e('<p>方式3：在 vuex 里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state。<strong>可支持三种通信方式</strong>。</p><p>方式4：在父组件中在子组件上进行ref引用，然后在父组件中使用this.$ref访问子组件的数据，如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例。<strong>此方法无法隔代和兄弟通信，而且单独使用仅单向（访问子组件的数据）</strong>。</p><p>方式5：祖先组件中通过provider来提供变量，然后在所有的子孙后代组件中通过inject来注入变量。解决的是隔代通信的问题，使用场景主要是子组件获取祖先组件的状态，隔代组件间建立了一种主动提供与依赖注入的关系。</p><h3 id="vue3-和-vue2-的区别" tabindex="-1">Vue3 和 Vue2 的区别 <a class="header-anchor" href="#vue3-和-vue2-的区别" aria-label="Permalink to &quot;Vue3 和 Vue2 的区别&quot;">​</a></h3><ol><li>proxy 代替 Object.definePrototety 实现响应式系统：Object.defineProperty只能对属性进行劫持，因此需要深度遍历对象，同时Object.defineProperty无法对数组做监听变化（只是不能监听新添加的元素，同时每项监听性能不佳），Vue2中取而代之的是使用hack 的办法做替代。Proxy返回代理对象，可以直接监听对象和数组的变化，而且如果子属性是对象的，只需要在读取到该属性时才将其变成子代理对象。</li><li>TypeScript 代替 Flow 进行类型检查；</li><li>重构了目录结构，将代码主要分成三个独立的模块，更利于长期维护；</li><li>重写 VDOM，优化编译性能；</li><li>支持 Tree Shaking；</li><li>增加了组合式（Composition）API（setup），让代码更易于维护；</li><li>异步组件需要 defineAsyncComponent 方法来创建；</li><li>v-if 优先级高于 v-for；</li><li>destroyed 生命周期选项被重命名为 unmounted；</li><li>beforeDestroy 生命周期选项被重命名为 beforeUnmount；</li><li>render 函数默认参数 createElement 移除改为全局引入；</li><li>组件事件现在需要在 emits 选项中声明。</li><li>通过<strong>响应式系统重写</strong>、<strong>编译优化</strong>和<strong>源码体积优化</strong>（按需加载）三个方面提升性能。</li></ol><h2 id="vue-loader" tabindex="-1">Vue-loader <a class="header-anchor" href="#vue-loader" aria-label="Permalink to &quot;Vue-loader&quot;">​</a></h2><h2 id="vuex" tabindex="-1">Vuex <a class="header-anchor" href="#vuex" aria-label="Permalink to &quot;Vuex&quot;">​</a></h2><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p><p><img src="https://vuex.vuejs.org/zh/" alt="Vuex官网"></p><h2 id="vuerouter" tabindex="-1">VueRouter <a class="header-anchor" href="#vuerouter" aria-label="Permalink to &quot;VueRouter&quot;">​</a></h2><p><img src="https://router.vuejs.org/zh/guide/advanced/lazy-loading.htm" alt="路由懒加载"></p><p>base属性：是基准路径，它被预置到每个 URL 上。这允许在一个域名子文件夹中托管 SPA（比如，将 base 设置为 /sub-folder 使得其托管在 example.com/sub-folder）。</p><h2 id="vue-cli" tabindex="-1">Vue-cli <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;Vue-cli&quot;">​</a></h2><p>publicPath：部署应用包时的基本 URL。默认情况下，Vue CLI 会假设应用是被部署在一个域名的根路径上，例如 <a href="https://www.my-app.com/%E3%80%82%E5%A6%82%E6%9E%9C%E5%BA%94%E7%94%A8%E8%A2%AB%E9%83%A8%E7%BD%B2%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84%E4%B8%8A%EF%BC%8C%E4%BD%A0%E5%B0%B1%E9%9C%80%E8%A6%81%E7%94%A8%E8%BF%99%E4%B8%AA%E9%80%89%E9%A1%B9%E6%8C%87%E5%AE%9A%E8%BF%99%E4%B8%AA%E5%AD%90%E8%B7%AF%E5%BE%84%EF%BC%88%E6%AF%94%E5%A6%82%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%BA%94%E7%94%A8%E8%A2%AB%E9%83%A8%E7%BD%B2%E5%9C%A8" target="_blank" rel="noreferrer">https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径（比如，如果应用被部署在</a> <a href="https://www.my-app.com/my-app/%EF%BC%8C%E5%88%99%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">https://www.my-app.com/my-app/，则设置</a> publicPath 为 /my-app/）。这个值也可以被设置为空字符串 (&#39;&#39;) 或是相对路径 (&#39;./&#39;)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径，也可以用在类似 Cordova hybrid 应用的文件系统中。但相对路径的 publicPath 有一些使用上的限制。当使用基于 HTML5 history.pushState 的路由时或者当使用 pages 选项构建多页面应用时，应当避免使用相对 publicPath。publicPath在在开发环境下同样生效。</p>',14))])}const m1=n(C,[["render",a1]]);export{s1 as __pageData,m1 as default};
