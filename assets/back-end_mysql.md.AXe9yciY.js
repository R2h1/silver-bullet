import{_ as a,o as t,c as e,R as r}from"./chunks/framework.OLpLg_fz.js";const s="/silver-bullet/assets/1.-RTNCAw8.png",o="/silver-bullet/assets/2.L95ZmUqK.png",u=JSON.parse('{"title":"MySQL","description":"","frontmatter":{},"headers":[],"relativePath":"back-end/mysql.md","filePath":"back-end/mysql.md","lastUpdated":1712402870000}'),n={name:"back-end/mysql.md"},l=r('<h1 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h1><h2 id="基础架构" tabindex="-1">基础架构 <a class="header-anchor" href="#基础架构" aria-label="Permalink to &quot;基础架构&quot;">​</a></h2><p><img src="'+s+'" alt=""></p><p>整个MySQL Server即划分为<strong>连接层</strong>（连接处理和管理、授权认证、及相关的安全方案——TCP连接、身份验证）、<strong>服务层</strong>（完成缓存的查询，SQL的分析（词法分析）和<strong>优化</strong>（确定索引使用与否以及使用什么索引），<strong>部分内置函数的执行</strong>（存储过程和函数等）。）、<strong>引擎层</strong>（负责了MySQL中数据的存储和提取，支持插件式的使用引擎）和<strong>存储层</strong>（将数据存储在文件系统之上，并完成与存储引擎的交互）。</p><p><strong>如图</strong>，细化为连接池组件、管理服务和工具组件、SQL接口组件、查询分析器组件优化器组件、缓冲池组件、存储引擎、文件系统。</p><p>因此 <strong>MySQL 查询的过程</strong>如下：</p><p><img src="'+o+'" alt=""></p><p>查询缓存即对已执行过的查询sql语句进行存储（对于频繁更新的应用，缓存失效很快）。 query_cache_type 设置成为DEMAND，即不使用缓存。</p><p>SQL_CACHE 和 SQL_NO_CACHE 放在 select 语句中来指定查询语句是否用缓存。</p><h2 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h2><h2 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h2><h2 id="存储过程和函数" tabindex="-1">存储过程和函数 <a class="header-anchor" href="#存储过程和函数" aria-label="Permalink to &quot;存储过程和函数&quot;">​</a></h2><h2 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h2>',13),i=[l];function c(h,d,_,p,m,g){return t(),e("div",null,i)}const b=a(n,[["render",c]]);export{u as __pageData,b as default};
