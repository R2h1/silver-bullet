import{_ as s,o as i,c as a,R as n}from"./chunks/framework.buEibnTs.js";const l="/silver-bullet/assets/173.-29YkD-Q.png",t="/silver-bullet/assets/174.L6FtlHjl.png",e="/silver-bullet/assets/175.llKjtng1.png",h="/silver-bullet/assets/176.KRgvsTc1.png",p="/silver-bullet/assets/177.BwLW9_dV.png",k="/silver-bullet/assets/178.5O0L_Xtd.png",r="/silver-bullet/assets/179.fgUDn8JM.png",D="/silver-bullet/assets/180.G5uTpc4K.png",d="/silver-bullet/assets/181.FrLi1aVT.png",o="/silver-bullet/assets/182.w4XY55q1.png",g="/silver-bullet/assets/183.13DyO5hm.png",c="/silver-bullet/assets/184.wpwXJBWl.png",y="/silver-bullet/assets/185.M_2k-lOZ.png",C="/silver-bullet/assets/186.B9EZ2dHA.png",x=JSON.parse('{"title":"手写实现相关","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/basics/javascript/handwrite.md","filePath":"front-end/basics/javascript/handwrite.md","lastUpdated":1711372818000}'),m={name:"front-end/basics/javascript/handwrite.md"},b=n('<h1 id="手写实现相关" tabindex="-1">手写实现相关 <a class="header-anchor" href="#手写实现相关" aria-label="Permalink to &quot;手写实现相关&quot;">​</a></h1><h3 id="深拷贝-deepcopy" tabindex="-1">深拷贝（deepCopy） <a class="header-anchor" href="#深拷贝-deepcopy" aria-label="Permalink to &quot;深拷贝（deepCopy）&quot;">​</a></h3><p><strong>对象浅拷贝可用 Object.assign,或展开运算符...，数组的浅拷贝可以使用slice和concat，而对象或数组的深拷贝简单场景可使用JSON.parse(JSON.stringify(object))解决</strong>（缺陷是：</p><ol><li>会忽略 undefined</li><li>会忽略 symbol</li><li>不能序列化函数即无法拷贝函数</li><li>不能解决循环引用的对象 5.无法拷贝特殊对象RegExp, Date, Set, Map）。</li></ol><p><img src="'+l+'" alt=""></p><h3 id="数组扁平化-flatten" tabindex="-1">数组扁平化（flatten） <a class="header-anchor" href="#数组扁平化-flatten" aria-label="Permalink to &quot;数组扁平化（flatten）&quot;">​</a></h3><p>数组扁平化是指将多维数组转化为一维数组（可以直接写在Array.prototype上）。</p><p><strong>扁平化二维数组</strong>：</p><p><img src="'+t+'" alt=""></p><p><strong>扁平化更高维度数组</strong>：</p><p><img src="'+e+'" alt=""></p><h3 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h3><p><img src="'+h+'" alt=""></p><h3 id="循环打印红黄绿" tabindex="-1">循环打印红黄绿 <a class="header-anchor" href="#循环打印红黄绿" aria-label="Permalink to &quot;循环打印红黄绿&quot;">​</a></h3><p>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</p><p><img src="'+p+'" alt=""></p><h3 id="每隔一秒打印-0-1-2-3-4" tabindex="-1">每隔一秒打印 0，1，2，3，4 <a class="header-anchor" href="#每隔一秒打印-0-1-2-3-4" aria-label="Permalink to &quot;每隔一秒打印 0，1，2，3，4&quot;">​</a></h3><p><img src="'+k+`" alt=""></p><h3 id="实现图片懒加载" tabindex="-1">实现图片懒加载 <a class="header-anchor" href="#实现图片懒加载" aria-label="Permalink to &quot;实现图片懒加载&quot;">​</a></h3><p><strong>实现思路</strong>：</p><ol><li>页面放置img标签元素；</li><li>初始化img标签 data-src =真实图片地址，同时设置alt, width, height以及,默认的src （代替的小图片）；</li><li>JavaScript判断img元素是否出现在窗口内，是则设置src = data-src。</li></ol><p><strong>方式一</strong>：</p><ol><li>document.documentElement.clientHeight || window.innerHeight 获取可视窗口的高度，两者区别在于前者除去滚动条的高度，也是为了浏览器之间兼容</li><li>document.documentElement.scrollTop || document.body.scrollTop 获取根元素滚动的距离，（或者使用只读属性window.pageXOffset/pageYOffset ）</li><li>element.offsetTop 获取元素对于其 offsetParent 元素的顶部内边距的距离。</li></ol><p><strong>注意</strong>：offsetParent是指向<strong>包含层级上最近的包含该元素</strong>的<strong>定位元素（position：absolute/relative/fixed）<strong>或者</strong>最近的 table,td,th,body元素</strong>。当元素的 style.display 设置为 &quot;none&quot; 时，offsetParent 返回 null。如果元素存在fixed定位，offsetParent为null（firefox浏览器例外是body），因为fixed定位的元素包含层级的父元素为null（firefox为body）。 补充：</p><p>JavaScript操作页面的坐标系分为页面坐标（自称为pageY/pageX）和窗口坐标（自clientY/clientX），分别相对于文档左上角和可视窗口左上角。</p><p><strong>获取文档完整高度/宽度</strong>： Math.max(document.body.scrollHeight/width,document.documentElement.scrollHeight/width,document.body.offsetHeight/width,document.documentElement.offsetHeight/width,document.body.clientHeight/width,document.documentElement.clientHeight/width ); JavaScript操作页面滚动须等 DOM 完全构建好：</p><ol><li>方法 scrollBy(x,y) 将页面滚动至相对于当前位置的 (x, y) 位置；</li><li>方法 scrollTo(x-coord, y-coord) 将页面滚动至相对调用对象（element或window）的左上角的指定坐标位置；或scrollTo(options)，其中包含以下参数的字典： <ol><li>top指定沿 Y 轴滚动窗口或元素的像素数。</li><li>left指定沿 X 轴滚动窗口或元素的像素数。</li><li>behavior确定滚动是即时的还是平滑的动画。此选项是一个字符串，必须采用以下值之一： <ol><li>smooth：滚动动画应该流畅</li><li>instant：滚动应该在一次跳跃中立即发生</li><li>auto：滚动行为由scroll-behavior计算值决定</li></ol></li></ol></li><li>方法element.scrollIntoView(top) 将element元素滚动至窗口顶部（top=true）或底部（top=false）；</li><li>方法element.style.overflow = &quot;hidden&quot;，禁止element的滚动（使用时配合padding来防止滚动条消失页面抖动）</li></ol><p>document.elementFromPoint(x, y)：返回当前文档上处于指定坐标（相对于窗口左上角可见区域的坐标，否则返回null）位置最顶层的元素。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 在img元素定位不是fixed的情况下且display不为none且不是table,td,th 的子元素的时候适用</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 3 - 2 &lt; 1 的时候，元素在可视区域</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">let</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> windowVisibleHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">documentElement</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">clientHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> || </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">innerHeight</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">let</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> documentScrollHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">documentElement</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">scrollTop</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> || </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">body</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">scrollTop</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">let</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> elTopToDocument</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">offsetTop</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">elTopToDocument</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> === </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">null</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">throw</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> new</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> Error</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(’</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">the</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> position</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> of</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> element</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> is</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> non</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">-</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">compliant</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">’)</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> elTopToDocument</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> - </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">documentScrollHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt; </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">windowVisibleHeight</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> lazyLoadImg</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">        element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">dataset</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>方式二</strong>：</p><p>那么<strong>相对于文档左上角坐标</strong>：pageY/pageX = clientY / clientX + 文档的垂直/水平滚动出的部分的高度/宽度。clientY / clientX 由getBoundingClientRect()获得。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">    let</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> windowVisibleHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">documentElement</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">clientHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> || </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">innerHeight</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">getBoundingClientRect</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">().</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">top</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt;= </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">windowVisibleHeight</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> + </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">50</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> lazyLoadImg</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">isVisible</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">        element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">dataset</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>方式三</strong>：IntersectionObserver异步自动观察元素是否在视口内</p><ol><li>new IntersectionObserver(callback[, options])</li><li>callback是当元素可见比例超过指定阈值调用的回调函数，回调函数接受两个参数： <ol><li>entries：与root可视区域的交叉状态描述IntersectionObserverEntry对象（对象的target即被观察者）构成的数组</li><li>observer：被调用的IntersectionObserver实例，注意这不是被观察者，而是观察者。</li></ol></li><li>options是配置observer实例的对象，默认为{ root : 文档对象，rootMargin：undefiend, threshold：0}： <ol><li>root是作为监听被观察者的视口元素，是否可见是相对于root元素的，在root元素可见区域内之外均视为不可见</li><li>rootMargin 用于扩大root元素视口范围</li><li>threshold：规定被监听元素与root可见区域的交叉比例值阈值，被监听元素完全出现在root可见区域中为1，完全在之外为0</li></ol></li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> lazyLoadImg</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">	element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">dataset</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">src</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> callback</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">entries</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">observer</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> { </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 交叉状态对象数组和观察者</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">entries</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">((</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">entry</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">      let</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">entry</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">target</span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> // 被观察者</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    lazyLoadImg</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">//替换真实src</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    observer</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">unobserve</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">//移除执行过回调的被观察者 </span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> lazyLoadImgObserver</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">new</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> IntersectionObsever</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">callback</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">//观察者</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 使用观察者观察指定元素</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">elements</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">querySelectorAll</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">selectorOfElement</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">elements</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">forEach</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">((</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">   lazyLoadImgObserver</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">obseve</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">element</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">)  </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">//观察每个元素</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="比较两个版本号的大小" tabindex="-1">比较两个版本号的大小 <a class="header-anchor" href="#比较两个版本号的大小" aria-label="Permalink to &quot;比较两个版本号的大小&quot;">​</a></h3><p><code>比较两个应用版本的大小，如果v1 &gt; v2返回1；如果v1 &lt; v2返回0；如果 v1 = v2返回0。比如，1.2.4 &lt; 1.3.0.alpha.1 &lt; 1.3.0.alpha.2 &lt; 1.3.0.beta.1 &lt; 1.3.0.rc.1 &lt; 1.3.0</code>；</p><p><img src="`+r+'" alt=""></p><h3 id="生成指定长度随机字符串" tabindex="-1">生成指定长度随机字符串 <a class="header-anchor" href="#生成指定长度随机字符串" aria-label="Permalink to &quot;生成指定长度随机字符串&quot;">​</a></h3><p><img src="'+D+'" alt=""></p><h3 id="使用-settimeout-实现-setinterval" tabindex="-1">使用 setTimeout 实现 setInterval <a class="header-anchor" href="#使用-settimeout-实现-setinterval" aria-label="Permalink to &quot;使用 setTimeout 实现 setInterval&quot;">​</a></h3><p><img src="'+d+'" alt=""></p><h3 id="实现-range-函数" tabindex="-1">实现 range 函数 <a class="header-anchor" href="#实现-range-函数" aria-label="Permalink to &quot;实现 range 函数&quot;">​</a></h3><p><img src="'+o+'" alt=""></p><h3 id="实现-lodash-的-countby-函数" tabindex="-1">实现 lodash 的 countBy 函数 <a class="header-anchor" href="#实现-lodash-的-countby-函数" aria-label="Permalink to &quot;实现 lodash 的 countBy 函数&quot;">​</a></h3><p><img src="'+g+'" alt=""></p><h3 id="实现-canvas-简易版手写签名" tabindex="-1">实现 canvas 简易版手写签名 <a class="header-anchor" href="#实现-canvas-简易版手写签名" aria-label="Permalink to &quot;实现 canvas 简易版手写签名&quot;">​</a></h3><p><img src="'+c+'" alt=""></p><h3 id="实现-add-1-2-3-4" tabindex="-1">实现 add(1)(2)(3)(4)() <a class="header-anchor" href="#实现-add-1-2-3-4" aria-label="Permalink to &quot;实现 add(1)(2)(3)(4)()&quot;">​</a></h3><p><img src="'+y+'" alt=""></p><h3 id="实现远程调用加法" tabindex="-1">实现远程调用加法 <a class="header-anchor" href="#实现远程调用加法" aria-label="Permalink to &quot;实现远程调用加法&quot;">​</a></h3><p><img src="'+C+'" alt=""></p>',52),u=[b];function F(E,v,f,_,A,w){return i(),a("div",null,u)}const T=s(m,[["render",F]]);export{x as __pageData,T as default};
