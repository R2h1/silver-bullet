import{_ as s,o as i,c as a,R as n}from"./chunks/framework.buEibnTs.js";const t="/silver-bullet/assets/1.lmUPg3pJ.png",l="/silver-bullet/assets/2.wH-shKVc.png",e="/silver-bullet/assets/3.cdSstt9C.png",m=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/basics/html/index.md","filePath":"front-end/basics/html/index.md","lastUpdated":1705593618000}'),p={name:"front-end/basics/html/index.md"},h=n(`<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><p>HTML（超文本标记语言，<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage）不是编程语言，而是定义了网页内容的含义和结构的标记语言。“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。HTML 使用“标记”（markup）来注明文本、图片和其他内容，以便于在 Web 浏览器中显示。HTML由一系列元素组成，标签用于创建元素，标签里的元素名不区分大小写，但推荐将标签名全部小写。不包含任何内容的元素称为空元素，空元素不能存在结束标签，比如 <code>&lt;img /&gt;</code>。</p><h2 id="doctype" tabindex="-1">Doctype <a class="header-anchor" href="#doctype" aria-label="Permalink to &quot;Doctype&quot;">​</a></h2><p><code>&lt;!Doctype&gt;</code> 声明即文档类型定义（DTD），告知浏览器采用的文档解析标准，分为<strong>严格模式（标准模式——W3C标准）<strong>和</strong>混杂模式（兼容模式—向老版本兼容）</strong>，声明位置—HTML文档首行（<code>&lt;html&gt;</code> 标签之前），在HTML4 规定了三种不同的 <code>&lt;!DOCTYPE&gt;</code> 声明，分别是：Strict（严格模式）、Transitional和 Frameset，后两种声明下，若 DTD 不存在/格式不正确或没有最后的 URI 以混杂模式呈现，否则以严格模式呈现：</p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</code></p><p><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</code></p><p>HTML5 与 HTML4 不同，不基于 SGML（Standard Generalized Markup Language 标准通用标记语言），也就不需要 DTD，因此 HTML5 仅标准模式 <code>&lt;!DOCTYPE html&gt;</code> 一种规范，没有严格和混杂之分。</p><p>通过 <strong><code>document.compatMode</code></strong> 可以输出当前文档的渲染模式是<strong>怪异/混杂/兼容模式（<code>BackCompat</code>）<strong>还是</strong>标准模式（<code>CSS1Compat</code>）</strong>。</p><h2 id="html页面生命周期" tabindex="-1">HTML页面生命周期 <a class="header-anchor" href="#html页面生命周期" aria-label="Permalink to &quot;HTML页面生命周期&quot;">​</a></h2><p>HTML有四个重要的生命周期事件：</p><ol><li>DOMContentLoaded：DOM 完全加载以及解析时触发，而无需等 <strong><code>&lt;img&gt;</code> /样式表/子框架</strong>里外部资源加载完成。此时可以查找DOM 节点，并初始化接口。<strong>在用户允许的前提下，Firefox，Chrome 和 Opera 都会在 DOMContentLoaded 触发时自动填充表单</strong>。 <ol><li>DOMContentLoaded 和脚本的关系：</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  1. 脚本文件的加载和执行会阻塞 DOM 的加载和解析，原因是脚本可能想要修改 DOM，甚至对其执行 document.write 操作；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  2. 多个同步脚本，会依次加载和执行</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOMContentLoader&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOM 完全加载和解析&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&#39;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;行内脚本先执行，lodash 再加载和执行&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol start="2"><li>DOMContentLoaded 和样式关系：</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  外部样式表的加载不会影响 DOM 的加载和解析，但是会阻塞后面脚本的执行</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">link</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> type</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;text/css&#39;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> rel</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;stylesheet&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> href</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;style.css&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  在样式表加载完成之前，脚步不会执行，原因是脚本可能想要获取元素的坐标和其他与样式相关的属性。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOMContentLoader&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;DOM 完全加载和解析&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">)</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">getComputeStyle</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">body</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">).</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">marginTop</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  如果 link 置于 script 之后就会马上绑定事件和获取样式属性</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li>load：整个页面及所有依赖资源如样式表和图片都已完成加载时触发，此时才可以正确获取图片大小。可以通过onload或事件字符串load监听事件。该事件不可取消，同时所有以load 命名的事件都不会传递到 Window 上即load事件不会冒泡。</li><li>beforeunload：当用户离开页面的导航（navigation）或试图关闭窗口或刷新时触发（弹出一个确认对话框），询问用户是否真的要离开该页面。如果用户确认，浏览器将导航到新页面，否则导航将会取消，也就不会出发pagehide和unload事件。此事件中可以检查用户是否保存了更改，并询问是否真的要离开，beforeunload目前已经不支持自定义显示给用户的消息。</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 只能通过两种方式（分配和返回就行，无论是否为字符串）：</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> *   1. 将字符串分配给 event 的 returnValue 属性；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> *   2. 从 onbeforeunload 事件处理程序返回一个字符串；</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 而且 event.preventDefault() 在 beforeunload 处理程序中不起作用。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> */</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onbeforeunload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">preventDefault</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 这个没啥用，相当于没有这行代码</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // return &#39;有未保存的值，确认要离开吗？&#39;; // 空字符串也可以</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    return</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">; </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// true 也可以；</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // 或</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;beforeunload&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // 起作用，与在 window.onbeforeunload 中 return 值的效果是一样的</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // event.returnValue = &#39;未保存的值，确认要离开吗？&#39;; // 空字符串也可以</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    event</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">returnValue</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">; </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// true 也可以；</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="4"><li>unload：当页面或一个子框架正在被卸载时，触发 unload事件，<strong>此时页面处于以下状态：所有资源仍存在 (图片，iframe等)，对于终端用户所有资源均不可见，界面交互无效 (window.open, alert, confirm 等)，错误不会停止卸载页面的过程</strong>。该事件不可取消，不可冒泡，且在 beforeunload和pagehide事件之后执行，且父框架在子框架卸载前卸载。在该事件中建议可以使用navigator.sendBeacon(url, data)将和用户相关的分析统计数据发送到服务器保存：</li></ol><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// sendBeacon 会在后台执行，转换到另一个页面不会有延迟</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> analyticsData</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = { </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/* 带有收集的数据的对象  */</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> };</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">window</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;unload&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  // POST，大小限制 64kb， 字符串/表单/其他格式的数据，但是无法获取服务器响应</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  navigator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">sendBeacon</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;/analytics&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;">JSON</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">stringify</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">analyticsData</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">));</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Document.readyState，描述了document 的加载状态，<strong>状态改变</strong>时触发 readystatechange 事件。存在三种状态：</p><ol><li><strong>loading（加载中）</strong>--正在加载中；</li><li><strong>interactive（可交互）</strong>-- document加载状态结束，但图像，样式表和框架之类的子资源仍在加载，DOMContentLoaded事件即将触发；</li><li><strong>complete（已完成）</strong>--document 和所有子资源已完成加载，window.onload事件（即 load 事件）即将触发。</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;document.readyState -&gt;&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">readyState</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;readystatechange&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;document.readystatechange -&gt; document.readyState = &#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> +</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> document</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">readyState</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  window</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;window onload&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  }</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&#39;iframe.html&#39;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">console</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;iframe onload&#39;</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">)&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &gt;&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">img</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;http://en.js.cx/clipart/train.gif&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> id</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;img&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> </span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  img</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">onload</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;"> () </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">=&gt;</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> console</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;img onload&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!--</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  页面生命周期（相同数字的先后顺序不定）</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  1. document.readyState -&gt; loading</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  2. document.readystatechange -&gt; document.readyState = interactive</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  3. DOMContentLoaded</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  4. iframe onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  4. img onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  5. document.readystatechange -&gt; document.readyState = complete</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  6. window.onload</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>页面可见性 API（Page Visibility API），<strong>当其选项卡的内容变得可见或被隐藏时（包括当用户最小化窗口），会在文档（document）上触发 visibilitychange (能见度更改) 事件</strong>。该事件不包括document的更新的可见性状态，但是可以从 document 的 visibilityState属性中获取该信息。当 visibleStateState 属性的值转换为 hidden 时，Safari 不会按预期触发 visibilitychange；因此，还需要在window上侦听 pagehide 事件。出于兼容性原因，请确保使用 document.addEventListener 而不是 window.addEventListener 来注册回调，Safari &lt;14.0 仅支持前者。<code>&lt;iframe&gt;</code>的可见性状态与父文档相同。使用 CSS 属性（例如display: none;）隐藏 <code>&lt;iframe&gt;</code> 不会触发可见性事件或更改框架中包含的文档的状态。</p><p>在页面可见性 API 之外，浏览器会采取许多策略来减轻后台或隐藏选项卡对性能的影响：</p><ol><li>大多数浏览器停止向后台选项卡或隐藏的 <code>&lt;iframe&gt;</code> 发送 requestAnimationFrame() 回调，以提高性能和电池寿命。</li><li>setTimeout() 之类的计时器在后台/非活动选项卡中受到限制，以帮助提高性能。</li><li>浏览器实现基于预算的后台超时限制。这在现代浏览器中以类似的方式运行，细节如下： <ol><li>在 Firefox 中，后台选项卡中的每个window都有自己的时间预算（以毫秒为单位）——最大值和最小值分别为 +50 毫秒和 -150 毫秒。 Chrome 非常相似，只是预算以秒为单位指定。</li><li>windows在 30 秒后受到限制，使用与为window timers指定的相同的限制延迟规则。在 Chrome 中，此值为 10 秒。</li><li>仅当预算为非负数时才允许执行计时器任务。</li><li>一旦计时器的代码运行完毕，它执行的持续时间将从其窗口的超时预算中减去。</li><li>在 Firefox 和 Chrome 中，预算以每秒 10 毫秒的速度重新生成。</li></ol></li></ol><p>某些进程不受此限制行为的影响。在这些情况下，您可以使用页面可见性 API 来减少选项卡在隐藏时对性能的影响：</p><ol><li>正在播放音频的选项卡被视为前景并且不受限制。</li><li>运行使用实时网络连接（WebSockets 和 WebRTC）的代码的选项卡不受限制，以避免关闭这些连接超时和意外关闭。</li><li>IndexedDB 进程也不受限制，以避免超时。</li></ol><h2 id="html实体" tabindex="-1">HTML实体 <a class="header-anchor" href="#html实体" aria-label="Permalink to &quot;HTML实体&quot;">​</a></h2><p>HTML 实体是一段以连字号（&amp;）开头、以分号（;）结尾的文本（字符串）。实体常常用于显示HTML中的保留字符（比如&lt; &gt;）和不可见的字符（如“不换行空格”）。也可以用实体来代替其他难以用标准键盘键入的字符。HTML实体与字符之间如何对应使用工具：HTML 实体编码器/解码器（<a href="https://mothereff.in/html-entities%EF%BC%89%E3%80%82" target="_blank" rel="noreferrer">https://mothereff.in/html-entities）。</a></p><h2 id="样式导入方式-link-和-import" tabindex="-1">样式导入方式： link 和 @import <a class="header-anchor" href="#样式导入方式-link-和-import" aria-label="Permalink to &quot;样式导入方式： link 和 @import&quot;">​</a></h2><p>link：html标签，用于导入外部css文件，还可定义RSS和rel连接属性等；与页面并行加载；标签不存在兼容性问题；DOM元素支持JS操作</p><p>@import：可在style中或者css文件中用于导入外部css文件；在页面加载完毕后才被加载；IE5+才能识别；非DOM不支持js操作。@import引入的样式始终是放在css文件顶部（会被css文件中相同的选择器所覆盖）</p><h2 id="离线存储" tabindex="-1">离线存储 <a class="header-anchor" href="#离线存储" aria-label="Permalink to &quot;离线存储&quot;">​</a></h2><p><strong>允许用户离线时通过缓存的资源展示页面</strong>。</p><p>在文档的 <code>&lt;html&gt;</code> 标签中包含 manifest 属性manifest=&quot;.appcache&quot;或者在 manifest 文件中直接指定该页面或者离线时操作window.applicationCache进行实现</p><p>manifest 文件的建议的文件扩展名是：&quot;.appcache&quot;。并且在 web 服务器上进行配置正确的 MIME-type，即 &quot;text/cache-manifest&quot;</p><p>在线：存在manifest属性即请求manifest文件，若首次访问app，即下载manifest文件指定的资源进行离线存储。若再次访问过app且资源已离线存储，先使用加载离线资源加载页面，然后对比新manifest文件与旧manifest文件，发生更改（或用户清空浏览器缓存或由程序来更新应用缓存）才重新下载manifest文件指定的资源进行离线存储。</p><p>离线：浏览器就直接使用离线存储的资源。.appcache文件示例：</p><p><img src="`+t+`" alt=""></p><p>其中，CACHRE MANIFEST表示需缓存的资源（必须有）；ETWORK表示永远不会被缓存的资源（可选）；FALLBACK表示页面无法访问时的回退页面（可选/html5/ 目录中的所有文件回退为&quot;offline.html&quot;）。</p><h2 id="xml" tabindex="-1">XML <a class="header-anchor" href="#xml" aria-label="Permalink to &quot;XML&quot;">​</a></h2><p>XML（可扩展标记语言，Extensible Markup Language）是由 W3C 指定的一种通用标记语言。XML 是数据描述性语言，因此Web 服务可以利用 XML 去交换请求和响应。</p><p>XML 标签类似 HTML 标签，但由于 XML 允许用户定义自己的标签，所以 XML 更加灵活。XML被设计为传输和存储数据，HTML被设计用来显示数据。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- XML --&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">sites</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">谷歌</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">www.google.com</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">    &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">微博</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">name</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;"> &lt;</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">www.weibo.com</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">url</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">  &lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">site</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#CD3131;--shiki-dark:#F44747;">sites</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- JSON</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">{</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  &quot;sites&quot;: [</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    { &quot;name&quot;: &quot;谷歌&quot;, &quot;url&quot;: &quot;www.google.com&quot; },</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    { &quot;name&quot;: &quot;微博&quot;, &quot;url&quot;: &quot;www.weibo.com&quot; },</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">  ]</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">}</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">--&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>JSON 和 XML 都用于接收 web 服务端的数据。针对 AJAX 应用，JSON 比 XML 数据加载更快，而且更简单，XML 需要使用 XML 解析器解析XML文档，JSON 可以使用标准的 JavaScript 函数（JSON.parse()和JSON.stringify()）来解析。</p><h2 id="中英文换行问题" tabindex="-1">中英文换行问题 <a class="header-anchor" href="#中英文换行问题" aria-label="Permalink to &quot;中英文换行问题&quot;">​</a></h2><ol><li>浏览器默认是不认识中文字符，将一个字当成一个字符，加上下一个字超出当前行宽则该下一个字换行显式。</li><li>而对于英文，默认将一个连续的多个字母的英文串当作一个单词，即使超过当前行宽也不换行。</li></ol><h2 id="国际化、本地化、全球化" tabindex="-1">国际化、本地化、全球化 <a class="header-anchor" href="#国际化、本地化、全球化" aria-label="Permalink to &quot;国际化、本地化、全球化&quot;">​</a></h2><p><strong>国际化</strong>：internationalization，因首尾字母间有 18 个字母，简称为 i18n；指的是将软件与特定语言及地区脱钩的过程。当软件被移植到不同的语言及地区时，软件本身不用做内部工程上的改变或修正。</p><p><strong>本地化</strong>：localization，由于同样的原因被简称为 l10n；是指为特定区域翻译文件，并为了使软件能在该特定语言环境或地区使用，而应用特殊布局、加入本地特殊化部件等的过程。</p><p><strong>全球化</strong>：globalization，有时会用来表示以上两者的合称；也会简称为 g11n。</p><h2 id="自动播放" tabindex="-1">自动播放 <a class="header-anchor" href="#自动播放" aria-label="Permalink to &quot;自动播放&quot;">​</a></h2><p>Web浏览器正在转向更严格的自动播放策略，以改善用户体验、最大限度地减少安装广告拦截器的动机，并减少昂贵或受限网络上的数据消耗，这些更改旨在为用户提供更好的播放控制权，并使拥有合法用例的发布商受益。</p><p>Chrome 66 中针对audio和video元素推出了自动播放策略，可有效阻止 Chrome 中大约一半不需要的媒体自动播放。对于Web Audio API，Chrome 71 中推出了自动播放策略。这会影响网页游戏、部分WebRTC应用程序以及其他使用音频功能的网页。</p><p><strong>Chrome 的自动播放策略</strong>：</p><ol><li>始终允许静音自动播放。</li><li>在以下情况下允许自动播放声音： <ol><li>用户已与域进行交互（单击、点击等）。</li><li>在桌面上，用户的<strong>媒体参与度</strong>阈值已被突破，这意味着用户之前播放过有声视频。</li><li>用户已将该网站添加到移动设备的主屏幕或在桌面设备上安装了<strong>PWA</strong>。</li></ol></li><li>顶部框架可以将<strong>自动播放权限委托</strong>给其 iframe，以允许自动播放声音。</li></ol><p><strong>媒体参与度</strong> (<strong>MEI，Media Engagement Index</strong>) 衡量个人在网站上消费媒体的倾向。Chrome 的方法是计算每个来源的重要媒体播放事件的访问比率：</p><ol><li>媒体（音频/视频）的消耗必须大于七秒。</li><li>音频必须存在且未静音。</li><li>包含视频的选项卡处于活动状态。</li><li>视频大小（以像素为单位）必须大于200x140。</li></ol><p>据此，Chrome 会计算出媒体参与度得分，该得分在定期播放媒体的网站上最高。当它足够高时，允许媒体仅在桌面上自动播放。用户的 MEI 可在about://media-engagement内部页面获取。</p><p><img src="`+l+`" alt=""></p><p>对于开发者而言，可以通过以下手段在本地更改 Chrome 自动播放政策行为，以测试网站的不同级别的用户参与度：</p><ol><li>可以使用命令行标志：chrome.exe --autoplay-policy=no-user-gesture-required 完全禁用自动播放策略。这就好像用户与网站强烈互动一样，而始终允许自动播放。</li><li>还可以使用命令行标志：chrome.exe --disable-features=PreloadMediaEngagementData, MediaEngagementBypassAutoplayPolicies决定通过禁用 MEI 来确保永远不允许自动播放，以及是否让 MEI 总值最高的网站默认为新用户自动播放。</li></ol><p>HTTP Permissions-Policy 标头autoplay指令（Permissions-Policy: autoplay <code>&lt;allowlist&gt;</code>;其中 <code>&lt;allowlist&gt;</code> 使用分号分隔，在chrome上默认值’self’表示仅允许当前文档同源的autoplay，’none’则是完全禁止 autoplay）控制当前文档是否允许自动播放通过 HTMLMediaElement接口请求的媒体。启用该策略后，如果没有用户交互，HTMLMediaElement.play() 返回的 Promise 将出现 DOMException 异常。<code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 元素上的自动播放属性将被忽略。</p><p>permissions policy 允许开发人员有选择地启用和禁用浏览器功能和API。一旦源收到自动播放权限，它就可以将该权限委托给具有autoplay permissions policy的跨源 iframe 。请注意，默认情况下，同源 iframe 上允许自动播放。</p><p>iframe 委托：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- autoPlay is allowed --&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;https://cross-origin.com/myvideo.html&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> allow</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;autoplay&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">&lt;!-- autoPlaya and fullscreen are allowed --&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">iframe</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> src</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;https://cross-origin.com/myvideo.html&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> allow</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;autoplay: fullscreen&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果禁用了自动播放的权限策略，在没有用户手势的情况下调用 play() 会出现 NotAllowedError 的DOMException 异常，从而promise被拒绝。autoplay属性也将被忽略。</p><p><strong>最佳实践一</strong>：不要假设视频会播放，也不要在视频实际未播放时显示暂停按钮。而且应该始终查看播放函数返回的 Promise，以确定它是否被拒绝：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> video</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">document</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">querySelector</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;video&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">const</span><span style="--shiki-light:#0070C1;--shiki-dark:#4FC1FF;"> startPlayPromise</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">video</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">play</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">startPlayPromise</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> !== </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">undefined</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  startPlayPromise</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">then</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">_</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // 仅在播放开始后才开始执行需要执行的操作</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  }).</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">catch</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">error</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> =&gt;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">    // 自动播放被阻止</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">    if</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> (</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">error</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">name</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> === </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;NotAllowedError&#39;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) { </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 显示 &quot;播放&quot; 按钮以便用户可以开始播放</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">      showPlay</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    } </span><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">else</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">      // 其他 error</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  })</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>首先需确保play()返回的不是undefined，因为在IE上，play()没有返回值。</p><p><strong>最佳实践二</strong>：使用静音自动播放并让用户自主选择取消静音</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes light-plus dark-plus vp-code"><code><span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">video</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> id</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;video&quot;</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> muted</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> atuoplay</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">button</span><span style="--shiki-light:#E50000;--shiki-dark:#9CDCFE;"> id</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">=</span><span style="--shiki-light:#0000FF;--shiki-dark:#CE9178;">&quot;unmuteButton&quot;</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">button</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">  ummuteButton</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">addEventListener</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&#39;click&#39;</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">() {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    video</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">muted</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> =</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#000000FF;--shiki-dark:#D4D4D4;">  });</span></span>
<span class="line"><span style="--shiki-light:#800000;--shiki-dark:#808080;">&lt;/</span><span style="--shiki-light:#800000;--shiki-dark:#569CD6;">script</span><span style="--shiki-light:#800000;--shiki-dark:#808080;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>要检测浏览器是否需要用户交互才能播放音频，需在创建音频上下文后检查 AudioContext.state。如果允许播放，则AudioContext.state为“running”。否则AudioContext.state为suspended。如果监听 statechange 事件，则可以异步检测AudioContext.state的更改。</p><h2 id="html-元素" tabindex="-1">HTML 元素 <a class="header-anchor" href="#html-元素" aria-label="Permalink to &quot;HTML 元素&quot;">​</a></h2><p>HTML 元素通过“标签”（tag）将文本从文档中引出，标签由在“&lt;”和“&gt;”中包裹的元素名组成，HTML 标签里的元素名不区分大小写。习惯上与实践上都推荐将标签名全部小写。</p><h3 id="内容分类" tabindex="-1">内容分类 <a class="header-anchor" href="#内容分类" aria-label="Permalink to &quot;内容分类&quot;">​</a></h3><p>每一个 HTML 元素都必须遵循定义了它可以包含哪一类内容的规则。这些规则被归类为几个常见的元素内容模型（content model）。大多数 HTML 元素都属于一个或多个内容类别--这些类别将具有共同特征的元素组合在一起。这是一种松散的分组（实际上并没有在这些类别的元素之间建立关系），但它们有助于定义和描述这些类别的共同行为及其相关规则，尤其是当你遇到它们错综复杂的细节时。元素也有可能不属于任何类别。以下是三种类型的内容分类：</p><ol><li>主内容类：描述了很多元素共享的内容规范； <ol><li>元数据内容（Metadata content）：元素（<code>&lt;base&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;noscript&gt;、&lt;script&gt;、&lt;style&gt;</code> 和 <code>&lt;title&gt;</code>）可以修改文档其余部分的呈现或行为，建立与其他文档的链接，或者传达其他外带信息。</li><li>流式内容（Flow content）：大多数可以包含在<code>&lt;body&gt;</code>元素之内的元素（<code>&lt;address&gt;、&lt;bdi&gt;、&lt;blockquote&gt;、&lt;data&gt;、&lt;del&gt;、&lt;details&gt;、&lt;div&gt;、&lt;dl&gt;、&lt;figure&gt;、&lt;footer&gt;、&lt;header&gt;、&lt;hr&gt;、&lt;ins&gt;、&lt;main&gt;、&lt;map&gt;、&lt;menu&gt;、&lt;ol&gt;、&lt;p&gt;、&lt;pre&gt;、&lt;s&gt;、&lt;table&gt;、&lt;template&gt;、&lt;u&gt;、&lt;ul&gt;</code>和以下子集）。 <ol><li>标题内容（Heading content）：（<code>&lt;h1&gt; 、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt;</code>）是流式内容的子集，可在任何可以使用流式内容的地方出现，它定义了分段的标题，而这个分段可能由一个明确的分段内容元素直接标记，也可能由标题本身隐式地定义。</li><li>分段内容（Sectioning content）：是流式内容的子集，可在任何可以使用流式内容的地方出现。属于分段内容模型的元素（<code>&lt;article&gt;、&lt;aside&gt;、&lt;nav&gt;</code> 和 <code>&lt;section&gt;</code>）创建了一个当前大纲中的分段，它定义了 <code>&lt;header&gt;</code> 元素、<code>&lt;footer&gt;</code> 元素和标题内容的范围。</li><li>短语内容（Phrasing content）：（<code>&lt;abbr&gt;、&lt;audio&gt;、&lt;b&gt;、&lt;bdo&gt;、&lt;br&gt;、&lt;button&gt;、&lt;canvas&gt;、&lt;cite&gt;、&lt;code&gt;、&lt;datalist&gt;、&lt;dfn&gt;、&lt;em&gt;、&lt;embed&gt;、&lt;i&gt;、&lt;iframe&gt;、&lt;img&gt;、&lt;input&gt;、&lt;kbd&gt;、&lt;label&gt;、&lt;mark&gt;、&lt;math&gt;、&lt;meter&gt;、&lt;noscript&gt;、&lt;object&gt;、&lt;output&gt;、&lt;progress&gt;、&lt;q&gt;、&lt;ruby&gt;、&lt;samp&gt;、&lt;script&gt;、&lt;select&gt;、&lt;small&gt;、&lt;span&gt;、&lt;strong&gt;、&lt;sub&gt;、&lt;sup&gt;、&lt;svg&gt;、&lt;textarea&gt;、&lt;time&gt;、&lt;var&gt;、&lt;video&gt;、&lt;wbr&gt;</code> 、文本节点（但不包括那些只由空白字符组成的节点）、<code>&lt;a&gt;</code>仅包含短语内容时、<code>&lt;area&gt;</code>为 <code>&lt;map&gt;</code> 元素的子元素时、<code>&lt;del&gt;</code>仅包含短语内容时、<code>&lt;ins&gt;</code>仅包含短语内容时、<code>&lt;link&gt;</code>仅限于 itemprop 属性存在的情形、<code>&lt;map&gt;</code>仅包含短语内容时和<code>&lt;meta&gt;</code>仅限于 itemprop 属性存在的情形）流式内容的子集，定义了文本和它包含的标记，且可以在任何可以使用流式内容的地方出现。</li><li>嵌入内容（Embedded content）：（<code>&lt;audio&gt;、&lt;canvas&gt;、&lt;embed&gt;、&lt;iframe&gt;、&lt;img&gt;、&lt;math&gt;、&lt;object&gt;、&lt;picture&gt;、&lt;svg&gt;</code> 和 <code>&lt;video&gt;</code>）是流式内容的子集，它将来自另一种标记语言或命名空间的内容插入到文档中，且可以在任何可以使用流式内容的地方出现。</li><li>交互式内容（Interactive content）：（<code>&lt;a&gt;、&lt;button&gt;、&lt;details&gt;、&lt;embed&gt;、&lt;iframe&gt;、&lt;label&gt;、&lt;select&gt; 、&lt;textarea&gt;、&lt;audio&gt;</code>若controls 属性存在、<code>&lt;img&gt;</code>若 usemap 属性存在、<code>&lt;input&gt;</code>若 type 属性不处于隐藏（hidden）状态、<code>&lt;object&gt;</code>，若 usemap 属性存在和<code>&lt;video&gt;</code>若 controls 属性存在）是流式内容的子集，包含为用户交互而特别设计的元素，且可以在任何可以使用流式内容的地方出现。</li><li>与表单相关的内容（Form-associated content）：（<code>&lt;button&gt;、&lt;fieldset&gt;、&lt;input&gt;、&lt;label&gt;、&lt;meter&gt;、&lt;object&gt;、&lt;output&gt;、&lt;progress&gt;、&lt;select&gt;</code>和<code>&lt;textarea&gt;</code>）是流式内容的子集，包括存在表单所有者的元素，通过 form 属性指定表单所有者id。可以在预期有流式内容的地方使用。其子类： <ol><li>可列举的元素（listed）：在 form.elements 和 fieldset.elements 集合中列举出的元素（<code>&lt;button&gt;、&lt;fieldset&gt;、&lt;input&gt;、&lt;object&gt;、&lt;output&gt;、&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>）。</li><li>可标记的元素（labelable）：和 <code>&lt;label&gt;</code> 相关联的元素（ <code>&lt;button&gt;、&lt;input&gt;、&lt;meter&gt;、&lt;output&gt;、&lt;progress&gt;、&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>）。</li><li>可提交的元素（submittable）：包括当表单提交时可以用来组成表单数据的元素（<code>&lt;button&gt;、&lt;input&gt;、&lt;object&gt;、&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>）。</li><li>可重置的元素（resettable）：当表单重置时会被重置的元素（ <code>&lt;input&gt;、&lt;output&gt;、&lt;select&gt; 和 &lt;textarea&gt;</code>）。</li></ol></li></ol></li></ol></li><li>表单相关的内容类：描述了表单相关元素共有的内容规范。</li><li>特殊内容类：描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。 <ol><li>透明内容模型（Transparent content model）：如果元素（<code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> ）拥有透明内容模型（Transparent content model），即使将透明内容移除并使用子元素取代，其内容也必须由合法的 HTML5 元素组成。</li><li>支持脚本的元素（Script-supporting elements）：（<code>&lt;script&gt;</code>和<code>&lt;template&gt;</code>）不会直接渲染输出在页面文档中。相反，它们的作用是支持脚本，或者直接包含或指定脚本代码，或者指定将被脚本使用的数据。</li></ol></li></ol><p><img src="`+e+'" alt=""></p><h3 id="属性分类" tabindex="-1">属性分类 <a class="header-anchor" href="#属性分类" aria-label="Permalink to &quot;属性分类&quot;">​</a></h3><p>HTML 中的元素拥有属性（attribute）；这些额外的值可以配置元素或者以各种方式来调整元素的行为，进而满足用户所需的标准。</p><p>在 HTML 中，大多数属性都有两个方面：<strong>内容属性</strong>和 <strong>IDL</strong>（<strong>Interface Definition Language或Interface Description Language，接口定义语言或接口描述语言</strong>）<strong>属性</strong>。</p><p><strong>内容属性</strong>：内容属性需要在内容（HTML 代码）中设置。内容属性总是字符串，即使值是整数。可以通过element.setAttribute()或element.getAttribute()来设置或获取。</p><p><strong>IDL属性</strong>：即JavaScript 属性（property）。当需要获取 IDL 属性的值时，IDL 属性总会使用隐含的内容属性的值（可能先经过转换）来返回值。同样地，当设置值时会保存在内容属性中。即IDL 属性本质上反映了内容属性。大多数时候，IDL 属性会返回元素实际使用的值，例如JavaScript设置 inputElement.type=&quot;foobar&quot;，内容属性的值（element.getAttribute()）是“foobar”，但<code>&lt;input&gt;</code>元素在外观上和表现上会是默认的文本类型，因此IDL属性依旧返回”text”。IDL 属性并不总是字符串，读取或设置值的类型都是要求的类型，如果传入别的类型，可能会根据标准 JavaScript 的类型转换规则被转换为数字。大多数时候，属性的 IDL 属性与对应的内容属性如何关联会遵守规范中列出的规则，但有时并不遵守，具体需要阅读规范。</p><p><strong>布尔属性</strong>：内容属性，如 required、readonly、disabled，如果属性存在，则其值为真（true），如果不存在，其值为假（false）。HTML 定义了布尔属性允许的取值：如果属性存在，其值必须是一个空字符串（或未给该属性赋值），或者是一个大小写无关的 ASCII 字符串，该字符串与属性名严格相同，前后都没有空格。切记，布尔值属性不能取值为 &quot;true&quot; 和 &quot;false&quot;。如果需要表示假值，布尔值属性需要整个忽略不写。</p><p><strong>事件处理器属性</strong>：所有事件处理器属性，如onclick、onkeypress、onfocus，都接受字符串值。字符串将用于合成 JavaScript 函数：”function name(/<em>args</em>/) {body}”，其中，name 为属性名，body 为属性值。处理器接收与其 JavaScript 事件处理器对应项相同的参数——大多数处理器只接收一个 event 参数，而 onerror 接收五个参数：event、source、lineno、colno、error。不建议使用事件处理器属性。将 HTML 和 JavaScript 代码混合在一起通常会产生难以维护的代码，而且事件处理器属性的执行也可能会被内容安全策略阻止。</p><h4 id="src-属性和href属性" tabindex="-1">src 属性和href属性 <a class="header-anchor" href="#src-属性和href属性" aria-label="Permalink to &quot;src 属性和href属性&quot;">​</a></h4><p>href（超文本引用）：用于<code>&lt;a&gt;</code>和<code>&lt;link&gt;</code>，用于指向资源地址（建立当前html与资源的联系），<code>&lt;link&gt;</code>中的href并行下载资源（css）并且阻塞当前文档的处理 Src（source来源）：用于<code>&lt;img&gt;</code>，<code>&lt;script&gt;</code>，<code>&lt;iframe&gt;</code>中替换html页面内容，下载资源时会<strong>阻塞</strong>当前文档的处理。</p><h4 id="data-属性" tabindex="-1">data-*属性 <a class="header-anchor" href="#data-属性" aria-label="Permalink to &quot;data-*属性&quot;">​</a></h4><p>data-* 全局属性是一类被称为自定义数据属性的属性，它赋予我们在所有 HTML 元素上语义化地嵌入自定义数据属性的能力，并可以通过脚本在 HTML 与 DOM 表现之间进行专有数据的交换。</p><p>所有这些自定义数据属性都可以通过所属元素的 HTMLElement.dataset 来访问，dataset是字符串映射DOMStringMap，其本身不能被修改，设置属性时，它的值总是转化为一个字符串，移除一个属性可以使用delete操作符。*具有以下限制：</p><ol><li>该名称不能以xml开头，无论这些字母是大写还是小写；</li><li>该名称不能包含任何分号 (U+003A)；</li><li>该名称不能包含 A 至 Z 的大写字母。</li></ol><p>并且自定义数据属性中的任何破折号 (U+002D) 都会被下个字母的大写替代 (驼峰拼写)。</p><h4 id="script元素的属性defer和async" tabindex="-1">script元素的属性defer和async <a class="header-anchor" href="#script元素的属性defer和async" aria-label="Permalink to &quot;script元素的属性defer和async&quot;">​</a></h4><p>HTML解析过程中，遇到脚本script默认会停止解析HTML和渲染DOM（阻塞）等待脚本加载执行完毕再继续解析HTML和渲染DOM，因此导致脚本无法访问下方DOM和可能长时间阻塞页面，通常建议放在body的底部。</p><p>这样的解决方案，对于长HTML造成脚本的操作会具有明显的延迟，script提供两个属性defer和async更好解决阻塞问题。</p><p><strong>共同点</strong>是两者都不会阻塞解析HTML和渲染DOM（‘后台’下载），在load事件之前执行完毕。</p><p><strong>defer</strong>：即延迟执行，等待解析HTML和渲染DOM完毕，并在DOMContentLoaded之前，才开始执行（多个defer脚本按顺序执行）。<strong>如果<code>&lt;script&gt;</code>元素type为module，则默认为defer</strong>。</p><p><strong>async</strong>: 即异步执行，加载完（下载）即执行，不限制是否在DOMContentLoaded之前或之后执行。多个async脚本先加载完的先执行（<strong>加载优先规则</strong>）。<strong>页面中的DOM可能会先于异步脚本显示，因此建议不要在异步脚本执行期间修改DOM</strong>。</p><p>通过Javasciprt可动态添加script脚本，动态脚本默认async = true。 实际开发中，defer可 用于需要整个 DOM 的脚本，以及脚本的相对执行顺序很重要的时候。<strong>async 可用于独立脚本（第三方脚本）</strong>，例如计数器或广告，这些脚本的相对执行顺序不重要。</p><p><code>&lt;noscript&gt;</code>标签规定浏览器不支持脚本或禁用脚本时的替代显示内容。</p><h4 id="rel属性的值-prefetch与-preload" tabindex="-1">rel属性的值：prefetch与 preload <a class="header-anchor" href="#rel属性的值-prefetch与-preload" aria-label="Permalink to &quot;rel属性的值：prefetch与 preload&quot;">​</a></h4><p>关键字 prefetch 作为元素 <code>&lt;link&gt;</code> 的属性 rel 的值，是为了提示浏览器，用户**未来的浏览（其他页面）**有可能需要加载目标资源，所以浏览器在空闲时通过事先获取和缓存对应资源，优化用户体验。</p><p>关键字 preload 作为元素 <code>&lt;link&gt;</code> 的属性 rel 的值，表示用户十分有可能需要在**当前浏览（当前页面）**中加载目标资源，所以浏览器必须预先获取和缓存对应资源。</p><h4 id="rel属性的值-dns-prefetch" tabindex="-1">rel属性的值：dns-prefetch <a class="header-anchor" href="#rel属性的值-dns-prefetch" aria-label="Permalink to &quot;rel属性的值：dns-prefetch&quot;">​</a></h4><p>dns-prefetch (DNS预获取) 是尝试在请求资源之前解析域名。当浏览器从（第三方）服务器请求资源时，必须先将该跨域域名解析为 IP 地址，然后浏览器才能发出请求。此过程称为 DNS 解析。DNS解析会导致请求增加明显的延迟，此延迟可能会大大降低加载性能，尤其是对于对于打开许多跨域域许的网站。</p><p>dns-prefetch 可帮助开发人员减少跨域域上的DNS 解析延迟。HTML <code>&lt;link&gt;</code>元素 通过 dns-prefetch的rel属性值提供此功能。然后在 href 属性中指要跨域的域名（<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://some.example.com/&quot;&gt;</code>）。每当站点引用跨域域上的资源时，都应在<code>&lt;head&gt;</code>元素中放置dns-prefetch。</p><p>最佳实践：</p><ol><li>首先，dns-prefetch 仅对跨域域上的 DNS 查找有效，因此请避免使用它来指向您的站点或域。这是因为，到浏览器看到提示时，您站点域背后的 IP 已经被解析。</li><li>其次，还可以通过使用 HTTP 链接字段（即Link）将 dns-prefetch（以及其他资源提示）指定为 HTTP 标头。</li><li>结合preconnect使用。即<code>&lt;link rel=&quot;preconnect&quot; href=&quot;https://impartant.com/&quot; crossorigin&gt; &lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://example1.com/&quot;&gt;</code>。其中，dns-prefetch 仅执行 DNS 查找，但preconnect 会建立与服务器的连接（）。如果站点是通过 HTTPS 服务的，则此过程包括 DNS 解析，建立 TCP 连接以及执行 TLS 握手。将两者结合起来可提供进一步减少跨域请求的感知延迟的机会。但是如果页面需要建立与许多第三方域的连接，则preconnect 会适得其反。preconnect最好仅用于最关键的连接。对于其他的，使用dns-prefetch。</li></ol>',105),k=[h];function r(d,o,g,c,D,y){return i(),a("div",null,k)}const b=s(p,[["render",r]]);export{m as __pageData,b as default};
