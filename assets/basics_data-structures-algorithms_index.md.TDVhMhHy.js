import{_ as t,o as e,c as a,R as r}from"./chunks/framework.buEibnTs.js";const s="/silver-bullet/assets/dsa-2.YOs9mD33.png",g=JSON.parse('{"title":"数据结构与算法","description":"","frontmatter":{},"headers":[],"relativePath":"basics/data-structures-algorithms/index.md","filePath":"basics/data-structures-algorithms/index.md","lastUpdated":1704551708000}'),n={name:"basics/data-structures-algorithms/index.md"},o=r('<h1 id="数据结构与算法" tabindex="-1">数据结构与算法 <a class="header-anchor" href="#数据结构与算法" aria-label="Permalink to &quot;数据结构与算法&quot;">​</a></h1><h2 id="面向对象、面向过程、面向函数" tabindex="-1">面向对象、面向过程、面向函数？ <a class="header-anchor" href="#面向对象、面向过程、面向函数" aria-label="Permalink to &quot;面向对象、面向过程、面向函数？&quot;">​</a></h2><p><strong>面向对象（Object Oriented）</strong>：它将程序看作是一组对象的集合，每个对象都可以接收消息、处理数据并和其他对象交互。在OOP（Object Oriented Programming）中，对象具有状态和行为，并且对象之间可以建立继承和关联关系。OOP通常适用于处理与现实世界有关的问题。</p><p><strong>面向过程（Procedure Oriented）</strong>：它将程序看作是一系列过程或函数的集合，这些过程按照特定的顺序执行，每个过程都可以操作共享的数据。在POP中，函数是可变的，可能会引起副作用，例如修改全局变量。POP（Procedural Oriented Programming）通常适用于处理简单、线性的问题。</p><p><strong>面向函数（Function Oriented）</strong>：即函数式编程。它将程序看作是函数的集合，强调函数的使用和复用，将函数作为程序的基本构建块，通过组合和转换函数实现复杂的计算过程，并且不会对外部状态进行修改。FOP（Functional Oriented Programming）通常适用于处理数学运算、数据转换等问题。</p><p><img src="'+s+'" alt=""></p>',6),i=[o];function c(d,_,l,m,p,u){return e(),a("div",null,i)}const P=t(n,[["render",c]]);export{g as __pageData,P as default};
