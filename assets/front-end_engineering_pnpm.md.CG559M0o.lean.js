import{_ as t,c as p,o as r,k as n,a as e}from"./chunks/framework.CtaooeSn.js";const f=JSON.parse('{"title":"pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/engineering/pnpm.md","filePath":"front-end/engineering/pnpm.md","lastUpdated":1756606061000}'),l={name:"front-end/engineering/pnpm.md"};function o(s,a,d,i,m,c){return r(),p("div",null,[...a[0]||(a[0]=[n("h1",{id:"pnpm",tabindex:"-1"},[e("pnpm "),n("a",{class:"header-anchor",href:"#pnpm","aria-label":'Permalink to "pnpm"'},"​")],-1),n("p",null,"pnpm 全称是 “Performant NPM”，即高性能的 npm。它结合软硬链接与新的依赖组织方式，大大提升了包管理的效率，也同时解决了 “幻影依赖” 的问题，让包管理更加规范，减少潜在风险发生的可能性。",-1),n("p",null,[n("strong",null,"当项目中使用了一个没有在 package.json 文件中定义的包时，则出现幻影依赖（Phantom dependencies），也称为隐式依赖或幽灵依赖"),e("。项目中缺少声明的依赖最好被视作一个 bug, 它可能导致一些不符合预期的不易排查和处理的错误：")],-1),n("ol",null,[n("li",null,[n("strong",null,"不兼容的版本"),e("：项目的 package.json 声明包 A，包 A 依赖包 B，项目中使用到包 B，如果对包 A 进行升级，而且升级的包 A 导致要使用升级的包 B，项目中所有使用到包 B 的地方都可能出现问题，对开发者来说，只是升级包 A，包 B 却出现了版本不兼容问题。")]),n("li",null,[n("strong",null,"缺少依赖"),e("：包 A 是 devDependencies 开发依赖，包 A 依赖包 B，项目中使用到包 B。对于生成环境，不会安装包 A 的，也就不会安装包 B，导致生产环境的依赖丢失。")])],-1)])])}const g=t(l,[["render",o]]);export{f as __pageData,g as default};
